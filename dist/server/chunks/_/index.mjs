import { z } from 'zod';

z.enum(["ReadUncommitted", "ReadCommitted", "RepeatableRead", "Serializable"]);
const UserScalarFieldEnumSchema = z.enum(["id", "name", "email", "emailVerified", "image", "role", "banned", "banReason", "banExpires", "createdAt", "updatedAt"]);
const SessionScalarFieldEnumSchema = z.enum(["id", "userId", "token", "expiresAt", "ipAddress", "userAgent", "impersonatedBy", "createdAt", "updatedAt"]);
const AccountScalarFieldEnumSchema = z.enum(["id", "userId", "accountId", "providerId", "accessToken", "refreshToken", "accessTokenExpiresAt", "refreshTokenExpiresAt", "scope", "idToken", "password", "createdAt", "updatedAt"]);
const VerificationScalarFieldEnumSchema = z.enum(["id", "identifier", "value", "expiresAt", "createdAt", "updatedAt"]);
const ProfileScalarFieldEnumSchema = z.enum(["id", "userId", "address", "country", "state", "city", "postalCode", "governmentId", "governmentIdType", "governmentIdExt", "kycStatus", "createdAt", "updatedAt"]);
const BusinessProfileScalarFieldEnumSchema = z.enum(["id", "financialAccountId", "address", "creationMonth", "creationYear", "proofOfAddress", "proofOfAddressExt", "certificate", "certificateExt", "approved", "createdAt", "updatedAt"]);
const FinancialAccountScalarFieldEnumSchema = z.enum(["id", "creatorId", "name", "number", "status", "type", "ownership", "balance", "totalTransactions", "totalInvestments", "firstTransactionAt", "lastTransactionAt", "closedAt", "dormantAt", "createdAt", "updatedAt"]);
const AccountUserScalarFieldEnumSchema = z.enum(["id", "userId", "financialAccountId", "role", "ownership", "autosign", "createdAt", "updatedAt"]);
const JointAccountRequestScalarFieldEnumSchema = z.enum(["id", "creatorId", "recipientName", "recipientEmail", "role", "ownership", "recipientId", "financialAccountId", "description", "lastReminderAt", "reminderCount", "status", "createdAt", "updatedAt"]);
const JointAccountModRequestScalarFieldEnumSchema = z.enum(["id", "creatorId", "financialAccountId", "type", "transactionId", "description", "createdAt", "updatedAt"]);
const JointAccountModRequestApprovalScalarFieldEnumSchema = z.enum(["id", "jointAccountModRequestId", "approverId", "status", "createdAt", "updatedAt"]);
const InvestmentPlanScalarFieldEnumSchema = z.enum(["id", "name", "category", "minimumDeposit", "maximumDeposit", "duration", "profitDistribution", "percentageTotalReturn", "percentagePeriodicReturn", "terminationFee", "createdAt", "updatedAt"]);
const InvestmentScalarFieldEnumSchema = z.enum(["id", "financialAccountId", "investorId", "deposit", "investmentName", "totalProfit", "profitCount", "status", "pausedAt", "pausedReason", "closedAt", "closedReason", "terminatedAt", "terminatedReason", "category", "daysCompleted", "duration", "totalReturn", "periodicReturn", "profitDistribution", "terminationFee", "createdAt", "updatedAt"]);
const TransactionScalarFieldEnumSchema = z.enum(["id", "amount", "currency", "USDAmount", "rate", "charges", "financialAccountId", "type", "initiatorAccountId", "recipientAccountId", "investmentId", "status", "parentTransactionId", "approvedAt", "failedAt", "failReason", "depositWalletAddress", "depositWalletAddressNetwork", "withdrawalWalletAddress", "withdrawalWalletAddressNetwork", "bank", "bankAccount", "description", "createdAt", "updatedAt"]);
const NotificationScalarFieldEnumSchema = z.enum(["id", "title", "body", "bodyType", "userId", "financialAccountId", "link", "isRead", "createdAt", "updatedAt"]);
const CurrencyScalarFieldEnumSchema = z.enum(["id", "name", "symbol", "image", "rate", "rateUpdatedAt", "walletAddress", "walletAddressNetwork", "allowWithdrawal", "withdrawalCharge", "createdAt", "updatedAt"]);
const SettingsScalarFieldEnumSchema = z.enum(["id", "allowWithdrawals"]);
const SortOrderSchema = z.enum(["asc", "desc"]);
const QueryModeSchema = z.enum(["default", "insensitive"]);
const NullsOrderSchema = z.enum(["first", "last"]);
const UserRoleSchema = z.enum(["admin", "user"]);
const KycStatusSchema = z.enum(["pending", "verified", "rejected", "resubmit"]);
const GovernmentIdTypeSchema = z.enum(["international_passport", "national_id", "driving_license"]);
const AccountTypeSchema = z.enum(["personal", "business"]);
const AccountOwnershipSchema = z.enum(["single", "joint"]);
const AccountStatusSchema = z.enum(["active", "dormant", "closed"]);
const AccountUserRoleSchema = z.enum(["owner", "co_owner", "manager", "admin", "accountant", "investor", "contributor", "legal_guardian", "signatory"]);
const JointAccountRequestStatusSchema = z.enum(["pending", "accepted", "rejected"]);
const JointAccountModRequestTypeSchema = z.enum(["transfer", "withdrawal", "name_change"]);
const ProfitDistributionSchema = z.enum(["daily", "weekly", "bi_weekly", "monthly"]);
const InvestmentPlanCategorySchema = z.enum(["forex", "stocks", "real_estate", "bonds", "commodities", "cryptocurrencies", "derivatives"]);
const InvestmentStatusSchema = z.enum(["open", "closed", "paused", "terminated"]);
const TransactionTypeSchema = z.enum(["deposit", "withdrawal", "transfer", "investment", "profit"]);
const TransactionStatusSchema = z.enum(["pending", "successfull", "reversed", "failed"]);
z.enum(["wire", "crypto"]);
const NotificationBodyTypeSchema = z.enum(["string", "html"]);
z.object({
  role: UserRoleSchema,
  id: z.string().uuid(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().nullable(),
  banned: z.boolean().nullable(),
  banReason: z.string().nullable(),
  banExpires: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  id: z.string().uuid(),
  userId: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  impersonatedBy: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  id: z.string().uuid(),
  userId: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().nullable(),
  refreshToken: z.string().nullable(),
  accessTokenExpiresAt: z.coerce.date().nullable(),
  refreshTokenExpiresAt: z.coerce.date().nullable(),
  scope: z.string().nullable(),
  idToken: z.string().nullable(),
  password: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  id: z.string().uuid(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  governmentIdType: GovernmentIdTypeSchema.nullable(),
  kycStatus: KycStatusSchema.nullable(),
  id: z.string().uuid(),
  userId: z.string(),
  address: z.string().nullable(),
  country: z.string().nullable(),
  state: z.string().nullable(),
  city: z.string().nullable(),
  postalCode: z.string().nullable(),
  governmentId: z.string().nullable(),
  governmentIdExt: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  id: z.string().uuid(),
  financialAccountId: z.string(),
  address: z.string().nullable(),
  creationMonth: z.string().nullable(),
  creationYear: z.number().int().nullable(),
  proofOfAddress: z.string().nullable(),
  proofOfAddressExt: z.string().nullable(),
  certificate: z.string().nullable(),
  certificateExt: z.string().nullable(),
  approved: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
const FinancialAccountSchema = z.object({
  status: AccountStatusSchema,
  type: AccountTypeSchema,
  ownership: AccountOwnershipSchema,
  id: z.string().uuid(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  balance: z.number(),
  totalTransactions: z.number().int(),
  totalInvestments: z.number().int(),
  firstTransactionAt: z.coerce.date().nullable(),
  lastTransactionAt: z.coerce.date().nullable(),
  closedAt: z.coerce.date().nullable(),
  dormantAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  role: AccountUserRoleSchema,
  id: z.string().uuid(),
  userId: z.string(),
  financialAccountId: z.string(),
  ownership: z.number(),
  autosign: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  role: AccountUserRoleSchema,
  status: JointAccountRequestStatusSchema,
  id: z.string().uuid(),
  creatorId: z.string(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  ownership: z.number(),
  recipientId: z.string().nullable(),
  financialAccountId: z.string(),
  description: z.string().nullable(),
  lastReminderAt: z.coerce.date().nullable(),
  reminderCount: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  type: JointAccountModRequestTypeSchema,
  id: z.string().uuid(),
  creatorId: z.string(),
  financialAccountId: z.string(),
  transactionId: z.string().nullable(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  status: JointAccountRequestStatusSchema,
  id: z.string().uuid(),
  jointAccountModRequestId: z.string(),
  approverId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  category: InvestmentPlanCategorySchema,
  profitDistribution: ProfitDistributionSchema,
  id: z.string().uuid(),
  name: z.string(),
  minimumDeposit: z.number(),
  maximumDeposit: z.number(),
  duration: z.number().int(),
  percentageTotalReturn: z.number(),
  percentagePeriodicReturn: z.number(),
  terminationFee: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
const InvestmentSchema = z.object({
  status: InvestmentStatusSchema,
  category: InvestmentPlanCategorySchema,
  profitDistribution: ProfitDistributionSchema,
  id: z.string().uuid(),
  financialAccountId: z.string(),
  investorId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number(),
  profitCount: z.number().int(),
  pausedAt: z.coerce.date().nullable(),
  pausedReason: z.string().nullable(),
  closedAt: z.coerce.date().nullable(),
  closedReason: z.string().nullable(),
  terminatedAt: z.coerce.date().nullable(),
  terminatedReason: z.string().nullable(),
  daysCompleted: z.number().int(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  terminationFee: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  type: TransactionTypeSchema,
  status: TransactionStatusSchema,
  id: z.string().uuid(),
  amount: z.number(),
  currency: z.string(),
  USDAmount: z.number(),
  rate: z.number(),
  charges: z.number(),
  financialAccountId: z.string(),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().nullable(),
  investmentId: z.string().nullable(),
  parentTransactionId: z.string().nullable(),
  approvedAt: z.coerce.date().nullable(),
  failedAt: z.coerce.date().nullable(),
  failReason: z.string().nullable(),
  depositWalletAddress: z.string().nullable(),
  depositWalletAddressNetwork: z.string().nullable(),
  withdrawalWalletAddress: z.string().nullable(),
  withdrawalWalletAddressNetwork: z.string().nullable(),
  bank: z.string().nullable(),
  bankAccount: z.string().nullable(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  bodyType: NotificationBodyTypeSchema,
  id: z.string().uuid(),
  title: z.string(),
  body: z.string(),
  userId: z.string().nullable(),
  financialAccountId: z.string().nullable(),
  link: z.string().nullable(),
  isRead: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  id: z.string().uuid(),
  name: z.string(),
  symbol: z.string(),
  image: z.string().nullable(),
  rate: z.number(),
  rateUpdatedAt: z.coerce.date().nullable(),
  walletAddress: z.string().nullable(),
  walletAddressNetwork: z.string().nullable(),
  allowWithdrawal: z.boolean(),
  withdrawalCharge: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});
z.object({
  id: z.string().uuid(),
  allowWithdrawals: z.boolean()
});
const UserIncludeSchema = z.object({
  profile: z.union([z.boolean(), z.lazy(() => ProfileArgsSchema)]).optional(),
  sessions: z.union([z.boolean(), z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  createdAccounts: z.union([z.boolean(), z.lazy(() => FinancialAccountFindManyArgsSchema)]).optional(),
  accountMemberships: z.union([z.boolean(), z.lazy(() => AccountUserFindManyArgsSchema)]).optional(),
  createdJointAccountRequests: z.union([z.boolean(), z.lazy(() => JointAccountRequestFindManyArgsSchema)]).optional(),
  receivedJointAccountRequests: z.union([z.boolean(), z.lazy(() => JointAccountRequestFindManyArgsSchema)]).optional(),
  createdJointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestFindManyArgsSchema)]).optional(),
  notifications: z.union([z.boolean(), z.lazy(() => NotificationFindManyArgsSchema)]).optional(),
  approvedJointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestApprovalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsSchema)]).optional()
}).strict();
const UserArgsSchema = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional()
}).strict();
const UserCountOutputTypeArgsSchema = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish()
}).strict();
const UserCountOutputTypeSelectSchema = z.object({
  sessions: z.boolean().optional(),
  accounts: z.boolean().optional(),
  createdAccounts: z.boolean().optional(),
  accountMemberships: z.boolean().optional(),
  createdJointAccountRequests: z.boolean().optional(),
  receivedJointAccountRequests: z.boolean().optional(),
  createdJointAccountModRequests: z.boolean().optional(),
  notifications: z.boolean().optional(),
  approvedJointAccountModRequests: z.boolean().optional()
}).strict();
const UserSelectSchema = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  role: z.boolean().optional(),
  banned: z.boolean().optional(),
  banReason: z.boolean().optional(),
  banExpires: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  profile: z.union([z.boolean(), z.lazy(() => ProfileArgsSchema)]).optional(),
  sessions: z.union([z.boolean(), z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  createdAccounts: z.union([z.boolean(), z.lazy(() => FinancialAccountFindManyArgsSchema)]).optional(),
  accountMemberships: z.union([z.boolean(), z.lazy(() => AccountUserFindManyArgsSchema)]).optional(),
  createdJointAccountRequests: z.union([z.boolean(), z.lazy(() => JointAccountRequestFindManyArgsSchema)]).optional(),
  receivedJointAccountRequests: z.union([z.boolean(), z.lazy(() => JointAccountRequestFindManyArgsSchema)]).optional(),
  createdJointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestFindManyArgsSchema)]).optional(),
  notifications: z.union([z.boolean(), z.lazy(() => NotificationFindManyArgsSchema)]).optional(),
  approvedJointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestApprovalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsSchema)]).optional()
}).strict();
const SessionIncludeSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional()
}).strict();
const SessionSelectSchema = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  token: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  impersonatedBy: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
const AccountIncludeSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional()
}).strict();
const AccountSelectSchema = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  idToken: z.boolean().optional(),
  password: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
const VerificationSelectSchema = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
const ProfileIncludeSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
const ProfileArgsSchema = z.object({
  select: z.lazy(() => ProfileSelectSchema).optional(),
  include: z.lazy(() => ProfileIncludeSchema).optional()
}).strict();
const ProfileSelectSchema = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  address: z.boolean().optional(),
  country: z.boolean().optional(),
  state: z.boolean().optional(),
  city: z.boolean().optional(),
  postalCode: z.boolean().optional(),
  governmentId: z.boolean().optional(),
  governmentIdType: z.boolean().optional(),
  governmentIdExt: z.boolean().optional(),
  kycStatus: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
const BusinessProfileIncludeSchema = z.object({
  account: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional()
}).strict();
const BusinessProfileArgsSchema = z.object({
  select: z.lazy(() => BusinessProfileSelectSchema).optional(),
  include: z.lazy(() => BusinessProfileIncludeSchema).optional()
}).strict();
const BusinessProfileSelectSchema = z.object({
  id: z.boolean().optional(),
  financialAccountId: z.boolean().optional(),
  address: z.boolean().optional(),
  creationMonth: z.boolean().optional(),
  creationYear: z.boolean().optional(),
  proofOfAddress: z.boolean().optional(),
  proofOfAddressExt: z.boolean().optional(),
  certificate: z.boolean().optional(),
  certificateExt: z.boolean().optional(),
  approved: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  account: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional()
}).strict();
const FinancialAccountIncludeSchema = z.object({
  creator: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  businessProfile: z.union([z.boolean(), z.lazy(() => BusinessProfileArgsSchema)]).optional(),
  accountUsers: z.union([z.boolean(), z.lazy(() => AccountUserFindManyArgsSchema)]).optional(),
  jointAccountRequests: z.union([z.boolean(), z.lazy(() => JointAccountRequestFindManyArgsSchema)]).optional(),
  jointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestFindManyArgsSchema)]).optional(),
  notifications: z.union([z.boolean(), z.lazy(() => NotificationFindManyArgsSchema)]).optional(),
  transactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  receivedTransactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  investments: z.union([z.boolean(), z.lazy(() => InvestmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => FinancialAccountCountOutputTypeArgsSchema)]).optional()
}).strict();
const FinancialAccountArgsSchema = z.object({
  select: z.lazy(() => FinancialAccountSelectSchema).optional(),
  include: z.lazy(() => FinancialAccountIncludeSchema).optional()
}).strict();
const FinancialAccountCountOutputTypeArgsSchema = z.object({
  select: z.lazy(() => FinancialAccountCountOutputTypeSelectSchema).nullish()
}).strict();
const FinancialAccountCountOutputTypeSelectSchema = z.object({
  accountUsers: z.boolean().optional(),
  jointAccountRequests: z.boolean().optional(),
  jointAccountModRequests: z.boolean().optional(),
  notifications: z.boolean().optional(),
  transactions: z.boolean().optional(),
  receivedTransactions: z.boolean().optional(),
  investments: z.boolean().optional()
}).strict();
const FinancialAccountSelectSchema = z.object({
  id: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  name: z.boolean().optional(),
  number: z.boolean().optional(),
  status: z.boolean().optional(),
  type: z.boolean().optional(),
  ownership: z.boolean().optional(),
  balance: z.boolean().optional(),
  totalTransactions: z.boolean().optional(),
  totalInvestments: z.boolean().optional(),
  firstTransactionAt: z.boolean().optional(),
  lastTransactionAt: z.boolean().optional(),
  closedAt: z.boolean().optional(),
  dormantAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creator: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  businessProfile: z.union([z.boolean(), z.lazy(() => BusinessProfileArgsSchema)]).optional(),
  accountUsers: z.union([z.boolean(), z.lazy(() => AccountUserFindManyArgsSchema)]).optional(),
  jointAccountRequests: z.union([z.boolean(), z.lazy(() => JointAccountRequestFindManyArgsSchema)]).optional(),
  jointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestFindManyArgsSchema)]).optional(),
  notifications: z.union([z.boolean(), z.lazy(() => NotificationFindManyArgsSchema)]).optional(),
  transactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  receivedTransactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  investments: z.union([z.boolean(), z.lazy(() => InvestmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => FinancialAccountCountOutputTypeArgsSchema)]).optional()
}).strict();
const AccountUserIncludeSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  transactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  investments: z.union([z.boolean(), z.lazy(() => InvestmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => AccountUserCountOutputTypeArgsSchema)]).optional()
}).strict();
const AccountUserArgsSchema = z.object({
  select: z.lazy(() => AccountUserSelectSchema).optional(),
  include: z.lazy(() => AccountUserIncludeSchema).optional()
}).strict();
const AccountUserCountOutputTypeArgsSchema = z.object({
  select: z.lazy(() => AccountUserCountOutputTypeSelectSchema).nullish()
}).strict();
const AccountUserCountOutputTypeSelectSchema = z.object({
  transactions: z.boolean().optional(),
  investments: z.boolean().optional()
}).strict();
const AccountUserSelectSchema = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  financialAccountId: z.boolean().optional(),
  role: z.boolean().optional(),
  ownership: z.boolean().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  transactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  investments: z.union([z.boolean(), z.lazy(() => InvestmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => AccountUserCountOutputTypeArgsSchema)]).optional()
}).strict();
const JointAccountRequestIncludeSchema = z.object({
  creator: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  recipient: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional()
}).strict();
z.object({
  select: z.lazy(() => JointAccountRequestSelectSchema).optional(),
  include: z.lazy(() => JointAccountRequestIncludeSchema).optional()
}).strict();
const JointAccountRequestSelectSchema = z.object({
  id: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  recipientName: z.boolean().optional(),
  recipientEmail: z.boolean().optional(),
  role: z.boolean().optional(),
  ownership: z.boolean().optional(),
  recipientId: z.boolean().optional(),
  financialAccountId: z.boolean().optional(),
  description: z.boolean().optional(),
  lastReminderAt: z.boolean().optional(),
  reminderCount: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creator: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  recipient: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional()
}).strict();
const JointAccountModRequestIncludeSchema = z.object({
  creator: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  account: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  transaction: z.union([z.boolean(), z.lazy(() => TransactionArgsSchema)]).optional(),
  approvals: z.union([z.boolean(), z.lazy(() => JointAccountModRequestApprovalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => JointAccountModRequestCountOutputTypeArgsSchema)]).optional()
}).strict();
const JointAccountModRequestArgsSchema = z.object({
  select: z.lazy(() => JointAccountModRequestSelectSchema).optional(),
  include: z.lazy(() => JointAccountModRequestIncludeSchema).optional()
}).strict();
const JointAccountModRequestCountOutputTypeArgsSchema = z.object({
  select: z.lazy(() => JointAccountModRequestCountOutputTypeSelectSchema).nullish()
}).strict();
const JointAccountModRequestCountOutputTypeSelectSchema = z.object({
  approvals: z.boolean().optional()
}).strict();
const JointAccountModRequestSelectSchema = z.object({
  id: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  financialAccountId: z.boolean().optional(),
  type: z.boolean().optional(),
  transactionId: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creator: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  account: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  transaction: z.union([z.boolean(), z.lazy(() => TransactionArgsSchema)]).optional(),
  approvals: z.union([z.boolean(), z.lazy(() => JointAccountModRequestApprovalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => JointAccountModRequestCountOutputTypeArgsSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalIncludeSchema = z.object({
  request: z.union([z.boolean(), z.lazy(() => JointAccountModRequestArgsSchema)]).optional(),
  approver: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
z.object({
  select: z.lazy(() => JointAccountModRequestApprovalSelectSchema).optional(),
  include: z.lazy(() => JointAccountModRequestApprovalIncludeSchema).optional()
}).strict();
const JointAccountModRequestApprovalSelectSchema = z.object({
  id: z.boolean().optional(),
  jointAccountModRequestId: z.boolean().optional(),
  approverId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  request: z.union([z.boolean(), z.lazy(() => JointAccountModRequestArgsSchema)]).optional(),
  approver: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional()
}).strict();
const InvestmentPlanSelectSchema = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  category: z.boolean().optional(),
  minimumDeposit: z.boolean().optional(),
  maximumDeposit: z.boolean().optional(),
  duration: z.boolean().optional(),
  profitDistribution: z.boolean().optional(),
  percentageTotalReturn: z.boolean().optional(),
  percentagePeriodicReturn: z.boolean().optional(),
  terminationFee: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
const InvestmentIncludeSchema = z.object({
  investor: z.union([z.boolean(), z.lazy(() => AccountUserArgsSchema)]).optional(),
  transactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => InvestmentCountOutputTypeArgsSchema)]).optional()
}).strict();
const InvestmentArgsSchema = z.object({
  select: z.lazy(() => InvestmentSelectSchema).optional(),
  include: z.lazy(() => InvestmentIncludeSchema).optional()
}).strict();
const InvestmentCountOutputTypeArgsSchema = z.object({
  select: z.lazy(() => InvestmentCountOutputTypeSelectSchema).nullish()
}).strict();
const InvestmentCountOutputTypeSelectSchema = z.object({
  transactions: z.boolean().optional()
}).strict();
const InvestmentSelectSchema = z.object({
  id: z.boolean().optional(),
  financialAccountId: z.boolean().optional(),
  investorId: z.boolean().optional(),
  deposit: z.boolean().optional(),
  investmentName: z.boolean().optional(),
  totalProfit: z.boolean().optional(),
  profitCount: z.boolean().optional(),
  status: z.boolean().optional(),
  pausedAt: z.boolean().optional(),
  pausedReason: z.boolean().optional(),
  closedAt: z.boolean().optional(),
  closedReason: z.boolean().optional(),
  terminatedAt: z.boolean().optional(),
  terminatedReason: z.boolean().optional(),
  category: z.boolean().optional(),
  daysCompleted: z.boolean().optional(),
  duration: z.boolean().optional(),
  totalReturn: z.boolean().optional(),
  periodicReturn: z.boolean().optional(),
  profitDistribution: z.boolean().optional(),
  terminationFee: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  investor: z.union([z.boolean(), z.lazy(() => AccountUserArgsSchema)]).optional(),
  transactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => InvestmentCountOutputTypeArgsSchema)]).optional()
}).strict();
const TransactionIncludeSchema = z.object({
  initiator: z.union([z.boolean(), z.lazy(() => AccountUserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  recipientAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  investment: z.union([z.boolean(), z.lazy(() => InvestmentArgsSchema)]).optional(),
  jointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestFindManyArgsSchema)]).optional(),
  parentTransaction: z.union([z.boolean(), z.lazy(() => TransactionArgsSchema)]).optional(),
  childTransactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => TransactionCountOutputTypeArgsSchema)]).optional()
}).strict();
const TransactionArgsSchema = z.object({
  select: z.lazy(() => TransactionSelectSchema).optional(),
  include: z.lazy(() => TransactionIncludeSchema).optional()
}).strict();
const TransactionCountOutputTypeArgsSchema = z.object({
  select: z.lazy(() => TransactionCountOutputTypeSelectSchema).nullish()
}).strict();
const TransactionCountOutputTypeSelectSchema = z.object({
  jointAccountModRequests: z.boolean().optional(),
  childTransactions: z.boolean().optional()
}).strict();
const TransactionSelectSchema = z.object({
  id: z.boolean().optional(),
  amount: z.boolean().optional(),
  currency: z.boolean().optional(),
  USDAmount: z.boolean().optional(),
  rate: z.boolean().optional(),
  charges: z.boolean().optional(),
  financialAccountId: z.boolean().optional(),
  type: z.boolean().optional(),
  initiatorAccountId: z.boolean().optional(),
  recipientAccountId: z.boolean().optional(),
  investmentId: z.boolean().optional(),
  status: z.boolean().optional(),
  parentTransactionId: z.boolean().optional(),
  approvedAt: z.boolean().optional(),
  failedAt: z.boolean().optional(),
  failReason: z.boolean().optional(),
  depositWalletAddress: z.boolean().optional(),
  depositWalletAddressNetwork: z.boolean().optional(),
  withdrawalWalletAddress: z.boolean().optional(),
  withdrawalWalletAddressNetwork: z.boolean().optional(),
  bank: z.boolean().optional(),
  bankAccount: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  initiator: z.union([z.boolean(), z.lazy(() => AccountUserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  recipientAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional(),
  investment: z.union([z.boolean(), z.lazy(() => InvestmentArgsSchema)]).optional(),
  jointAccountModRequests: z.union([z.boolean(), z.lazy(() => JointAccountModRequestFindManyArgsSchema)]).optional(),
  parentTransaction: z.union([z.boolean(), z.lazy(() => TransactionArgsSchema)]).optional(),
  childTransactions: z.union([z.boolean(), z.lazy(() => TransactionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => TransactionCountOutputTypeArgsSchema)]).optional()
}).strict();
const NotificationIncludeSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional()
}).strict();
z.object({
  select: z.lazy(() => NotificationSelectSchema).optional(),
  include: z.lazy(() => NotificationIncludeSchema).optional()
}).strict();
const NotificationSelectSchema = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  body: z.boolean().optional(),
  bodyType: z.boolean().optional(),
  userId: z.boolean().optional(),
  financialAccountId: z.boolean().optional(),
  link: z.boolean().optional(),
  isRead: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  financialAccount: z.union([z.boolean(), z.lazy(() => FinancialAccountArgsSchema)]).optional()
}).strict();
const CurrencySelectSchema = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  symbol: z.boolean().optional(),
  image: z.boolean().optional(),
  rate: z.boolean().optional(),
  rateUpdatedAt: z.boolean().optional(),
  walletAddress: z.boolean().optional(),
  walletAddressNetwork: z.boolean().optional(),
  allowWithdrawal: z.boolean().optional(),
  withdrawalCharge: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
const SettingsSelectSchema = z.object({
  id: z.boolean().optional(),
  allowWithdrawals: z.boolean().optional()
}).strict();
const UserWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => UserWhereInputSchema), z.lazy(() => UserWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => UserWhereInputSchema), z.lazy(() => UserWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  emailVerified: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  image: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  role: z.union([z.lazy(() => EnumUserRoleFilterSchema), z.lazy(() => UserRoleSchema)]).optional(),
  banned: z.union([z.lazy(() => BoolNullableFilterSchema), z.boolean()]).optional().nullable(),
  banReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  banExpires: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  profile: z.union([z.lazy(() => ProfileNullableScalarRelationFilterSchema), z.lazy(() => ProfileWhereInputSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountListRelationFilterSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserListRelationFilterSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestListRelationFilterSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestListRelationFilterSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestListRelationFilterSchema).optional(),
  notifications: z.lazy(() => NotificationListRelationFilterSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalListRelationFilterSchema).optional()
}).strict();
const UserOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  banReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  banExpires: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  profile: z.lazy(() => ProfileOrderByWithRelationInputSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountOrderByRelationAggregateInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserOrderByRelationAggregateInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestOrderByRelationAggregateInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestOrderByRelationAggregateInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestOrderByRelationAggregateInputSchema).optional(),
  notifications: z.lazy(() => NotificationOrderByRelationAggregateInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalOrderByRelationAggregateInputSchema).optional()
}).strict();
const UserWhereUniqueInputSchema = z.union([
  z.object({
    id: z.string().uuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().uuid()
  }),
  z.object({
    email: z.string()
  })
]).and(z.object({
  id: z.string().uuid().optional(),
  email: z.string().optional(),
  AND: z.union([z.lazy(() => UserWhereInputSchema), z.lazy(() => UserWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => UserWhereInputSchema), z.lazy(() => UserWhereInputSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  emailVerified: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  image: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  role: z.union([z.lazy(() => EnumUserRoleFilterSchema), z.lazy(() => UserRoleSchema)]).optional(),
  banned: z.union([z.lazy(() => BoolNullableFilterSchema), z.boolean()]).optional().nullable(),
  banReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  banExpires: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  profile: z.union([z.lazy(() => ProfileNullableScalarRelationFilterSchema), z.lazy(() => ProfileWhereInputSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountListRelationFilterSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserListRelationFilterSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestListRelationFilterSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestListRelationFilterSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestListRelationFilterSchema).optional(),
  notifications: z.lazy(() => NotificationListRelationFilterSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalListRelationFilterSchema).optional()
}).strict());
const UserOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  banReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  banExpires: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();
const UserScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => UserScalarWhereWithAggregatesInputSchema), z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => UserScalarWhereWithAggregatesInputSchema), z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  emailVerified: z.union([z.lazy(() => BoolWithAggregatesFilterSchema), z.boolean()]).optional(),
  image: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  role: z.union([z.lazy(() => EnumUserRoleWithAggregatesFilterSchema), z.lazy(() => UserRoleSchema)]).optional(),
  banned: z.union([z.lazy(() => BoolNullableWithAggregatesFilterSchema), z.boolean()]).optional().nullable(),
  banReason: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  banExpires: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const SessionWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => SessionWhereInputSchema), z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionWhereInputSchema), z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  token: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  impersonatedBy: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
const SessionOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  userAgent: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  impersonatedBy: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
const SessionWhereUniqueInputSchema = z.union([
  z.object({
    id: z.string().uuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().uuid()
  }),
  z.object({
    token: z.string()
  })
]).and(z.object({
  id: z.string().uuid().optional(),
  token: z.string().optional(),
  AND: z.union([z.lazy(() => SessionWhereInputSchema), z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionWhereInputSchema), z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  impersonatedBy: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
const SessionOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  userAgent: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  impersonatedBy: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();
const SessionScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => SessionScalarWhereWithAggregatesInputSchema), z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionScalarWhereWithAggregatesInputSchema), z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  token: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  impersonatedBy: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const AccountWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => AccountWhereInputSchema), z.lazy(() => AccountWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountWhereInputSchema), z.lazy(() => AccountWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  accountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
const AccountOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  refreshToken: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  accessTokenExpiresAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  refreshTokenExpiresAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  scope: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  idToken: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  password: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
const AccountWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => AccountWhereInputSchema), z.lazy(() => AccountWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountWhereInputSchema), z.lazy(() => AccountWhereInputSchema).array()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  accountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
const AccountOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  refreshToken: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  accessTokenExpiresAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  refreshTokenExpiresAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  scope: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  idToken: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  password: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional()
}).strict();
const AccountScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => AccountScalarWhereWithAggregatesInputSchema), z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountScalarWhereWithAggregatesInputSchema), z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  accountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const VerificationWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => VerificationWhereInputSchema), z.lazy(() => VerificationWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => VerificationWhereInputSchema), z.lazy(() => VerificationWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  identifier: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const VerificationOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const VerificationWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => VerificationWhereInputSchema), z.lazy(() => VerificationWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => VerificationWhereInputSchema), z.lazy(() => VerificationWhereInputSchema).array()]).optional(),
  identifier: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict());
const VerificationOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputSchema).optional()
}).strict();
const VerificationScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema), z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema), z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  identifier: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  value: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const ProfileWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => ProfileWhereInputSchema), z.lazy(() => ProfileWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => ProfileWhereInputSchema), z.lazy(() => ProfileWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  address: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  country: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  state: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  city: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  postalCode: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  governmentId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => EnumGovernmentIdTypeNullableFilterSchema), z.lazy(() => GovernmentIdTypeSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => EnumKycStatusNullableFilterSchema), z.lazy(() => KycStatusSchema)]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
const ProfileOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  country: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  state: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  city: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  postalCode: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  governmentId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  governmentIdType: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  governmentIdExt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  kycStatus: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
const ProfileWhereUniqueInputSchema = z.union([
  z.object({
    id: z.string().uuid(),
    userId: z.string()
  }),
  z.object({
    id: z.string().uuid()
  }),
  z.object({
    userId: z.string()
  })
]).and(z.object({
  id: z.string().uuid().optional(),
  userId: z.string().optional(),
  AND: z.union([z.lazy(() => ProfileWhereInputSchema), z.lazy(() => ProfileWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => ProfileWhereInputSchema), z.lazy(() => ProfileWhereInputSchema).array()]).optional(),
  address: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  country: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  state: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  city: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  postalCode: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  governmentId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => EnumGovernmentIdTypeNullableFilterSchema), z.lazy(() => GovernmentIdTypeSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => EnumKycStatusNullableFilterSchema), z.lazy(() => KycStatusSchema)]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
const ProfileOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  country: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  state: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  city: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  postalCode: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  governmentId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  governmentIdType: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  governmentIdExt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  kycStatus: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProfileCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProfileMinOrderByAggregateInputSchema).optional()
}).strict();
const ProfileScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema), z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema), z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  address: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  country: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  state: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  city: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  postalCode: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  governmentId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => EnumGovernmentIdTypeNullableWithAggregatesFilterSchema), z.lazy(() => GovernmentIdTypeSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => EnumKycStatusNullableWithAggregatesFilterSchema), z.lazy(() => KycStatusSchema)]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const BusinessProfileWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => BusinessProfileWhereInputSchema), z.lazy(() => BusinessProfileWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => BusinessProfileWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => BusinessProfileWhereInputSchema), z.lazy(() => BusinessProfileWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  address: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  creationMonth: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  creationYear: z.union([z.lazy(() => IntNullableFilterSchema), z.number()]).optional().nullable(),
  proofOfAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  proofOfAddressExt: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  certificate: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  certificateExt: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  approved: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  account: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional()
}).strict();
const BusinessProfileOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  creationMonth: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  creationYear: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  proofOfAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  proofOfAddressExt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  certificate: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  certificateExt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  approved: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  account: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional()
}).strict();
const BusinessProfileWhereUniqueInputSchema = z.union([
  z.object({
    id: z.string().uuid(),
    financialAccountId: z.string()
  }),
  z.object({
    id: z.string().uuid()
  }),
  z.object({
    financialAccountId: z.string()
  })
]).and(z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string().optional(),
  AND: z.union([z.lazy(() => BusinessProfileWhereInputSchema), z.lazy(() => BusinessProfileWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => BusinessProfileWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => BusinessProfileWhereInputSchema), z.lazy(() => BusinessProfileWhereInputSchema).array()]).optional(),
  address: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  creationMonth: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  creationYear: z.union([z.lazy(() => IntNullableFilterSchema), z.number().int()]).optional().nullable(),
  proofOfAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  proofOfAddressExt: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  certificate: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  certificateExt: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  approved: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  account: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional()
}).strict());
const BusinessProfileOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  creationMonth: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  creationYear: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  proofOfAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  proofOfAddressExt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  certificate: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  certificateExt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  approved: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => BusinessProfileCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BusinessProfileAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BusinessProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BusinessProfileMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BusinessProfileSumOrderByAggregateInputSchema).optional()
}).strict();
const BusinessProfileScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => BusinessProfileScalarWhereWithAggregatesInputSchema), z.lazy(() => BusinessProfileScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => BusinessProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => BusinessProfileScalarWhereWithAggregatesInputSchema), z.lazy(() => BusinessProfileScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  address: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  creationMonth: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  creationYear: z.union([z.lazy(() => IntNullableWithAggregatesFilterSchema), z.number()]).optional().nullable(),
  proofOfAddress: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  proofOfAddressExt: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  certificate: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  certificateExt: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  approved: z.union([z.lazy(() => BoolWithAggregatesFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const FinancialAccountWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => FinancialAccountWhereInputSchema), z.lazy(() => FinancialAccountWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => FinancialAccountWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => FinancialAccountWhereInputSchema), z.lazy(() => FinancialAccountWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumAccountStatusFilterSchema), z.lazy(() => AccountStatusSchema)]).optional(),
  type: z.union([z.lazy(() => EnumAccountTypeFilterSchema), z.lazy(() => AccountTypeSchema)]).optional(),
  ownership: z.union([z.lazy(() => EnumAccountOwnershipFilterSchema), z.lazy(() => AccountOwnershipSchema)]).optional(),
  balance: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  totalTransactions: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  totalInvestments: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  firstTransactionAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  lastTransactionAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  dormantAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  creator: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  businessProfile: z.union([z.lazy(() => BusinessProfileNullableScalarRelationFilterSchema), z.lazy(() => BusinessProfileWhereInputSchema)]).optional().nullable(),
  accountUsers: z.lazy(() => AccountUserListRelationFilterSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestListRelationFilterSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestListRelationFilterSchema).optional(),
  notifications: z.lazy(() => NotificationListRelationFilterSchema).optional(),
  transactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  investments: z.lazy(() => InvestmentListRelationFilterSchema).optional()
}).strict();
const FinancialAccountOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  totalTransactions: z.lazy(() => SortOrderSchema).optional(),
  totalInvestments: z.lazy(() => SortOrderSchema).optional(),
  firstTransactionAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  lastTransactionAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  closedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  dormantAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileOrderByWithRelationInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserOrderByRelationAggregateInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestOrderByRelationAggregateInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestOrderByRelationAggregateInputSchema).optional(),
  notifications: z.lazy(() => NotificationOrderByRelationAggregateInputSchema).optional(),
  transactions: z.lazy(() => TransactionOrderByRelationAggregateInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionOrderByRelationAggregateInputSchema).optional(),
  investments: z.lazy(() => InvestmentOrderByRelationAggregateInputSchema).optional()
}).strict();
const FinancialAccountWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => FinancialAccountWhereInputSchema), z.lazy(() => FinancialAccountWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => FinancialAccountWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => FinancialAccountWhereInputSchema), z.lazy(() => FinancialAccountWhereInputSchema).array()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumAccountStatusFilterSchema), z.lazy(() => AccountStatusSchema)]).optional(),
  type: z.union([z.lazy(() => EnumAccountTypeFilterSchema), z.lazy(() => AccountTypeSchema)]).optional(),
  ownership: z.union([z.lazy(() => EnumAccountOwnershipFilterSchema), z.lazy(() => AccountOwnershipSchema)]).optional(),
  balance: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  totalTransactions: z.union([z.lazy(() => IntFilterSchema), z.number().int()]).optional(),
  totalInvestments: z.union([z.lazy(() => IntFilterSchema), z.number().int()]).optional(),
  firstTransactionAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  lastTransactionAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  dormantAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  creator: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  businessProfile: z.union([z.lazy(() => BusinessProfileNullableScalarRelationFilterSchema), z.lazy(() => BusinessProfileWhereInputSchema)]).optional().nullable(),
  accountUsers: z.lazy(() => AccountUserListRelationFilterSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestListRelationFilterSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestListRelationFilterSchema).optional(),
  notifications: z.lazy(() => NotificationListRelationFilterSchema).optional(),
  transactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  investments: z.lazy(() => InvestmentListRelationFilterSchema).optional()
}).strict());
const FinancialAccountOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  totalTransactions: z.lazy(() => SortOrderSchema).optional(),
  totalInvestments: z.lazy(() => SortOrderSchema).optional(),
  firstTransactionAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  lastTransactionAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  closedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  dormantAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FinancialAccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FinancialAccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FinancialAccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FinancialAccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FinancialAccountSumOrderByAggregateInputSchema).optional()
}).strict();
const FinancialAccountScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => FinancialAccountScalarWhereWithAggregatesInputSchema), z.lazy(() => FinancialAccountScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => FinancialAccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => FinancialAccountScalarWhereWithAggregatesInputSchema), z.lazy(() => FinancialAccountScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  number: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumAccountStatusWithAggregatesFilterSchema), z.lazy(() => AccountStatusSchema)]).optional(),
  type: z.union([z.lazy(() => EnumAccountTypeWithAggregatesFilterSchema), z.lazy(() => AccountTypeSchema)]).optional(),
  ownership: z.union([z.lazy(() => EnumAccountOwnershipWithAggregatesFilterSchema), z.lazy(() => AccountOwnershipSchema)]).optional(),
  balance: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  totalTransactions: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
  totalInvestments: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
  firstTransactionAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  lastTransactionAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  dormantAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const AccountUserWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => AccountUserWhereInputSchema), z.lazy(() => AccountUserWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountUserWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountUserWhereInputSchema), z.lazy(() => AccountUserWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  autosign: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  investments: z.lazy(() => InvestmentListRelationFilterSchema).optional()
}).strict();
const AccountUserOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  autosign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional(),
  transactions: z.lazy(() => TransactionOrderByRelationAggregateInputSchema).optional(),
  investments: z.lazy(() => InvestmentOrderByRelationAggregateInputSchema).optional()
}).strict();
const AccountUserWhereUniqueInputSchema = z.union([
  z.object({
    id: z.string().uuid(),
    userId_financialAccountId: z.lazy(() => AccountUserUserIdFinancialAccountIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().uuid()
  }),
  z.object({
    userId_financialAccountId: z.lazy(() => AccountUserUserIdFinancialAccountIdCompoundUniqueInputSchema)
  })
]).and(z.object({
  id: z.string().uuid().optional(),
  userId_financialAccountId: z.lazy(() => AccountUserUserIdFinancialAccountIdCompoundUniqueInputSchema).optional(),
  AND: z.union([z.lazy(() => AccountUserWhereInputSchema), z.lazy(() => AccountUserWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountUserWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountUserWhereInputSchema), z.lazy(() => AccountUserWhereInputSchema).array()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  autosign: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  investments: z.lazy(() => InvestmentListRelationFilterSchema).optional()
}).strict());
const AccountUserOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  autosign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountUserCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccountUserAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountUserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountUserMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccountUserSumOrderByAggregateInputSchema).optional()
}).strict();
const AccountUserScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => AccountUserScalarWhereWithAggregatesInputSchema), z.lazy(() => AccountUserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountUserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountUserScalarWhereWithAggregatesInputSchema), z.lazy(() => AccountUserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleWithAggregatesFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  autosign: z.union([z.lazy(() => BoolWithAggregatesFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const JointAccountRequestWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountRequestWhereInputSchema), z.lazy(() => JointAccountRequestWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountRequestWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountRequestWhereInputSchema), z.lazy(() => JointAccountRequestWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientName: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientEmail: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  recipientId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  lastReminderAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  reminderCount: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  creator: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  recipient: z.union([z.lazy(() => UserNullableScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional()
}).strict();
const JointAccountRequestOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  recipientName: z.lazy(() => SortOrderSchema).optional(),
  recipientEmail: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  recipientId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  lastReminderAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  reminderCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  recipient: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional()
}).strict();
const JointAccountRequestWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => JointAccountRequestWhereInputSchema), z.lazy(() => JointAccountRequestWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountRequestWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountRequestWhereInputSchema), z.lazy(() => JointAccountRequestWhereInputSchema).array()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientName: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientEmail: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  recipientId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  lastReminderAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  reminderCount: z.union([z.lazy(() => IntFilterSchema), z.number().int()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  creator: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  recipient: z.union([z.lazy(() => UserNullableScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional()
}).strict());
const JointAccountRequestOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  recipientName: z.lazy(() => SortOrderSchema).optional(),
  recipientEmail: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  recipientId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  lastReminderAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  reminderCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => JointAccountRequestCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => JointAccountRequestAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => JointAccountRequestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => JointAccountRequestMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => JointAccountRequestSumOrderByAggregateInputSchema).optional()
}).strict();
const JointAccountRequestScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountRequestScalarWhereWithAggregatesInputSchema), z.lazy(() => JointAccountRequestScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountRequestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountRequestScalarWhereWithAggregatesInputSchema), z.lazy(() => JointAccountRequestScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  recipientName: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  recipientEmail: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleWithAggregatesFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  recipientId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  description: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  lastReminderAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  reminderCount: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusWithAggregatesFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const JointAccountModRequestWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountModRequestWhereInputSchema), z.lazy(() => JointAccountModRequestWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestWhereInputSchema), z.lazy(() => JointAccountModRequestWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumJointAccountModRequestTypeFilterSchema), z.lazy(() => JointAccountModRequestTypeSchema)]).optional(),
  transactionId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  creator: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  account: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  transaction: z.union([z.lazy(() => TransactionNullableScalarRelationFilterSchema), z.lazy(() => TransactionWhereInputSchema)]).optional().nullable(),
  approvals: z.lazy(() => JointAccountModRequestApprovalListRelationFilterSchema).optional()
}).strict();
const JointAccountModRequestOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  transactionId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  description: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  account: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional(),
  transaction: z.lazy(() => TransactionOrderByWithRelationInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalOrderByRelationAggregateInputSchema).optional()
}).strict();
const JointAccountModRequestWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => JointAccountModRequestWhereInputSchema), z.lazy(() => JointAccountModRequestWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestWhereInputSchema), z.lazy(() => JointAccountModRequestWhereInputSchema).array()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumJointAccountModRequestTypeFilterSchema), z.lazy(() => JointAccountModRequestTypeSchema)]).optional(),
  transactionId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  creator: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional(),
  account: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  transaction: z.union([z.lazy(() => TransactionNullableScalarRelationFilterSchema), z.lazy(() => TransactionWhereInputSchema)]).optional().nullable(),
  approvals: z.lazy(() => JointAccountModRequestApprovalListRelationFilterSchema).optional()
}).strict());
const JointAccountModRequestOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  transactionId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  description: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => JointAccountModRequestCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => JointAccountModRequestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => JointAccountModRequestMinOrderByAggregateInputSchema).optional()
}).strict();
const JointAccountModRequestScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountModRequestScalarWhereWithAggregatesInputSchema), z.lazy(() => JointAccountModRequestScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestScalarWhereWithAggregatesInputSchema), z.lazy(() => JointAccountModRequestScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumJointAccountModRequestTypeWithAggregatesFilterSchema), z.lazy(() => JointAccountModRequestTypeSchema)]).optional(),
  transactionId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const JointAccountModRequestApprovalWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountModRequestApprovalWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestApprovalWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  jointAccountModRequestId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  approverId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  request: z.union([z.lazy(() => JointAccountModRequestScalarRelationFilterSchema), z.lazy(() => JointAccountModRequestWhereInputSchema)]).optional(),
  approver: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  jointAccountModRequestId: z.lazy(() => SortOrderSchema).optional(),
  approverId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  request: z.lazy(() => JointAccountModRequestOrderByWithRelationInputSchema).optional(),
  approver: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => JointAccountModRequestApprovalWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestApprovalWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).array()]).optional(),
  jointAccountModRequestId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  approverId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  request: z.union([z.lazy(() => JointAccountModRequestScalarRelationFilterSchema), z.lazy(() => JointAccountModRequestWhereInputSchema)]).optional(),
  approver: z.union([z.lazy(() => UserScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
const JointAccountModRequestApprovalOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  jointAccountModRequestId: z.lazy(() => SortOrderSchema).optional(),
  approverId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => JointAccountModRequestApprovalCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => JointAccountModRequestApprovalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => JointAccountModRequestApprovalMinOrderByAggregateInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereWithAggregatesInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestApprovalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereWithAggregatesInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  jointAccountModRequestId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  approverId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusWithAggregatesFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const InvestmentPlanWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => InvestmentPlanWhereInputSchema), z.lazy(() => InvestmentPlanWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => InvestmentPlanWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvestmentPlanWhereInputSchema), z.lazy(() => InvestmentPlanWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  category: z.union([z.lazy(() => EnumInvestmentPlanCategoryFilterSchema), z.lazy(() => InvestmentPlanCategorySchema)]).optional(),
  minimumDeposit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  maximumDeposit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  duration: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  profitDistribution: z.union([z.lazy(() => EnumProfitDistributionFilterSchema), z.lazy(() => ProfitDistributionSchema)]).optional(),
  percentageTotalReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  percentagePeriodicReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  terminationFee: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const InvestmentPlanOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  minimumDeposit: z.lazy(() => SortOrderSchema).optional(),
  maximumDeposit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  percentageTotalReturn: z.lazy(() => SortOrderSchema).optional(),
  percentagePeriodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentPlanWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => InvestmentPlanWhereInputSchema), z.lazy(() => InvestmentPlanWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => InvestmentPlanWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvestmentPlanWhereInputSchema), z.lazy(() => InvestmentPlanWhereInputSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  category: z.union([z.lazy(() => EnumInvestmentPlanCategoryFilterSchema), z.lazy(() => InvestmentPlanCategorySchema)]).optional(),
  minimumDeposit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  maximumDeposit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  duration: z.union([z.lazy(() => IntFilterSchema), z.number().int()]).optional(),
  profitDistribution: z.union([z.lazy(() => EnumProfitDistributionFilterSchema), z.lazy(() => ProfitDistributionSchema)]).optional(),
  percentageTotalReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  percentagePeriodicReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  terminationFee: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict());
const InvestmentPlanOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  minimumDeposit: z.lazy(() => SortOrderSchema).optional(),
  maximumDeposit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  percentageTotalReturn: z.lazy(() => SortOrderSchema).optional(),
  percentagePeriodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvestmentPlanCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InvestmentPlanAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvestmentPlanMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvestmentPlanMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InvestmentPlanSumOrderByAggregateInputSchema).optional()
}).strict();
const InvestmentPlanScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => InvestmentPlanScalarWhereWithAggregatesInputSchema), z.lazy(() => InvestmentPlanScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => InvestmentPlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvestmentPlanScalarWhereWithAggregatesInputSchema), z.lazy(() => InvestmentPlanScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  category: z.union([z.lazy(() => EnumInvestmentPlanCategoryWithAggregatesFilterSchema), z.lazy(() => InvestmentPlanCategorySchema)]).optional(),
  minimumDeposit: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  maximumDeposit: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  duration: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
  profitDistribution: z.union([z.lazy(() => EnumProfitDistributionWithAggregatesFilterSchema), z.lazy(() => ProfitDistributionSchema)]).optional(),
  percentageTotalReturn: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  percentagePeriodicReturn: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  terminationFee: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const InvestmentWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => InvestmentWhereInputSchema), z.lazy(() => InvestmentWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => InvestmentWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvestmentWhereInputSchema), z.lazy(() => InvestmentWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  investorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  deposit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  investmentName: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  totalProfit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  profitCount: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  status: z.union([z.lazy(() => EnumInvestmentStatusFilterSchema), z.lazy(() => InvestmentStatusSchema)]).optional(),
  pausedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  pausedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  closedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  terminatedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  terminatedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  category: z.union([z.lazy(() => EnumInvestmentPlanCategoryFilterSchema), z.lazy(() => InvestmentPlanCategorySchema)]).optional(),
  daysCompleted: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  duration: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  totalReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  periodicReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  profitDistribution: z.union([z.lazy(() => EnumProfitDistributionFilterSchema), z.lazy(() => ProfitDistributionSchema)]).optional(),
  terminationFee: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  investor: z.union([z.lazy(() => AccountUserScalarRelationFilterSchema), z.lazy(() => AccountUserWhereInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional()
}).strict();
const InvestmentOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  investorId: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  investmentName: z.lazy(() => SortOrderSchema).optional(),
  totalProfit: z.lazy(() => SortOrderSchema).optional(),
  profitCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  pausedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  pausedReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  closedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  closedReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  terminatedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  terminatedReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  daysCompleted: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  totalReturn: z.lazy(() => SortOrderSchema).optional(),
  periodicReturn: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  investor: z.lazy(() => AccountUserOrderByWithRelationInputSchema).optional(),
  transactions: z.lazy(() => TransactionOrderByRelationAggregateInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional()
}).strict();
const InvestmentWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => InvestmentWhereInputSchema), z.lazy(() => InvestmentWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => InvestmentWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvestmentWhereInputSchema), z.lazy(() => InvestmentWhereInputSchema).array()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  investorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  deposit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  investmentName: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  totalProfit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  profitCount: z.union([z.lazy(() => IntFilterSchema), z.number().int()]).optional(),
  status: z.union([z.lazy(() => EnumInvestmentStatusFilterSchema), z.lazy(() => InvestmentStatusSchema)]).optional(),
  pausedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  pausedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  closedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  terminatedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  terminatedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  category: z.union([z.lazy(() => EnumInvestmentPlanCategoryFilterSchema), z.lazy(() => InvestmentPlanCategorySchema)]).optional(),
  daysCompleted: z.union([z.lazy(() => IntFilterSchema), z.number().int()]).optional(),
  duration: z.union([z.lazy(() => IntFilterSchema), z.number().int()]).optional(),
  totalReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  periodicReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  profitDistribution: z.union([z.lazy(() => EnumProfitDistributionFilterSchema), z.lazy(() => ProfitDistributionSchema)]).optional(),
  terminationFee: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  investor: z.union([z.lazy(() => AccountUserScalarRelationFilterSchema), z.lazy(() => AccountUserWhereInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionListRelationFilterSchema).optional(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional()
}).strict());
const InvestmentOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  investorId: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  investmentName: z.lazy(() => SortOrderSchema).optional(),
  totalProfit: z.lazy(() => SortOrderSchema).optional(),
  profitCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  pausedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  pausedReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  closedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  closedReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  terminatedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  terminatedReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  daysCompleted: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  totalReturn: z.lazy(() => SortOrderSchema).optional(),
  periodicReturn: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvestmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InvestmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvestmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvestmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InvestmentSumOrderByAggregateInputSchema).optional()
}).strict();
const InvestmentScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => InvestmentScalarWhereWithAggregatesInputSchema), z.lazy(() => InvestmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => InvestmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvestmentScalarWhereWithAggregatesInputSchema), z.lazy(() => InvestmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  investorId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  deposit: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  investmentName: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  totalProfit: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  profitCount: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
  status: z.union([z.lazy(() => EnumInvestmentStatusWithAggregatesFilterSchema), z.lazy(() => InvestmentStatusSchema)]).optional(),
  pausedAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  pausedReason: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  closedReason: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  terminatedAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  terminatedReason: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  category: z.union([z.lazy(() => EnumInvestmentPlanCategoryWithAggregatesFilterSchema), z.lazy(() => InvestmentPlanCategorySchema)]).optional(),
  daysCompleted: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
  duration: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
  totalReturn: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  periodicReturn: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  profitDistribution: z.union([z.lazy(() => EnumProfitDistributionWithAggregatesFilterSchema), z.lazy(() => ProfitDistributionSchema)]).optional(),
  terminationFee: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const TransactionWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => TransactionWhereInputSchema), z.lazy(() => TransactionWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => TransactionWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => TransactionWhereInputSchema), z.lazy(() => TransactionWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  amount: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  currency: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  USDAmount: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  rate: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  charges: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumTransactionTypeFilterSchema), z.lazy(() => TransactionTypeSchema)]).optional(),
  initiatorAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientAccountId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  investmentId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => EnumTransactionStatusFilterSchema), z.lazy(() => TransactionStatusSchema)]).optional(),
  parentTransactionId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  approvedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  failedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  failReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  bank: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  bankAccount: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  initiator: z.union([z.lazy(() => AccountUserScalarRelationFilterSchema), z.lazy(() => AccountUserWhereInputSchema)]).optional(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  recipientAccount: z.union([z.lazy(() => FinancialAccountNullableScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional().nullable(),
  investment: z.union([z.lazy(() => InvestmentNullableScalarRelationFilterSchema), z.lazy(() => InvestmentWhereInputSchema)]).optional().nullable(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestListRelationFilterSchema).optional(),
  parentTransaction: z.union([z.lazy(() => TransactionNullableScalarRelationFilterSchema), z.lazy(() => TransactionWhereInputSchema)]).optional().nullable(),
  childTransactions: z.lazy(() => TransactionListRelationFilterSchema).optional()
}).strict();
const TransactionOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  USDAmount: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  charges: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  initiatorAccountId: z.lazy(() => SortOrderSchema).optional(),
  recipientAccountId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  investmentId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  parentTransactionId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  approvedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  failedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  failReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  depositWalletAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  depositWalletAddressNetwork: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  withdrawalWalletAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  withdrawalWalletAddressNetwork: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  bank: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  bankAccount: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  description: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  initiator: z.lazy(() => AccountUserOrderByWithRelationInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional(),
  investment: z.lazy(() => InvestmentOrderByWithRelationInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestOrderByRelationAggregateInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionOrderByWithRelationInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionOrderByRelationAggregateInputSchema).optional()
}).strict();
const TransactionWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => TransactionWhereInputSchema), z.lazy(() => TransactionWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => TransactionWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => TransactionWhereInputSchema), z.lazy(() => TransactionWhereInputSchema).array()]).optional(),
  amount: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  currency: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  USDAmount: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  rate: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  charges: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumTransactionTypeFilterSchema), z.lazy(() => TransactionTypeSchema)]).optional(),
  initiatorAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientAccountId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  investmentId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => EnumTransactionStatusFilterSchema), z.lazy(() => TransactionStatusSchema)]).optional(),
  parentTransactionId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  approvedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  failedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  failReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  bank: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  bankAccount: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  initiator: z.union([z.lazy(() => AccountUserScalarRelationFilterSchema), z.lazy(() => AccountUserWhereInputSchema)]).optional(),
  financialAccount: z.union([z.lazy(() => FinancialAccountScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  recipientAccount: z.union([z.lazy(() => FinancialAccountNullableScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional().nullable(),
  investment: z.union([z.lazy(() => InvestmentNullableScalarRelationFilterSchema), z.lazy(() => InvestmentWhereInputSchema)]).optional().nullable(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestListRelationFilterSchema).optional(),
  parentTransaction: z.union([z.lazy(() => TransactionNullableScalarRelationFilterSchema), z.lazy(() => TransactionWhereInputSchema)]).optional().nullable(),
  childTransactions: z.lazy(() => TransactionListRelationFilterSchema).optional()
}).strict());
const TransactionOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  USDAmount: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  charges: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  initiatorAccountId: z.lazy(() => SortOrderSchema).optional(),
  recipientAccountId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  investmentId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  parentTransactionId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  approvedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  failedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  failReason: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  depositWalletAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  depositWalletAddressNetwork: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  withdrawalWalletAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  withdrawalWalletAddressNetwork: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  bank: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  bankAccount: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  description: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TransactionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TransactionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TransactionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TransactionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TransactionSumOrderByAggregateInputSchema).optional()
}).strict();
const TransactionScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => TransactionScalarWhereWithAggregatesInputSchema), z.lazy(() => TransactionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => TransactionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => TransactionScalarWhereWithAggregatesInputSchema), z.lazy(() => TransactionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  amount: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  currency: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  USDAmount: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  rate: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  charges: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumTransactionTypeWithAggregatesFilterSchema), z.lazy(() => TransactionTypeSchema)]).optional(),
  initiatorAccountId: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  recipientAccountId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  investmentId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => EnumTransactionStatusWithAggregatesFilterSchema), z.lazy(() => TransactionStatusSchema)]).optional(),
  parentTransactionId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  approvedAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  failedAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  failReason: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddress: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  bank: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  bankAccount: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const NotificationWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => NotificationWhereInputSchema), z.lazy(() => NotificationWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => NotificationWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => NotificationWhereInputSchema), z.lazy(() => NotificationWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  title: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  body: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  bodyType: z.union([z.lazy(() => EnumNotificationBodyTypeFilterSchema), z.lazy(() => NotificationBodyTypeSchema)]).optional(),
  userId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  link: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  isRead: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserNullableScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  financialAccount: z.union([z.lazy(() => FinancialAccountNullableScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional().nullable()
}).strict();
const NotificationOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  financialAccountId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  link: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  isRead: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountOrderByWithRelationInputSchema).optional()
}).strict();
const NotificationWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => NotificationWhereInputSchema), z.lazy(() => NotificationWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => NotificationWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => NotificationWhereInputSchema), z.lazy(() => NotificationWhereInputSchema).array()]).optional(),
  title: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  body: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  bodyType: z.union([z.lazy(() => EnumNotificationBodyTypeFilterSchema), z.lazy(() => NotificationBodyTypeSchema)]).optional(),
  userId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  link: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  isRead: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  user: z.union([z.lazy(() => UserNullableScalarRelationFilterSchema), z.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  financialAccount: z.union([z.lazy(() => FinancialAccountNullableScalarRelationFilterSchema), z.lazy(() => FinancialAccountWhereInputSchema)]).optional().nullable()
}).strict());
const NotificationOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  financialAccountId: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  link: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  isRead: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => NotificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => NotificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => NotificationMinOrderByAggregateInputSchema).optional()
}).strict();
const NotificationScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema), z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema), z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  title: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  body: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  bodyType: z.union([z.lazy(() => EnumNotificationBodyTypeWithAggregatesFilterSchema), z.lazy(() => NotificationBodyTypeSchema)]).optional(),
  userId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  link: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  isRead: z.union([z.lazy(() => BoolWithAggregatesFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const CurrencyWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => CurrencyWhereInputSchema), z.lazy(() => CurrencyWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => CurrencyWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => CurrencyWhereInputSchema), z.lazy(() => CurrencyWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  symbol: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  image: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  rate: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  rateUpdatedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  walletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  walletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  allowWithdrawal: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  withdrawalCharge: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const CurrencyOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  rateUpdatedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  walletAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  walletAddressNetwork: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  allowWithdrawal: z.lazy(() => SortOrderSchema).optional(),
  withdrawalCharge: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const CurrencyWhereUniqueInputSchema = z.union([
  z.object({
    id: z.string().uuid(),
    symbol: z.string()
  }),
  z.object({
    id: z.string().uuid()
  }),
  z.object({
    symbol: z.string()
  })
]).and(z.object({
  id: z.string().uuid().optional(),
  symbol: z.string().optional(),
  AND: z.union([z.lazy(() => CurrencyWhereInputSchema), z.lazy(() => CurrencyWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => CurrencyWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => CurrencyWhereInputSchema), z.lazy(() => CurrencyWhereInputSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  image: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  rate: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  rateUpdatedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  walletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  walletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  allowWithdrawal: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  withdrawalCharge: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict());
const CurrencyOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  rateUpdatedAt: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  walletAddress: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  walletAddressNetwork: z.union([z.lazy(() => SortOrderSchema), z.lazy(() => SortOrderInputSchema)]).optional(),
  allowWithdrawal: z.lazy(() => SortOrderSchema).optional(),
  withdrawalCharge: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CurrencyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CurrencyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CurrencyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CurrencyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CurrencySumOrderByAggregateInputSchema).optional()
}).strict();
const CurrencyScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema), z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema), z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  symbol: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  image: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  rate: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  rateUpdatedAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()]).optional().nullable(),
  walletAddress: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  walletAddressNetwork: z.union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()]).optional().nullable(),
  allowWithdrawal: z.union([z.lazy(() => BoolWithAggregatesFilterSchema), z.boolean()]).optional(),
  withdrawalCharge: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional()
}).strict();
const SettingsWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => SettingsWhereInputSchema), z.lazy(() => SettingsWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => SettingsWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => SettingsWhereInputSchema), z.lazy(() => SettingsWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  allowWithdrawals: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional()
}).strict();
const SettingsOrderByWithRelationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawals: z.lazy(() => SortOrderSchema).optional()
}).strict();
const SettingsWhereUniqueInputSchema = z.object({
  id: z.string().uuid()
}).and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([z.lazy(() => SettingsWhereInputSchema), z.lazy(() => SettingsWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => SettingsWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => SettingsWhereInputSchema), z.lazy(() => SettingsWhereInputSchema).array()]).optional(),
  allowWithdrawals: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional()
}).strict());
const SettingsOrderByWithAggregationInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawals: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SettingsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SettingsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SettingsMinOrderByAggregateInputSchema).optional()
}).strict();
const SettingsScalarWhereWithAggregatesInputSchema = z.object({
  AND: z.union([z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema), z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema), z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
  allowWithdrawals: z.union([z.lazy(() => BoolWithAggregatesFilterSchema), z.boolean()]).optional()
}).strict();
const UserCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const UserUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const UserUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SessionCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();
const SessionUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const SessionUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();
const SessionUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SessionCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const SessionUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SessionUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();
const AccountUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();
const AccountUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const VerificationCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const VerificationUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const VerificationUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const VerificationUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const VerificationCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const VerificationUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const VerificationUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const ProfileCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  address: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  governmentId: z.string().optional().nullable(),
  governmentIdType: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  governmentIdExt: z.string().optional().nullable(),
  kycStatus: z.lazy(() => KycStatusSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutProfileInputSchema)
}).strict();
const ProfileUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  address: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  governmentId: z.string().optional().nullable(),
  governmentIdType: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  governmentIdExt: z.string().optional().nullable(),
  kycStatus: z.lazy(() => KycStatusSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const ProfileUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  country: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  state: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  city: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  postalCode: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NullableEnumGovernmentIdTypeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NullableEnumKycStatusFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutProfileNestedInputSchema).optional()
}).strict();
const ProfileUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  country: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  state: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  city: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  postalCode: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NullableEnumGovernmentIdTypeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NullableEnumKycStatusFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const ProfileCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  address: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  governmentId: z.string().optional().nullable(),
  governmentIdType: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  governmentIdExt: z.string().optional().nullable(),
  kycStatus: z.lazy(() => KycStatusSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const ProfileUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  country: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  state: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  city: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  postalCode: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NullableEnumGovernmentIdTypeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NullableEnumKycStatusFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const ProfileUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  country: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  state: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  city: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  postalCode: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NullableEnumGovernmentIdTypeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NullableEnumKycStatusFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const BusinessProfileCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  address: z.string().optional().nullable(),
  creationMonth: z.string().optional().nullable(),
  creationYear: z.number().int().optional().nullable(),
  proofOfAddress: z.string().optional().nullable(),
  proofOfAddressExt: z.string().optional().nullable(),
  certificate: z.string().optional().nullable(),
  certificateExt: z.string().optional().nullable(),
  approved: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  account: z.lazy(() => FinancialAccountCreateNestedOneWithoutBusinessProfileInputSchema)
}).strict();
const BusinessProfileUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  address: z.string().optional().nullable(),
  creationMonth: z.string().optional().nullable(),
  creationYear: z.number().int().optional().nullable(),
  proofOfAddress: z.string().optional().nullable(),
  proofOfAddressExt: z.string().optional().nullable(),
  certificate: z.string().optional().nullable(),
  certificateExt: z.string().optional().nullable(),
  approved: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const BusinessProfileUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationMonth: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationYear: z.union([z.number().int(), z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddressExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificate: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificateExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approved: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  account: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutBusinessProfileNestedInputSchema).optional()
}).strict();
const BusinessProfileUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationMonth: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationYear: z.union([z.number().int(), z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddressExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificate: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificateExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approved: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const BusinessProfileCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  address: z.string().optional().nullable(),
  creationMonth: z.string().optional().nullable(),
  creationYear: z.number().int().optional().nullable(),
  proofOfAddress: z.string().optional().nullable(),
  proofOfAddressExt: z.string().optional().nullable(),
  certificate: z.string().optional().nullable(),
  certificateExt: z.string().optional().nullable(),
  approved: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const BusinessProfileUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationMonth: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationYear: z.union([z.number().int(), z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddressExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificate: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificateExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approved: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const BusinessProfileUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationMonth: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationYear: z.union([z.number().int(), z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddressExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificate: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificateExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approved: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const FinancialAccountCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const FinancialAccountUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const FinancialAccountUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUserCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountMembershipsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutAccountUsersInputSchema),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutInitiatorInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  financialAccountId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutInitiatorInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountMembershipsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutInitiatorNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const AccountUserUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutInitiatorNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const AccountUserCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  financialAccountId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountUserUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUserUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedJointAccountRequestsInputSchema),
  recipient: z.lazy(() => UserCreateNestedOneWithoutReceivedJointAccountRequestsInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutJointAccountRequestsInputSchema)
}).strict();
const JointAccountRequestUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  recipientId: z.string().optional().nullable(),
  financialAccountId: z.string(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedJointAccountRequestsNestedInputSchema).optional(),
  recipient: z.lazy(() => UserUpdateOneWithoutReceivedJointAccountRequestsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutJointAccountRequestsNestedInputSchema).optional()
}).strict();
const JointAccountRequestUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipientId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  recipientId: z.string().optional().nullable(),
  financialAccountId: z.string(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipientId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedJointAccountModRequestsInputSchema),
  account: z.lazy(() => FinancialAccountCreateNestedOneWithoutJointAccountModRequestsInputSchema),
  transaction: z.lazy(() => TransactionCreateNestedOneWithoutJointAccountModRequestsInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  financialAccountId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  transactionId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedJointAccountModRequestsNestedInputSchema).optional(),
  account: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutJointAccountModRequestsNestedInputSchema).optional(),
  transaction: z.lazy(() => TransactionUpdateOneWithoutJointAccountModRequestsNestedInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  transactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  financialAccountId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  transactionId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  transactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  request: z.lazy(() => JointAccountModRequestCreateNestedOneWithoutApprovalsInputSchema),
  approver: z.lazy(() => UserCreateNestedOneWithoutApprovedJointAccountModRequestsInputSchema)
}).strict();
const JointAccountModRequestApprovalUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  jointAccountModRequestId: z.string(),
  approverId: z.string(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestApprovalUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  request: z.lazy(() => JointAccountModRequestUpdateOneRequiredWithoutApprovalsNestedInputSchema).optional(),
  approver: z.lazy(() => UserUpdateOneRequiredWithoutApprovedJointAccountModRequestsNestedInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequestId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  approverId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  jointAccountModRequestId: z.string(),
  approverId: z.string(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestApprovalUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequestId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  approverId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentPlanCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  minimumDeposit: z.number(),
  maximumDeposit: z.number(),
  duration: z.number().int(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  percentageTotalReturn: z.number(),
  percentagePeriodicReturn: z.number(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const InvestmentPlanUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  minimumDeposit: z.number(),
  maximumDeposit: z.number(),
  duration: z.number().int(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  percentageTotalReturn: z.number(),
  percentagePeriodicReturn: z.number(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const InvestmentPlanUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  minimumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  maximumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  percentageTotalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  percentagePeriodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentPlanUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  minimumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  maximumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  percentageTotalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  percentagePeriodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentPlanCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  minimumDeposit: z.number(),
  maximumDeposit: z.number(),
  duration: z.number().int(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  percentageTotalReturn: z.number(),
  percentagePeriodicReturn: z.number(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const InvestmentPlanUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  minimumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  maximumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  percentageTotalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  percentagePeriodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentPlanUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  minimumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  maximumDeposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  percentageTotalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  percentagePeriodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  investor: z.lazy(() => AccountUserCreateNestedOneWithoutInvestmentsInputSchema),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutInvestmentInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutInvestmentsInputSchema)
}).strict();
const InvestmentUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  investorId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutInvestmentInputSchema).optional()
}).strict();
const InvestmentUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  investor: z.lazy(() => AccountUserUpdateOneRequiredWithoutInvestmentsNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutInvestmentNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutInvestmentsNestedInputSchema).optional()
}).strict();
const InvestmentUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  investorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutInvestmentNestedInputSchema).optional()
}).strict();
const InvestmentCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  investorId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const InvestmentUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  investorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const TransactionCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  initiator: z.lazy(() => AccountUserCreateNestedOneWithoutTransactionsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutTransactionsInputSchema),
  recipientAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema).optional(),
  investment: z.lazy(() => InvestmentCreateNestedOneWithoutTransactionsInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionCreateNestedOneWithoutChildTransactionsInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  initiator: z.lazy(() => AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema).optional(),
  investment: z.lazy(() => InvestmentUpdateOneWithoutTransactionsNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionUpdateOneWithoutChildTransactionsNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const TransactionUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const TransactionUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const NotificationCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutNotificationsInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutNotificationsInputSchema).optional()
}).strict();
const NotificationUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  userId: z.string().optional().nullable(),
  financialAccountId: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const NotificationUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutNotificationsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneWithoutNotificationsNestedInputSchema).optional()
}).strict();
const NotificationUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  financialAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const NotificationCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  userId: z.string().optional().nullable(),
  financialAccountId: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const NotificationUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const NotificationUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  financialAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const CurrencyCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  symbol: z.string(),
  image: z.string().optional().nullable(),
  rate: z.number(),
  rateUpdatedAt: z.coerce.date().optional().nullable(),
  walletAddress: z.string().optional().nullable(),
  walletAddressNetwork: z.string().optional().nullable(),
  allowWithdrawal: z.boolean().optional(),
  withdrawalCharge: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const CurrencyUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  symbol: z.string(),
  image: z.string().optional().nullable(),
  rate: z.number(),
  rateUpdatedAt: z.coerce.date().optional().nullable(),
  walletAddress: z.string().optional().nullable(),
  walletAddressNetwork: z.string().optional().nullable(),
  allowWithdrawal: z.boolean().optional(),
  withdrawalCharge: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const CurrencyUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  symbol: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rateUpdatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  allowWithdrawal: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  withdrawalCharge: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const CurrencyUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  symbol: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rateUpdatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  allowWithdrawal: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  withdrawalCharge: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const CurrencyCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  symbol: z.string(),
  image: z.string().optional().nullable(),
  rate: z.number(),
  rateUpdatedAt: z.coerce.date().optional().nullable(),
  walletAddress: z.string().optional().nullable(),
  walletAddressNetwork: z.string().optional().nullable(),
  allowWithdrawal: z.boolean().optional(),
  withdrawalCharge: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const CurrencyUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  symbol: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rateUpdatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  allowWithdrawal: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  withdrawalCharge: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const CurrencyUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  symbol: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rateUpdatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  walletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  allowWithdrawal: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  withdrawalCharge: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SettingsCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  allowWithdrawals: z.boolean()
}).strict();
const SettingsUncheckedCreateInputSchema = z.object({
  id: z.string().uuid().optional(),
  allowWithdrawals: z.boolean()
}).strict();
const SettingsUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  allowWithdrawals: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SettingsUncheckedUpdateInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  allowWithdrawals: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SettingsCreateManyInputSchema = z.object({
  id: z.string().uuid().optional(),
  allowWithdrawals: z.boolean()
}).strict();
const SettingsUpdateManyMutationInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  allowWithdrawals: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SettingsUncheckedUpdateManyInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  allowWithdrawals: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const StringFilterSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
const BoolFilterSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolFilterSchema)]).optional()
}).strict();
const StringNullableFilterSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)]).optional().nullable()
}).strict();
const EnumUserRoleFilterSchema = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => NestedEnumUserRoleFilterSchema)]).optional()
}).strict();
const BoolNullableFilterSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)]).optional().nullable()
}).strict();
const DateTimeNullableFilterSchema = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)]).optional().nullable()
}).strict();
const DateTimeFilterSchema = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)]).optional()
}).strict();
const ProfileNullableScalarRelationFilterSchema = z.object({
  is: z.lazy(() => ProfileWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProfileWhereInputSchema).optional().nullable()
}).strict();
const SessionListRelationFilterSchema = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();
const AccountListRelationFilterSchema = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();
const FinancialAccountListRelationFilterSchema = z.object({
  every: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  some: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  none: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const AccountUserListRelationFilterSchema = z.object({
  every: z.lazy(() => AccountUserWhereInputSchema).optional(),
  some: z.lazy(() => AccountUserWhereInputSchema).optional(),
  none: z.lazy(() => AccountUserWhereInputSchema).optional()
}).strict();
const JointAccountRequestListRelationFilterSchema = z.object({
  every: z.lazy(() => JointAccountRequestWhereInputSchema).optional(),
  some: z.lazy(() => JointAccountRequestWhereInputSchema).optional(),
  none: z.lazy(() => JointAccountRequestWhereInputSchema).optional()
}).strict();
const JointAccountModRequestListRelationFilterSchema = z.object({
  every: z.lazy(() => JointAccountModRequestWhereInputSchema).optional(),
  some: z.lazy(() => JointAccountModRequestWhereInputSchema).optional(),
  none: z.lazy(() => JointAccountModRequestWhereInputSchema).optional()
}).strict();
const NotificationListRelationFilterSchema = z.object({
  every: z.lazy(() => NotificationWhereInputSchema).optional(),
  some: z.lazy(() => NotificationWhereInputSchema).optional(),
  none: z.lazy(() => NotificationWhereInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalListRelationFilterSchema = z.object({
  every: z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).optional(),
  some: z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).optional(),
  none: z.lazy(() => JointAccountModRequestApprovalWhereInputSchema).optional()
}).strict();
const SortOrderInputSchema = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();
const SessionOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const FinancialAccountOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountUserOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountRequestOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountModRequestOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const NotificationOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountModRequestApprovalOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const UserCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const UserMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const UserMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const StringWithAggregatesFilterSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();
const BoolWithAggregatesFilterSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();
const StringNullableWithAggregatesFilterSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();
const EnumUserRoleWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();
const BoolNullableWithAggregatesFilterSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();
const DateTimeNullableWithAggregatesFilterSchema = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();
const DateTimeWithAggregatesFilterSchema = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();
const UserScalarRelationFilterSchema = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const SessionCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const SessionMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const SessionMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const VerificationCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const VerificationMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const VerificationMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumGovernmentIdTypeNullableFilterSchema = z.object({
  equals: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  in: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NestedEnumGovernmentIdTypeNullableFilterSchema)]).optional().nullable()
}).strict();
const EnumKycStatusNullableFilterSchema = z.object({
  equals: z.lazy(() => KycStatusSchema).optional().nullable(),
  in: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NestedEnumKycStatusNullableFilterSchema)]).optional().nullable()
}).strict();
const ProfileCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  governmentId: z.lazy(() => SortOrderSchema).optional(),
  governmentIdType: z.lazy(() => SortOrderSchema).optional(),
  governmentIdExt: z.lazy(() => SortOrderSchema).optional(),
  kycStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const ProfileMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  governmentId: z.lazy(() => SortOrderSchema).optional(),
  governmentIdType: z.lazy(() => SortOrderSchema).optional(),
  governmentIdExt: z.lazy(() => SortOrderSchema).optional(),
  kycStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const ProfileMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  governmentId: z.lazy(() => SortOrderSchema).optional(),
  governmentIdType: z.lazy(() => SortOrderSchema).optional(),
  governmentIdExt: z.lazy(() => SortOrderSchema).optional(),
  kycStatus: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumGovernmentIdTypeNullableWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  in: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NestedEnumGovernmentIdTypeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumGovernmentIdTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumGovernmentIdTypeNullableFilterSchema).optional()
}).strict();
const EnumKycStatusNullableWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => KycStatusSchema).optional().nullable(),
  in: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NestedEnumKycStatusNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumKycStatusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumKycStatusNullableFilterSchema).optional()
}).strict();
const IntNullableFilterSchema = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)]).optional().nullable()
}).strict();
const FinancialAccountScalarRelationFilterSchema = z.object({
  is: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  isNot: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const BusinessProfileCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  creationMonth: z.lazy(() => SortOrderSchema).optional(),
  creationYear: z.lazy(() => SortOrderSchema).optional(),
  proofOfAddress: z.lazy(() => SortOrderSchema).optional(),
  proofOfAddressExt: z.lazy(() => SortOrderSchema).optional(),
  certificate: z.lazy(() => SortOrderSchema).optional(),
  certificateExt: z.lazy(() => SortOrderSchema).optional(),
  approved: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const BusinessProfileAvgOrderByAggregateInputSchema = z.object({
  creationYear: z.lazy(() => SortOrderSchema).optional()
}).strict();
const BusinessProfileMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  creationMonth: z.lazy(() => SortOrderSchema).optional(),
  creationYear: z.lazy(() => SortOrderSchema).optional(),
  proofOfAddress: z.lazy(() => SortOrderSchema).optional(),
  proofOfAddressExt: z.lazy(() => SortOrderSchema).optional(),
  certificate: z.lazy(() => SortOrderSchema).optional(),
  certificateExt: z.lazy(() => SortOrderSchema).optional(),
  approved: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const BusinessProfileMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  creationMonth: z.lazy(() => SortOrderSchema).optional(),
  creationYear: z.lazy(() => SortOrderSchema).optional(),
  proofOfAddress: z.lazy(() => SortOrderSchema).optional(),
  proofOfAddressExt: z.lazy(() => SortOrderSchema).optional(),
  certificate: z.lazy(() => SortOrderSchema).optional(),
  certificateExt: z.lazy(() => SortOrderSchema).optional(),
  approved: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const BusinessProfileSumOrderByAggregateInputSchema = z.object({
  creationYear: z.lazy(() => SortOrderSchema).optional()
}).strict();
const IntNullableWithAggregatesFilterSchema = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();
const EnumAccountStatusFilterSchema = z.object({
  equals: z.lazy(() => AccountStatusSchema).optional(),
  in: z.lazy(() => AccountStatusSchema).array().optional(),
  notIn: z.lazy(() => AccountStatusSchema).array().optional(),
  not: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => NestedEnumAccountStatusFilterSchema)]).optional()
}).strict();
const EnumAccountTypeFilterSchema = z.object({
  equals: z.lazy(() => AccountTypeSchema).optional(),
  in: z.lazy(() => AccountTypeSchema).array().optional(),
  notIn: z.lazy(() => AccountTypeSchema).array().optional(),
  not: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => NestedEnumAccountTypeFilterSchema)]).optional()
}).strict();
const EnumAccountOwnershipFilterSchema = z.object({
  equals: z.lazy(() => AccountOwnershipSchema).optional(),
  in: z.lazy(() => AccountOwnershipSchema).array().optional(),
  notIn: z.lazy(() => AccountOwnershipSchema).array().optional(),
  not: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => NestedEnumAccountOwnershipFilterSchema)]).optional()
}).strict();
const FloatFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedFloatFilterSchema)]).optional()
}).strict();
const IntFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
}).strict();
const BusinessProfileNullableScalarRelationFilterSchema = z.object({
  is: z.lazy(() => BusinessProfileWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => BusinessProfileWhereInputSchema).optional().nullable()
}).strict();
const TransactionListRelationFilterSchema = z.object({
  every: z.lazy(() => TransactionWhereInputSchema).optional(),
  some: z.lazy(() => TransactionWhereInputSchema).optional(),
  none: z.lazy(() => TransactionWhereInputSchema).optional()
}).strict();
const InvestmentListRelationFilterSchema = z.object({
  every: z.lazy(() => InvestmentWhereInputSchema).optional(),
  some: z.lazy(() => InvestmentWhereInputSchema).optional(),
  none: z.lazy(() => InvestmentWhereInputSchema).optional()
}).strict();
const TransactionOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentOrderByRelationAggregateInputSchema = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();
const FinancialAccountCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  totalTransactions: z.lazy(() => SortOrderSchema).optional(),
  totalInvestments: z.lazy(() => SortOrderSchema).optional(),
  firstTransactionAt: z.lazy(() => SortOrderSchema).optional(),
  lastTransactionAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  dormantAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const FinancialAccountAvgOrderByAggregateInputSchema = z.object({
  balance: z.lazy(() => SortOrderSchema).optional(),
  totalTransactions: z.lazy(() => SortOrderSchema).optional(),
  totalInvestments: z.lazy(() => SortOrderSchema).optional()
}).strict();
const FinancialAccountMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  totalTransactions: z.lazy(() => SortOrderSchema).optional(),
  totalInvestments: z.lazy(() => SortOrderSchema).optional(),
  firstTransactionAt: z.lazy(() => SortOrderSchema).optional(),
  lastTransactionAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  dormantAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const FinancialAccountMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  totalTransactions: z.lazy(() => SortOrderSchema).optional(),
  totalInvestments: z.lazy(() => SortOrderSchema).optional(),
  firstTransactionAt: z.lazy(() => SortOrderSchema).optional(),
  lastTransactionAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  dormantAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const FinancialAccountSumOrderByAggregateInputSchema = z.object({
  balance: z.lazy(() => SortOrderSchema).optional(),
  totalTransactions: z.lazy(() => SortOrderSchema).optional(),
  totalInvestments: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumAccountStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountStatusSchema).optional(),
  in: z.lazy(() => AccountStatusSchema).array().optional(),
  notIn: z.lazy(() => AccountStatusSchema).array().optional(),
  not: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => NestedEnumAccountStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountStatusFilterSchema).optional()
}).strict();
const EnumAccountTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountTypeSchema).optional(),
  in: z.lazy(() => AccountTypeSchema).array().optional(),
  notIn: z.lazy(() => AccountTypeSchema).array().optional(),
  not: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => NestedEnumAccountTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountTypeFilterSchema).optional()
}).strict();
const EnumAccountOwnershipWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountOwnershipSchema).optional(),
  in: z.lazy(() => AccountOwnershipSchema).array().optional(),
  notIn: z.lazy(() => AccountOwnershipSchema).array().optional(),
  not: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => NestedEnumAccountOwnershipWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountOwnershipFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountOwnershipFilterSchema).optional()
}).strict();
const FloatWithAggregatesFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();
const IntWithAggregatesFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();
const EnumAccountUserRoleFilterSchema = z.object({
  equals: z.lazy(() => AccountUserRoleSchema).optional(),
  in: z.lazy(() => AccountUserRoleSchema).array().optional(),
  notIn: z.lazy(() => AccountUserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => NestedEnumAccountUserRoleFilterSchema)]).optional()
}).strict();
const AccountUserUserIdFinancialAccountIdCompoundUniqueInputSchema = z.object({
  userId: z.string(),
  financialAccountId: z.string()
}).strict();
const AccountUserCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  autosign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountUserAvgOrderByAggregateInputSchema = z.object({
  ownership: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountUserMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  autosign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountUserMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  autosign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const AccountUserSumOrderByAggregateInputSchema = z.object({
  ownership: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumAccountUserRoleWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountUserRoleSchema).optional(),
  in: z.lazy(() => AccountUserRoleSchema).array().optional(),
  notIn: z.lazy(() => AccountUserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => NestedEnumAccountUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountUserRoleFilterSchema).optional()
}).strict();
const EnumJointAccountRequestStatusFilterSchema = z.object({
  equals: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  in: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  notIn: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => NestedEnumJointAccountRequestStatusFilterSchema)]).optional()
}).strict();
const UserNullableScalarRelationFilterSchema = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();
const JointAccountRequestCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  recipientName: z.lazy(() => SortOrderSchema).optional(),
  recipientEmail: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  recipientId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  lastReminderAt: z.lazy(() => SortOrderSchema).optional(),
  reminderCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountRequestAvgOrderByAggregateInputSchema = z.object({
  ownership: z.lazy(() => SortOrderSchema).optional(),
  reminderCount: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountRequestMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  recipientName: z.lazy(() => SortOrderSchema).optional(),
  recipientEmail: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  recipientId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  lastReminderAt: z.lazy(() => SortOrderSchema).optional(),
  reminderCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountRequestMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  recipientName: z.lazy(() => SortOrderSchema).optional(),
  recipientEmail: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  ownership: z.lazy(() => SortOrderSchema).optional(),
  recipientId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  lastReminderAt: z.lazy(() => SortOrderSchema).optional(),
  reminderCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountRequestSumOrderByAggregateInputSchema = z.object({
  ownership: z.lazy(() => SortOrderSchema).optional(),
  reminderCount: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumJointAccountRequestStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  in: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  notIn: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => NestedEnumJointAccountRequestStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumJointAccountRequestStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumJointAccountRequestStatusFilterSchema).optional()
}).strict();
const EnumJointAccountModRequestTypeFilterSchema = z.object({
  equals: z.lazy(() => JointAccountModRequestTypeSchema).optional(),
  in: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  notIn: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => NestedEnumJointAccountModRequestTypeFilterSchema)]).optional()
}).strict();
const TransactionNullableScalarRelationFilterSchema = z.object({
  is: z.lazy(() => TransactionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TransactionWhereInputSchema).optional().nullable()
}).strict();
const JointAccountModRequestCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  transactionId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountModRequestMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  transactionId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountModRequestMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  transactionId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumJointAccountModRequestTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => JointAccountModRequestTypeSchema).optional(),
  in: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  notIn: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => NestedEnumJointAccountModRequestTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumJointAccountModRequestTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumJointAccountModRequestTypeFilterSchema).optional()
}).strict();
const JointAccountModRequestScalarRelationFilterSchema = z.object({
  is: z.lazy(() => JointAccountModRequestWhereInputSchema).optional(),
  isNot: z.lazy(() => JointAccountModRequestWhereInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  jointAccountModRequestId: z.lazy(() => SortOrderSchema).optional(),
  approverId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountModRequestApprovalMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  jointAccountModRequestId: z.lazy(() => SortOrderSchema).optional(),
  approverId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const JointAccountModRequestApprovalMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  jointAccountModRequestId: z.lazy(() => SortOrderSchema).optional(),
  approverId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumInvestmentPlanCategoryFilterSchema = z.object({
  equals: z.lazy(() => InvestmentPlanCategorySchema).optional(),
  in: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  notIn: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => NestedEnumInvestmentPlanCategoryFilterSchema)]).optional()
}).strict();
const EnumProfitDistributionFilterSchema = z.object({
  equals: z.lazy(() => ProfitDistributionSchema).optional(),
  in: z.lazy(() => ProfitDistributionSchema).array().optional(),
  notIn: z.lazy(() => ProfitDistributionSchema).array().optional(),
  not: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => NestedEnumProfitDistributionFilterSchema)]).optional()
}).strict();
const InvestmentPlanCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  minimumDeposit: z.lazy(() => SortOrderSchema).optional(),
  maximumDeposit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  percentageTotalReturn: z.lazy(() => SortOrderSchema).optional(),
  percentagePeriodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentPlanAvgOrderByAggregateInputSchema = z.object({
  minimumDeposit: z.lazy(() => SortOrderSchema).optional(),
  maximumDeposit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  percentageTotalReturn: z.lazy(() => SortOrderSchema).optional(),
  percentagePeriodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentPlanMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  minimumDeposit: z.lazy(() => SortOrderSchema).optional(),
  maximumDeposit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  percentageTotalReturn: z.lazy(() => SortOrderSchema).optional(),
  percentagePeriodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentPlanMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  minimumDeposit: z.lazy(() => SortOrderSchema).optional(),
  maximumDeposit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  percentageTotalReturn: z.lazy(() => SortOrderSchema).optional(),
  percentagePeriodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentPlanSumOrderByAggregateInputSchema = z.object({
  minimumDeposit: z.lazy(() => SortOrderSchema).optional(),
  maximumDeposit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  percentageTotalReturn: z.lazy(() => SortOrderSchema).optional(),
  percentagePeriodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumInvestmentPlanCategoryWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => InvestmentPlanCategorySchema).optional(),
  in: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  notIn: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => NestedEnumInvestmentPlanCategoryWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvestmentPlanCategoryFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvestmentPlanCategoryFilterSchema).optional()
}).strict();
const EnumProfitDistributionWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => ProfitDistributionSchema).optional(),
  in: z.lazy(() => ProfitDistributionSchema).array().optional(),
  notIn: z.lazy(() => ProfitDistributionSchema).array().optional(),
  not: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => NestedEnumProfitDistributionWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProfitDistributionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProfitDistributionFilterSchema).optional()
}).strict();
const EnumInvestmentStatusFilterSchema = z.object({
  equals: z.lazy(() => InvestmentStatusSchema).optional(),
  in: z.lazy(() => InvestmentStatusSchema).array().optional(),
  notIn: z.lazy(() => InvestmentStatusSchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => NestedEnumInvestmentStatusFilterSchema)]).optional()
}).strict();
const AccountUserScalarRelationFilterSchema = z.object({
  is: z.lazy(() => AccountUserWhereInputSchema).optional(),
  isNot: z.lazy(() => AccountUserWhereInputSchema).optional()
}).strict();
const InvestmentCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  investorId: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  investmentName: z.lazy(() => SortOrderSchema).optional(),
  totalProfit: z.lazy(() => SortOrderSchema).optional(),
  profitCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  pausedAt: z.lazy(() => SortOrderSchema).optional(),
  pausedReason: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  closedReason: z.lazy(() => SortOrderSchema).optional(),
  terminatedAt: z.lazy(() => SortOrderSchema).optional(),
  terminatedReason: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  daysCompleted: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  totalReturn: z.lazy(() => SortOrderSchema).optional(),
  periodicReturn: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentAvgOrderByAggregateInputSchema = z.object({
  deposit: z.lazy(() => SortOrderSchema).optional(),
  totalProfit: z.lazy(() => SortOrderSchema).optional(),
  profitCount: z.lazy(() => SortOrderSchema).optional(),
  daysCompleted: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  totalReturn: z.lazy(() => SortOrderSchema).optional(),
  periodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  investorId: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  investmentName: z.lazy(() => SortOrderSchema).optional(),
  totalProfit: z.lazy(() => SortOrderSchema).optional(),
  profitCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  pausedAt: z.lazy(() => SortOrderSchema).optional(),
  pausedReason: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  closedReason: z.lazy(() => SortOrderSchema).optional(),
  terminatedAt: z.lazy(() => SortOrderSchema).optional(),
  terminatedReason: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  daysCompleted: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  totalReturn: z.lazy(() => SortOrderSchema).optional(),
  periodicReturn: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  investorId: z.lazy(() => SortOrderSchema).optional(),
  deposit: z.lazy(() => SortOrderSchema).optional(),
  investmentName: z.lazy(() => SortOrderSchema).optional(),
  totalProfit: z.lazy(() => SortOrderSchema).optional(),
  profitCount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  pausedAt: z.lazy(() => SortOrderSchema).optional(),
  pausedReason: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  closedReason: z.lazy(() => SortOrderSchema).optional(),
  terminatedAt: z.lazy(() => SortOrderSchema).optional(),
  terminatedReason: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  daysCompleted: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  totalReturn: z.lazy(() => SortOrderSchema).optional(),
  periodicReturn: z.lazy(() => SortOrderSchema).optional(),
  profitDistribution: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const InvestmentSumOrderByAggregateInputSchema = z.object({
  deposit: z.lazy(() => SortOrderSchema).optional(),
  totalProfit: z.lazy(() => SortOrderSchema).optional(),
  profitCount: z.lazy(() => SortOrderSchema).optional(),
  daysCompleted: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  totalReturn: z.lazy(() => SortOrderSchema).optional(),
  periodicReturn: z.lazy(() => SortOrderSchema).optional(),
  terminationFee: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumInvestmentStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => InvestmentStatusSchema).optional(),
  in: z.lazy(() => InvestmentStatusSchema).array().optional(),
  notIn: z.lazy(() => InvestmentStatusSchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => NestedEnumInvestmentStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvestmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvestmentStatusFilterSchema).optional()
}).strict();
const EnumTransactionTypeFilterSchema = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => NestedEnumTransactionTypeFilterSchema)]).optional()
}).strict();
const EnumTransactionStatusFilterSchema = z.object({
  equals: z.lazy(() => TransactionStatusSchema).optional(),
  in: z.lazy(() => TransactionStatusSchema).array().optional(),
  notIn: z.lazy(() => TransactionStatusSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => NestedEnumTransactionStatusFilterSchema)]).optional()
}).strict();
const FinancialAccountNullableScalarRelationFilterSchema = z.object({
  is: z.lazy(() => FinancialAccountWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => FinancialAccountWhereInputSchema).optional().nullable()
}).strict();
const InvestmentNullableScalarRelationFilterSchema = z.object({
  is: z.lazy(() => InvestmentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => InvestmentWhereInputSchema).optional().nullable()
}).strict();
const TransactionCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  USDAmount: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  charges: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  initiatorAccountId: z.lazy(() => SortOrderSchema).optional(),
  recipientAccountId: z.lazy(() => SortOrderSchema).optional(),
  investmentId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  parentTransactionId: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  failedAt: z.lazy(() => SortOrderSchema).optional(),
  failReason: z.lazy(() => SortOrderSchema).optional(),
  depositWalletAddress: z.lazy(() => SortOrderSchema).optional(),
  depositWalletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  withdrawalWalletAddress: z.lazy(() => SortOrderSchema).optional(),
  withdrawalWalletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  bank: z.lazy(() => SortOrderSchema).optional(),
  bankAccount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const TransactionAvgOrderByAggregateInputSchema = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  USDAmount: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  charges: z.lazy(() => SortOrderSchema).optional()
}).strict();
const TransactionMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  USDAmount: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  charges: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  initiatorAccountId: z.lazy(() => SortOrderSchema).optional(),
  recipientAccountId: z.lazy(() => SortOrderSchema).optional(),
  investmentId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  parentTransactionId: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  failedAt: z.lazy(() => SortOrderSchema).optional(),
  failReason: z.lazy(() => SortOrderSchema).optional(),
  depositWalletAddress: z.lazy(() => SortOrderSchema).optional(),
  depositWalletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  withdrawalWalletAddress: z.lazy(() => SortOrderSchema).optional(),
  withdrawalWalletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  bank: z.lazy(() => SortOrderSchema).optional(),
  bankAccount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const TransactionMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  USDAmount: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  charges: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  initiatorAccountId: z.lazy(() => SortOrderSchema).optional(),
  recipientAccountId: z.lazy(() => SortOrderSchema).optional(),
  investmentId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  parentTransactionId: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  failedAt: z.lazy(() => SortOrderSchema).optional(),
  failReason: z.lazy(() => SortOrderSchema).optional(),
  depositWalletAddress: z.lazy(() => SortOrderSchema).optional(),
  depositWalletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  withdrawalWalletAddress: z.lazy(() => SortOrderSchema).optional(),
  withdrawalWalletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  bank: z.lazy(() => SortOrderSchema).optional(),
  bankAccount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const TransactionSumOrderByAggregateInputSchema = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  USDAmount: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  charges: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumTransactionTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => NestedEnumTransactionTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional()
}).strict();
const EnumTransactionStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => TransactionStatusSchema).optional(),
  in: z.lazy(() => TransactionStatusSchema).array().optional(),
  notIn: z.lazy(() => TransactionStatusSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => NestedEnumTransactionStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransactionStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransactionStatusFilterSchema).optional()
}).strict();
const EnumNotificationBodyTypeFilterSchema = z.object({
  equals: z.lazy(() => NotificationBodyTypeSchema).optional(),
  in: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  not: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => NestedEnumNotificationBodyTypeFilterSchema)]).optional()
}).strict();
const NotificationCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  link: z.lazy(() => SortOrderSchema).optional(),
  isRead: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const NotificationMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  link: z.lazy(() => SortOrderSchema).optional(),
  isRead: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const NotificationMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  body: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  financialAccountId: z.lazy(() => SortOrderSchema).optional(),
  link: z.lazy(() => SortOrderSchema).optional(),
  isRead: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const EnumNotificationBodyTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => NotificationBodyTypeSchema).optional(),
  in: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  not: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => NestedEnumNotificationBodyTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNotificationBodyTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNotificationBodyTypeFilterSchema).optional()
}).strict();
const CurrencyCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  rateUpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  walletAddress: z.lazy(() => SortOrderSchema).optional(),
  walletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawal: z.lazy(() => SortOrderSchema).optional(),
  withdrawalCharge: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const CurrencyAvgOrderByAggregateInputSchema = z.object({
  rate: z.lazy(() => SortOrderSchema).optional(),
  withdrawalCharge: z.lazy(() => SortOrderSchema).optional()
}).strict();
const CurrencyMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  rateUpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  walletAddress: z.lazy(() => SortOrderSchema).optional(),
  walletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawal: z.lazy(() => SortOrderSchema).optional(),
  withdrawalCharge: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const CurrencyMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  rate: z.lazy(() => SortOrderSchema).optional(),
  rateUpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  walletAddress: z.lazy(() => SortOrderSchema).optional(),
  walletAddressNetwork: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawal: z.lazy(() => SortOrderSchema).optional(),
  withdrawalCharge: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();
const CurrencySumOrderByAggregateInputSchema = z.object({
  rate: z.lazy(() => SortOrderSchema).optional(),
  withdrawalCharge: z.lazy(() => SortOrderSchema).optional()
}).strict();
const SettingsCountOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawals: z.lazy(() => SortOrderSchema).optional()
}).strict();
const SettingsMaxOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawals: z.lazy(() => SortOrderSchema).optional()
}).strict();
const SettingsMinOrderByAggregateInputSchema = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  allowWithdrawals: z.lazy(() => SortOrderSchema).optional()
}).strict();
const ProfileCreateNestedOneWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => ProfileCreateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedCreateWithoutUserInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();
const SessionCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputSchema), z.lazy(() => SessionCreateWithoutUserInputSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional()
}).strict();
const AccountCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputSchema), z.lazy(() => AccountCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional()
}).strict();
const FinancialAccountCreateNestedManyWithoutCreatorInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema).array(), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => FinancialAccountCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional()
}).strict();
const AccountUserCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutUserInputSchema), z.lazy(() => AccountUserCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountRequestCreateNestedManyWithoutCreatorInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountRequestCreateNestedManyWithoutRecipientInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyRecipientInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const NotificationCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutUserInputSchema), z.lazy(() => NotificationCreateWithoutUserInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyApproverInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional()
}).strict();
const ProfileUncheckedCreateNestedOneWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => ProfileCreateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedCreateWithoutUserInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();
const SessionUncheckedCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputSchema), z.lazy(() => SessionCreateWithoutUserInputSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional()
}).strict();
const AccountUncheckedCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputSchema), z.lazy(() => AccountCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional()
}).strict();
const FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema).array(), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => FinancialAccountCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional()
}).strict();
const AccountUserUncheckedCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutUserInputSchema), z.lazy(() => AccountUserCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyRecipientInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const NotificationUncheckedCreateNestedManyWithoutUserInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutUserInputSchema), z.lazy(() => NotificationCreateWithoutUserInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyApproverInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional()
}).strict();
const StringFieldUpdateOperationsInputSchema = z.object({
  set: z.string().optional()
}).strict();
const BoolFieldUpdateOperationsInputSchema = z.object({
  set: z.boolean().optional()
}).strict();
const NullableStringFieldUpdateOperationsInputSchema = z.object({
  set: z.string().optional().nullable()
}).strict();
const EnumUserRoleFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => UserRoleSchema).optional()
}).strict();
const NullableBoolFieldUpdateOperationsInputSchema = z.object({
  set: z.boolean().optional().nullable()
}).strict();
const NullableDateTimeFieldUpdateOperationsInputSchema = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();
const DateTimeFieldUpdateOperationsInputSchema = z.object({
  set: z.coerce.date().optional()
}).strict();
const ProfileUpdateOneWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => ProfileCreateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedCreateWithoutUserInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => ProfileWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => ProfileWhereInputSchema)]).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => ProfileUpdateToOneWithWhereWithoutUserInputSchema), z.lazy(() => ProfileUpdateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedUpdateWithoutUserInputSchema)]).optional()
}).strict();
const SessionUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputSchema), z.lazy(() => SessionCreateWithoutUserInputSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => SessionScalarWhereInputSchema), z.lazy(() => SessionScalarWhereInputSchema).array()]).optional()
}).strict();
const AccountUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputSchema), z.lazy(() => AccountCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountScalarWhereInputSchema), z.lazy(() => AccountScalarWhereInputSchema).array()]).optional()
}).strict();
const FinancialAccountUpdateManyWithoutCreatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema).array(), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => FinancialAccountUpsertWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUpsertWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => FinancialAccountCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUpdateWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => FinancialAccountUpdateManyWithWhereWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUpdateManyWithWhereWithoutCreatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => FinancialAccountScalarWhereInputSchema), z.lazy(() => FinancialAccountScalarWhereInputSchema).array()]).optional()
}).strict();
const AccountUserUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutUserInputSchema), z.lazy(() => AccountUserCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUserUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => AccountUserUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountUserScalarWhereInputSchema), z.lazy(() => AccountUserScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutCreatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutRecipientInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyRecipientInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutRecipientInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutRecipientInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutCreatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const NotificationUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutUserInputSchema), z.lazy(() => NotificationCreateWithoutUserInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => NotificationScalarWhereInputSchema), z.lazy(() => NotificationScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutApproverInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyApproverInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutApproverInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutApproverInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema).array()]).optional()
}).strict();
const ProfileUncheckedUpdateOneWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => ProfileCreateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedCreateWithoutUserInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => ProfileWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => ProfileWhereInputSchema)]).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => ProfileUpdateToOneWithWhereWithoutUserInputSchema), z.lazy(() => ProfileUpdateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedUpdateWithoutUserInputSchema)]).optional()
}).strict();
const SessionUncheckedUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputSchema), z.lazy(() => SessionCreateWithoutUserInputSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputSchema), z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => SessionScalarWhereInputSchema), z.lazy(() => SessionScalarWhereInputSchema).array()]).optional()
}).strict();
const AccountUncheckedUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputSchema), z.lazy(() => AccountCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputSchema), z.lazy(() => AccountWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountScalarWhereInputSchema), z.lazy(() => AccountScalarWhereInputSchema).array()]).optional()
}).strict();
const FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema).array(), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => FinancialAccountCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => FinancialAccountUpsertWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUpsertWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => FinancialAccountCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => FinancialAccountWhereUniqueInputSchema), z.lazy(() => FinancialAccountWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUpdateWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => FinancialAccountUpdateManyWithWhereWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUpdateManyWithWhereWithoutCreatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => FinancialAccountScalarWhereInputSchema), z.lazy(() => FinancialAccountScalarWhereInputSchema).array()]).optional()
}).strict();
const AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutUserInputSchema), z.lazy(() => AccountUserCreateWithoutUserInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUserUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => AccountUserUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountUserScalarWhereInputSchema), z.lazy(() => AccountUserScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutCreatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutRecipientInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutRecipientInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyRecipientInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutRecipientInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutRecipientInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutCreatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutCreatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const NotificationUncheckedUpdateManyWithoutUserNestedInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutUserInputSchema), z.lazy(() => NotificationCreateWithoutUserInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema), z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema), z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema), z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => NotificationScalarWhereInputSchema), z.lazy(() => NotificationScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutApproverInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyApproverInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutApproverInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutApproverInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema).array()]).optional()
}).strict();
const UserCreateNestedOneWithoutSessionsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const UserUpdateOneRequiredWithoutSessionsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema), z.lazy(() => UserUpdateWithoutSessionsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)]).optional()
}).strict();
const UserCreateNestedOneWithoutAccountsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const UserUpdateOneRequiredWithoutAccountsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema), z.lazy(() => UserUpdateWithoutAccountsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema)]).optional()
}).strict();
const UserCreateNestedOneWithoutProfileInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutProfileInputSchema), z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const NullableEnumGovernmentIdTypeFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => GovernmentIdTypeSchema).optional().nullable()
}).strict();
const NullableEnumKycStatusFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => KycStatusSchema).optional().nullable()
}).strict();
const UserUpdateOneRequiredWithoutProfileNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutProfileInputSchema), z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutProfileInputSchema), z.lazy(() => UserUpdateWithoutProfileInputSchema), z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema)]).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutBusinessProfileInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutBusinessProfileInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutBusinessProfileInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const NullableIntFieldUpdateOperationsInputSchema = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();
const FinancialAccountUpdateOneRequiredWithoutBusinessProfileNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutBusinessProfileInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutBusinessProfileInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutBusinessProfileInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUpdateWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutBusinessProfileInputSchema)]).optional()
}).strict();
const UserCreateNestedOneWithoutCreatedAccountsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutCreatedAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedAccountsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const BusinessProfileCreateNestedOneWithoutAccountInputSchema = z.object({
  create: z.union([z.lazy(() => BusinessProfileCreateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedCreateWithoutAccountInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => BusinessProfileCreateOrConnectWithoutAccountInputSchema).optional(),
  connect: z.lazy(() => BusinessProfileWhereUniqueInputSchema).optional()
}).strict();
const AccountUserCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestCreateNestedManyWithoutAccountInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const NotificationCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional()
}).strict();
const TransactionCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const TransactionCreateNestedManyWithoutRecipientAccountInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyRecipientAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const InvestmentCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional()
}).strict();
const BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema = z.object({
  create: z.union([z.lazy(() => BusinessProfileCreateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedCreateWithoutAccountInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => BusinessProfileCreateOrConnectWithoutAccountInputSchema).optional(),
  connect: z.lazy(() => BusinessProfileWhereUniqueInputSchema).optional()
}).strict();
const AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyRecipientAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional()
}).strict();
const EnumAccountStatusFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => AccountStatusSchema).optional()
}).strict();
const EnumAccountTypeFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => AccountTypeSchema).optional()
}).strict();
const EnumAccountOwnershipFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => AccountOwnershipSchema).optional()
}).strict();
const FloatFieldUpdateOperationsInputSchema = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();
const IntFieldUpdateOperationsInputSchema = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();
const UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutCreatedAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedAccountsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedAccountsInputSchema), z.lazy(() => UserUpdateWithoutCreatedAccountsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedAccountsInputSchema)]).optional()
}).strict();
const BusinessProfileUpdateOneWithoutAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => BusinessProfileCreateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedCreateWithoutAccountInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => BusinessProfileCreateOrConnectWithoutAccountInputSchema).optional(),
  upsert: z.lazy(() => BusinessProfileUpsertWithoutAccountInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => BusinessProfileWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => BusinessProfileWhereInputSchema)]).optional(),
  connect: z.lazy(() => BusinessProfileWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => BusinessProfileUpdateToOneWithWhereWithoutAccountInputSchema), z.lazy(() => BusinessProfileUpdateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedUpdateWithoutAccountInputSchema)]).optional()
}).strict();
const AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUserUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountUserScalarWhereInputSchema), z.lazy(() => AccountUserScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const NotificationUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => NotificationUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => NotificationUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => NotificationUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => NotificationScalarWhereInputSchema), z.lazy(() => NotificationScalarWhereInputSchema).array()]).optional()
}).strict();
const TransactionUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const TransactionUpdateManyWithoutRecipientAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutRecipientAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyRecipientAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutRecipientAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutRecipientAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvestmentUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvestmentScalarWhereInputSchema), z.lazy(() => InvestmentScalarWhereInputSchema).array()]).optional()
}).strict();
const BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => BusinessProfileCreateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedCreateWithoutAccountInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => BusinessProfileCreateOrConnectWithoutAccountInputSchema).optional(),
  upsert: z.lazy(() => BusinessProfileUpsertWithoutAccountInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => BusinessProfileWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => BusinessProfileWhereInputSchema)]).optional(),
  connect: z.lazy(() => BusinessProfileWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => BusinessProfileUpdateToOneWithWhereWithoutAccountInputSchema), z.lazy(() => BusinessProfileUpdateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedUpdateWithoutAccountInputSchema)]).optional()
}).strict();
const AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => AccountUserCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountUserWhereUniqueInputSchema), z.lazy(() => AccountUserWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUserUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountUserScalarWhereInputSchema), z.lazy(() => AccountUserScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountRequestCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountRequestWhereUniqueInputSchema), z.lazy(() => JointAccountRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => NotificationCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => NotificationUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => NotificationCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => NotificationWhereUniqueInputSchema), z.lazy(() => NotificationWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => NotificationUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => NotificationUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => NotificationScalarWhereInputSchema), z.lazy(() => NotificationScalarWhereInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutRecipientAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutRecipientAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyRecipientAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutRecipientAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutRecipientAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutFinancialAccountInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyFinancialAccountInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvestmentUpdateManyWithWhereWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUpdateManyWithWhereWithoutFinancialAccountInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvestmentScalarWhereInputSchema), z.lazy(() => InvestmentScalarWhereInputSchema).array()]).optional()
}).strict();
const UserCreateNestedOneWithoutAccountMembershipsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountMembershipsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountMembershipsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountMembershipsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutAccountUsersInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutAccountUsersInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutAccountUsersInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const TransactionCreateNestedManyWithoutInitiatorInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateWithoutInitiatorInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInitiatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const InvestmentCreateNestedManyWithoutInvestorInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateWithoutInvestorInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyInvestorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedCreateNestedManyWithoutInitiatorInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateWithoutInitiatorInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInitiatorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const InvestmentUncheckedCreateNestedManyWithoutInvestorInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateWithoutInvestorInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyInvestorInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional()
}).strict();
const EnumAccountUserRoleFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => AccountUserRoleSchema).optional()
}).strict();
const UserUpdateOneRequiredWithoutAccountMembershipsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountMembershipsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountMembershipsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountMembershipsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountMembershipsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutAccountMembershipsInputSchema), z.lazy(() => UserUpdateWithoutAccountMembershipsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountMembershipsInputSchema)]).optional()
}).strict();
const FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutAccountUsersInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutAccountUsersInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutAccountUsersInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUpdateWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutAccountUsersInputSchema)]).optional()
}).strict();
const TransactionUpdateManyWithoutInitiatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateWithoutInitiatorInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInitiatorInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInitiatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInitiatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInitiatorInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInitiatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutInitiatorInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutInitiatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const InvestmentUpdateManyWithoutInvestorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateWithoutInvestorInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutInvestorInputSchema), z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutInvestorInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyInvestorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutInvestorInputSchema), z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutInvestorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvestmentUpdateManyWithWhereWithoutInvestorInputSchema), z.lazy(() => InvestmentUpdateManyWithWhereWithoutInvestorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvestmentScalarWhereInputSchema), z.lazy(() => InvestmentScalarWhereInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutInitiatorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateWithoutInitiatorInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInitiatorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInitiatorInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInitiatorInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInitiatorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInitiatorInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInitiatorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutInitiatorInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutInitiatorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const InvestmentUncheckedUpdateManyWithoutInvestorNestedInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateWithoutInvestorInputSchema).array(), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema), z.lazy(() => InvestmentCreateOrConnectWithoutInvestorInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutInvestorInputSchema), z.lazy(() => InvestmentUpsertWithWhereUniqueWithoutInvestorInputSchema).array()]).optional(),
  createMany: z.lazy(() => InvestmentCreateManyInvestorInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvestmentWhereUniqueInputSchema), z.lazy(() => InvestmentWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutInvestorInputSchema), z.lazy(() => InvestmentUpdateWithWhereUniqueWithoutInvestorInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvestmentUpdateManyWithWhereWithoutInvestorInputSchema), z.lazy(() => InvestmentUpdateManyWithWhereWithoutInvestorInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvestmentScalarWhereInputSchema), z.lazy(() => InvestmentScalarWhereInputSchema).array()]).optional()
}).strict();
const UserCreateNestedOneWithoutCreatedJointAccountRequestsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedJointAccountRequestsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const UserCreateNestedOneWithoutReceivedJointAccountRequestsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutReceivedJointAccountRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReceivedJointAccountRequestsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutJointAccountRequestsInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutJointAccountRequestsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => JointAccountRequestStatusSchema).optional()
}).strict();
const UserUpdateOneRequiredWithoutCreatedJointAccountRequestsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedJointAccountRequestsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedJointAccountRequestsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUpdateWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedJointAccountRequestsInputSchema)]).optional()
}).strict();
const UserUpdateOneWithoutReceivedJointAccountRequestsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutReceivedJointAccountRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReceivedJointAccountRequestsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutReceivedJointAccountRequestsInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => UserWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => UserWhereInputSchema)]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUpdateWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutReceivedJointAccountRequestsInputSchema)]).optional()
}).strict();
const FinancialAccountUpdateOneRequiredWithoutJointAccountRequestsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutJointAccountRequestsInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutJointAccountRequestsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUpdateWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutJointAccountRequestsInputSchema)]).optional()
}).strict();
const UserCreateNestedOneWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedJointAccountModRequestsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutJointAccountModRequestsInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutJointAccountModRequestsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const TransactionCreateNestedOneWithoutJointAccountModRequestsInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => TransactionCreateOrConnectWithoutJointAccountModRequestsInputSchema).optional(),
  connect: z.lazy(() => TransactionWhereUniqueInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalCreateNestedManyWithoutRequestInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyRequestInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutRequestInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyRequestInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional()
}).strict();
const EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => JointAccountModRequestTypeSchema).optional()
}).strict();
const UserUpdateOneRequiredWithoutCreatedJointAccountModRequestsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedJointAccountModRequestsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedJointAccountModRequestsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUpdateWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedJointAccountModRequestsInputSchema)]).optional()
}).strict();
const FinancialAccountUpdateOneRequiredWithoutJointAccountModRequestsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutJointAccountModRequestsInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutJointAccountModRequestsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUpdateWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutJointAccountModRequestsInputSchema)]).optional()
}).strict();
const TransactionUpdateOneWithoutJointAccountModRequestsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => TransactionCreateOrConnectWithoutJointAccountModRequestsInputSchema).optional(),
  upsert: z.lazy(() => TransactionUpsertWithoutJointAccountModRequestsInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => TransactionWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => TransactionWhereInputSchema)]).optional(),
  connect: z.lazy(() => TransactionWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => TransactionUpdateToOneWithWhereWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUpdateWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutJointAccountModRequestsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalUpdateManyWithoutRequestNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutRequestInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyRequestInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutRequestInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutRequestInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateManyWithoutRequestNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema).array(), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutRequestInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestApprovalCreateManyRequestInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutRequestInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUpdateManyWithWhereWithoutRequestInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestCreateNestedOneWithoutApprovalsInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutApprovalsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => JointAccountModRequestCreateOrConnectWithoutApprovalsInputSchema).optional(),
  connect: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).optional()
}).strict();
const UserCreateNestedOneWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutApprovedJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutApprovedJointAccountModRequestsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const JointAccountModRequestUpdateOneRequiredWithoutApprovalsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutApprovalsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => JointAccountModRequestCreateOrConnectWithoutApprovalsInputSchema).optional(),
  upsert: z.lazy(() => JointAccountModRequestUpsertWithoutApprovalsInputSchema).optional(),
  connect: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateToOneWithWhereWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUpdateWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutApprovalsInputSchema)]).optional()
}).strict();
const UserUpdateOneRequiredWithoutApprovedJointAccountModRequestsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutApprovedJointAccountModRequestsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutApprovedJointAccountModRequestsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutApprovedJointAccountModRequestsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUpdateWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutApprovedJointAccountModRequestsInputSchema)]).optional()
}).strict();
const EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => InvestmentPlanCategorySchema).optional()
}).strict();
const EnumProfitDistributionFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => ProfitDistributionSchema).optional()
}).strict();
const AccountUserCreateNestedOneWithoutInvestmentsInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutInvestmentsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => AccountUserCreateOrConnectWithoutInvestmentsInputSchema).optional(),
  connect: z.lazy(() => AccountUserWhereUniqueInputSchema).optional()
}).strict();
const TransactionCreateNestedManyWithoutInvestmentInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateWithoutInvestmentInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInvestmentInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutInvestmentsInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutInvestmentsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutInvestmentsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const TransactionUncheckedCreateNestedManyWithoutInvestmentInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateWithoutInvestmentInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInvestmentInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const EnumInvestmentStatusFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => InvestmentStatusSchema).optional()
}).strict();
const AccountUserUpdateOneRequiredWithoutInvestmentsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutInvestmentsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => AccountUserCreateOrConnectWithoutInvestmentsInputSchema).optional(),
  upsert: z.lazy(() => AccountUserUpsertWithoutInvestmentsInputSchema).optional(),
  connect: z.lazy(() => AccountUserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => AccountUserUpdateToOneWithWhereWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUpdateWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutInvestmentsInputSchema)]).optional()
}).strict();
const TransactionUpdateManyWithoutInvestmentNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateWithoutInvestmentInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInvestmentInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInvestmentInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInvestmentInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInvestmentInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInvestmentInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutInvestmentInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutInvestmentInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const FinancialAccountUpdateOneRequiredWithoutInvestmentsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutInvestmentsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutInvestmentsInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutInvestmentsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUpdateWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutInvestmentsInputSchema)]).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutInvestmentNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateWithoutInvestmentInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutInvestmentInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInvestmentInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutInvestmentInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyInvestmentInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInvestmentInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutInvestmentInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutInvestmentInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutInvestmentInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const AccountUserCreateNestedOneWithoutTransactionsInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutTransactionsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => AccountUserCreateOrConnectWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => AccountUserWhereUniqueInputSchema).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutTransactionsInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutReceivedTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutReceivedTransactionsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const InvestmentCreateNestedOneWithoutTransactionsInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutTransactionsInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => InvestmentCreateOrConnectWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => InvestmentWhereUniqueInputSchema).optional()
}).strict();
const JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyTransactionInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const TransactionCreateNestedOneWithoutChildTransactionsInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutChildTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => TransactionCreateOrConnectWithoutChildTransactionsInputSchema).optional(),
  connect: z.lazy(() => TransactionWhereUniqueInputSchema).optional()
}).strict();
const TransactionCreateNestedManyWithoutParentTransactionInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyParentTransactionInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyTransactionInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyParentTransactionInputEnvelopeSchema).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional()
}).strict();
const EnumTransactionTypeFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => TransactionTypeSchema).optional()
}).strict();
const EnumTransactionStatusFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => TransactionStatusSchema).optional()
}).strict();
const AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => AccountUserCreateWithoutTransactionsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => AccountUserCreateOrConnectWithoutTransactionsInputSchema).optional(),
  upsert: z.lazy(() => AccountUserUpsertWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => AccountUserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => AccountUserUpdateToOneWithWhereWithoutTransactionsInputSchema), z.lazy(() => AccountUserUpdateWithoutTransactionsInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutTransactionsInputSchema)]).optional()
}).strict();
const FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutTransactionsInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUpdateWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutTransactionsInputSchema)]).optional()
}).strict();
const FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutReceivedTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutReceivedTransactionsInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutReceivedTransactionsInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUpdateWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutReceivedTransactionsInputSchema)]).optional()
}).strict();
const InvestmentUpdateOneWithoutTransactionsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => InvestmentCreateWithoutTransactionsInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => InvestmentCreateOrConnectWithoutTransactionsInputSchema).optional(),
  upsert: z.lazy(() => InvestmentUpsertWithoutTransactionsInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => InvestmentWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => InvestmentWhereInputSchema)]).optional(),
  connect: z.lazy(() => InvestmentWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => InvestmentUpdateToOneWithWhereWithoutTransactionsInputSchema), z.lazy(() => InvestmentUpdateWithoutTransactionsInputSchema), z.lazy(() => InvestmentUncheckedUpdateWithoutTransactionsInputSchema)]).optional()
}).strict();
const JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyTransactionInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutTransactionInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutTransactionInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const TransactionUpdateOneWithoutChildTransactionsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutChildTransactionsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => TransactionCreateOrConnectWithoutChildTransactionsInputSchema).optional(),
  upsert: z.lazy(() => TransactionUpsertWithoutChildTransactionsInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => TransactionWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => TransactionWhereInputSchema)]).optional(),
  connect: z.lazy(() => TransactionWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => TransactionUpdateToOneWithWhereWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUpdateWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutChildTransactionsInputSchema)]).optional()
}).strict();
const TransactionUpdateManyWithoutParentTransactionNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutParentTransactionInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutParentTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyParentTransactionInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutParentTransactionInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutParentTransactionInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutParentTransactionInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutParentTransactionInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema = z.object({
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema).array(), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUpsertWithWhereUniqueWithoutTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => JointAccountModRequestCreateManyTransactionInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => JointAccountModRequestWhereUniqueInputSchema), z.lazy(() => JointAccountModRequestWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUpdateWithWhereUniqueWithoutTransactionInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUpdateManyWithWhereWithoutTransactionInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema = z.object({
  create: z.union([z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema).array(), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema), z.lazy(() => TransactionCreateOrConnectWithoutParentTransactionInputSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TransactionUpsertWithWhereUniqueWithoutParentTransactionInputSchema), z.lazy(() => TransactionUpsertWithWhereUniqueWithoutParentTransactionInputSchema).array()]).optional(),
  createMany: z.lazy(() => TransactionCreateManyParentTransactionInputEnvelopeSchema).optional(),
  set: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TransactionWhereUniqueInputSchema), z.lazy(() => TransactionWhereUniqueInputSchema).array()]).optional(),
  update: z.union([z.lazy(() => TransactionUpdateWithWhereUniqueWithoutParentTransactionInputSchema), z.lazy(() => TransactionUpdateWithWhereUniqueWithoutParentTransactionInputSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TransactionUpdateManyWithWhereWithoutParentTransactionInputSchema), z.lazy(() => TransactionUpdateManyWithWhereWithoutParentTransactionInputSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional()
}).strict();
const UserCreateNestedOneWithoutNotificationsInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutNotificationsInputSchema), z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
const FinancialAccountCreateNestedOneWithoutNotificationsInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutNotificationsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutNotificationsInputSchema).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional()
}).strict();
const EnumNotificationBodyTypeFieldUpdateOperationsInputSchema = z.object({
  set: z.lazy(() => NotificationBodyTypeSchema).optional()
}).strict();
const UserUpdateOneWithoutNotificationsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutNotificationsInputSchema), z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutNotificationsInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => UserWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => UserWhereInputSchema)]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutNotificationsInputSchema), z.lazy(() => UserUpdateWithoutNotificationsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema)]).optional()
}).strict();
const FinancialAccountUpdateOneWithoutNotificationsNestedInputSchema = z.object({
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutNotificationsInputSchema)]).optional(),
  connectOrCreate: z.lazy(() => FinancialAccountCreateOrConnectWithoutNotificationsInputSchema).optional(),
  upsert: z.lazy(() => FinancialAccountUpsertWithoutNotificationsInputSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => FinancialAccountWhereInputSchema)]).optional(),
  connect: z.lazy(() => FinancialAccountWhereUniqueInputSchema).optional(),
  update: z.union([z.lazy(() => FinancialAccountUpdateToOneWithWhereWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUpdateWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutNotificationsInputSchema)]).optional()
}).strict();
const NestedStringFilterSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
const NestedBoolFilterSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolFilterSchema)]).optional()
}).strict();
const NestedStringNullableFilterSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)]).optional().nullable()
}).strict();
const NestedEnumUserRoleFilterSchema = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => NestedEnumUserRoleFilterSchema)]).optional()
}).strict();
const NestedBoolNullableFilterSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)]).optional().nullable()
}).strict();
const NestedDateTimeNullableFilterSchema = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)]).optional().nullable()
}).strict();
const NestedDateTimeFilterSchema = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)]).optional()
}).strict();
const NestedStringWithAggregatesFilterSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();
const NestedIntFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
}).strict();
const NestedBoolWithAggregatesFilterSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();
const NestedStringNullableWithAggregatesFilterSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();
const NestedIntNullableFilterSchema = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)]).optional().nullable()
}).strict();
const NestedEnumUserRoleWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();
const NestedBoolNullableWithAggregatesFilterSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();
const NestedDateTimeNullableWithAggregatesFilterSchema = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();
const NestedDateTimeWithAggregatesFilterSchema = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();
const NestedEnumGovernmentIdTypeNullableFilterSchema = z.object({
  equals: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  in: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NestedEnumGovernmentIdTypeNullableFilterSchema)]).optional().nullable()
}).strict();
const NestedEnumKycStatusNullableFilterSchema = z.object({
  equals: z.lazy(() => KycStatusSchema).optional().nullable(),
  in: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NestedEnumKycStatusNullableFilterSchema)]).optional().nullable()
}).strict();
const NestedEnumGovernmentIdTypeNullableWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  in: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => GovernmentIdTypeSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NestedEnumGovernmentIdTypeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumGovernmentIdTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumGovernmentIdTypeNullableFilterSchema).optional()
}).strict();
const NestedEnumKycStatusNullableWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => KycStatusSchema).optional().nullable(),
  in: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => KycStatusSchema).array().optional().nullable(),
  not: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NestedEnumKycStatusNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumKycStatusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumKycStatusNullableFilterSchema).optional()
}).strict();
const NestedIntNullableWithAggregatesFilterSchema = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();
const NestedFloatNullableFilterSchema = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedFloatNullableFilterSchema)]).optional().nullable()
}).strict();
const NestedEnumAccountStatusFilterSchema = z.object({
  equals: z.lazy(() => AccountStatusSchema).optional(),
  in: z.lazy(() => AccountStatusSchema).array().optional(),
  notIn: z.lazy(() => AccountStatusSchema).array().optional(),
  not: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => NestedEnumAccountStatusFilterSchema)]).optional()
}).strict();
const NestedEnumAccountTypeFilterSchema = z.object({
  equals: z.lazy(() => AccountTypeSchema).optional(),
  in: z.lazy(() => AccountTypeSchema).array().optional(),
  notIn: z.lazy(() => AccountTypeSchema).array().optional(),
  not: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => NestedEnumAccountTypeFilterSchema)]).optional()
}).strict();
const NestedEnumAccountOwnershipFilterSchema = z.object({
  equals: z.lazy(() => AccountOwnershipSchema).optional(),
  in: z.lazy(() => AccountOwnershipSchema).array().optional(),
  notIn: z.lazy(() => AccountOwnershipSchema).array().optional(),
  not: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => NestedEnumAccountOwnershipFilterSchema)]).optional()
}).strict();
const NestedFloatFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedFloatFilterSchema)]).optional()
}).strict();
const NestedEnumAccountStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountStatusSchema).optional(),
  in: z.lazy(() => AccountStatusSchema).array().optional(),
  notIn: z.lazy(() => AccountStatusSchema).array().optional(),
  not: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => NestedEnumAccountStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountStatusFilterSchema).optional()
}).strict();
const NestedEnumAccountTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountTypeSchema).optional(),
  in: z.lazy(() => AccountTypeSchema).array().optional(),
  notIn: z.lazy(() => AccountTypeSchema).array().optional(),
  not: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => NestedEnumAccountTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountTypeFilterSchema).optional()
}).strict();
const NestedEnumAccountOwnershipWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountOwnershipSchema).optional(),
  in: z.lazy(() => AccountOwnershipSchema).array().optional(),
  notIn: z.lazy(() => AccountOwnershipSchema).array().optional(),
  not: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => NestedEnumAccountOwnershipWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountOwnershipFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountOwnershipFilterSchema).optional()
}).strict();
const NestedFloatWithAggregatesFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();
const NestedIntWithAggregatesFilterSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();
const NestedEnumAccountUserRoleFilterSchema = z.object({
  equals: z.lazy(() => AccountUserRoleSchema).optional(),
  in: z.lazy(() => AccountUserRoleSchema).array().optional(),
  notIn: z.lazy(() => AccountUserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => NestedEnumAccountUserRoleFilterSchema)]).optional()
}).strict();
const NestedEnumAccountUserRoleWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => AccountUserRoleSchema).optional(),
  in: z.lazy(() => AccountUserRoleSchema).array().optional(),
  notIn: z.lazy(() => AccountUserRoleSchema).array().optional(),
  not: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => NestedEnumAccountUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAccountUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAccountUserRoleFilterSchema).optional()
}).strict();
const NestedEnumJointAccountRequestStatusFilterSchema = z.object({
  equals: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  in: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  notIn: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => NestedEnumJointAccountRequestStatusFilterSchema)]).optional()
}).strict();
const NestedEnumJointAccountRequestStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  in: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  notIn: z.lazy(() => JointAccountRequestStatusSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => NestedEnumJointAccountRequestStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumJointAccountRequestStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumJointAccountRequestStatusFilterSchema).optional()
}).strict();
const NestedEnumJointAccountModRequestTypeFilterSchema = z.object({
  equals: z.lazy(() => JointAccountModRequestTypeSchema).optional(),
  in: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  notIn: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => NestedEnumJointAccountModRequestTypeFilterSchema)]).optional()
}).strict();
const NestedEnumJointAccountModRequestTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => JointAccountModRequestTypeSchema).optional(),
  in: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  notIn: z.lazy(() => JointAccountModRequestTypeSchema).array().optional(),
  not: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => NestedEnumJointAccountModRequestTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumJointAccountModRequestTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumJointAccountModRequestTypeFilterSchema).optional()
}).strict();
const NestedEnumInvestmentPlanCategoryFilterSchema = z.object({
  equals: z.lazy(() => InvestmentPlanCategorySchema).optional(),
  in: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  notIn: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => NestedEnumInvestmentPlanCategoryFilterSchema)]).optional()
}).strict();
const NestedEnumProfitDistributionFilterSchema = z.object({
  equals: z.lazy(() => ProfitDistributionSchema).optional(),
  in: z.lazy(() => ProfitDistributionSchema).array().optional(),
  notIn: z.lazy(() => ProfitDistributionSchema).array().optional(),
  not: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => NestedEnumProfitDistributionFilterSchema)]).optional()
}).strict();
const NestedEnumInvestmentPlanCategoryWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => InvestmentPlanCategorySchema).optional(),
  in: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  notIn: z.lazy(() => InvestmentPlanCategorySchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => NestedEnumInvestmentPlanCategoryWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvestmentPlanCategoryFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvestmentPlanCategoryFilterSchema).optional()
}).strict();
const NestedEnumProfitDistributionWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => ProfitDistributionSchema).optional(),
  in: z.lazy(() => ProfitDistributionSchema).array().optional(),
  notIn: z.lazy(() => ProfitDistributionSchema).array().optional(),
  not: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => NestedEnumProfitDistributionWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProfitDistributionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProfitDistributionFilterSchema).optional()
}).strict();
const NestedEnumInvestmentStatusFilterSchema = z.object({
  equals: z.lazy(() => InvestmentStatusSchema).optional(),
  in: z.lazy(() => InvestmentStatusSchema).array().optional(),
  notIn: z.lazy(() => InvestmentStatusSchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => NestedEnumInvestmentStatusFilterSchema)]).optional()
}).strict();
const NestedEnumInvestmentStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => InvestmentStatusSchema).optional(),
  in: z.lazy(() => InvestmentStatusSchema).array().optional(),
  notIn: z.lazy(() => InvestmentStatusSchema).array().optional(),
  not: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => NestedEnumInvestmentStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvestmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvestmentStatusFilterSchema).optional()
}).strict();
const NestedEnumTransactionTypeFilterSchema = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => NestedEnumTransactionTypeFilterSchema)]).optional()
}).strict();
const NestedEnumTransactionStatusFilterSchema = z.object({
  equals: z.lazy(() => TransactionStatusSchema).optional(),
  in: z.lazy(() => TransactionStatusSchema).array().optional(),
  notIn: z.lazy(() => TransactionStatusSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => NestedEnumTransactionStatusFilterSchema)]).optional()
}).strict();
const NestedEnumTransactionTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => NestedEnumTransactionTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional()
}).strict();
const NestedEnumTransactionStatusWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => TransactionStatusSchema).optional(),
  in: z.lazy(() => TransactionStatusSchema).array().optional(),
  notIn: z.lazy(() => TransactionStatusSchema).array().optional(),
  not: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => NestedEnumTransactionStatusWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransactionStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransactionStatusFilterSchema).optional()
}).strict();
const NestedEnumNotificationBodyTypeFilterSchema = z.object({
  equals: z.lazy(() => NotificationBodyTypeSchema).optional(),
  in: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  not: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => NestedEnumNotificationBodyTypeFilterSchema)]).optional()
}).strict();
const NestedEnumNotificationBodyTypeWithAggregatesFilterSchema = z.object({
  equals: z.lazy(() => NotificationBodyTypeSchema).optional(),
  in: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationBodyTypeSchema).array().optional(),
  not: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => NestedEnumNotificationBodyTypeWithAggregatesFilterSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNotificationBodyTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNotificationBodyTypeFilterSchema).optional()
}).strict();
const ProfileCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  address: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  governmentId: z.string().optional().nullable(),
  governmentIdType: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  governmentIdExt: z.string().optional().nullable(),
  kycStatus: z.lazy(() => KycStatusSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const ProfileUncheckedCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  address: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  governmentId: z.string().optional().nullable(),
  governmentIdType: z.lazy(() => GovernmentIdTypeSchema).optional().nullable(),
  governmentIdExt: z.string().optional().nullable(),
  kycStatus: z.lazy(() => KycStatusSchema).optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const ProfileCreateOrConnectWithoutUserInputSchema = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([z.lazy(() => ProfileCreateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedCreateWithoutUserInputSchema)])
}).strict();
const SessionCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const SessionUncheckedCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const SessionCreateOrConnectWithoutUserInputSchema = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema)])
}).strict();
const SessionCreateManyUserInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => SessionCreateManyUserInputSchema), z.lazy(() => SessionCreateManyUserInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const AccountCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountUncheckedCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountCreateOrConnectWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema)])
}).strict();
const AccountCreateManyUserInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => AccountCreateManyUserInputSchema), z.lazy(() => AccountCreateManyUserInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const FinancialAccountCreateWithoutCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema)])
}).strict();
const FinancialAccountCreateManyCreatorInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => FinancialAccountCreateManyCreatorInputSchema), z.lazy(() => FinancialAccountCreateManyCreatorInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const AccountUserCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutAccountUsersInputSchema),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutInitiatorInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserUncheckedCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutInitiatorInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserCreateOrConnectWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => AccountUserCreateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema)])
}).strict();
const AccountUserCreateManyUserInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => AccountUserCreateManyUserInputSchema), z.lazy(() => AccountUserCreateManyUserInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const JointAccountRequestCreateWithoutCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipient: z.lazy(() => UserCreateNestedOneWithoutReceivedJointAccountRequestsInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutJointAccountRequestsInputSchema)
}).strict();
const JointAccountRequestUncheckedCreateWithoutCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  recipientId: z.string().optional().nullable(),
  financialAccountId: z.string(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestCreateOrConnectWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema)])
}).strict();
const JointAccountRequestCreateManyCreatorInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountRequestCreateManyCreatorInputSchema), z.lazy(() => JointAccountRequestCreateManyCreatorInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const JointAccountRequestCreateWithoutRecipientInputSchema = z.object({
  id: z.string().uuid().optional(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedJointAccountRequestsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutJointAccountRequestsInputSchema)
}).strict();
const JointAccountRequestUncheckedCreateWithoutRecipientInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  financialAccountId: z.string(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestCreateOrConnectWithoutRecipientInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema)])
}).strict();
const JointAccountRequestCreateManyRecipientInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountRequestCreateManyRecipientInputSchema), z.lazy(() => JointAccountRequestCreateManyRecipientInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const JointAccountModRequestCreateWithoutCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  account: z.lazy(() => FinancialAccountCreateNestedOneWithoutJointAccountModRequestsInputSchema),
  transaction: z.lazy(() => TransactionCreateNestedOneWithoutJointAccountModRequestsInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  transactionId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestCreateOrConnectWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema)])
}).strict();
const JointAccountModRequestCreateManyCreatorInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountModRequestCreateManyCreatorInputSchema), z.lazy(() => JointAccountModRequestCreateManyCreatorInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const NotificationCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutNotificationsInputSchema).optional()
}).strict();
const NotificationUncheckedCreateWithoutUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  financialAccountId: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const NotificationCreateOrConnectWithoutUserInputSchema = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  create: z.union([z.lazy(() => NotificationCreateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema)])
}).strict();
const NotificationCreateManyUserInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => NotificationCreateManyUserInputSchema), z.lazy(() => NotificationCreateManyUserInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const JointAccountModRequestApprovalCreateWithoutApproverInputSchema = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  request: z.lazy(() => JointAccountModRequestCreateNestedOneWithoutApprovalsInputSchema)
}).strict();
const JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema = z.object({
  id: z.string().uuid().optional(),
  jointAccountModRequestId: z.string(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestApprovalCreateOrConnectWithoutApproverInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema)])
}).strict();
const JointAccountModRequestApprovalCreateManyApproverInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountModRequestApprovalCreateManyApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateManyApproverInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const ProfileUpsertWithoutUserInputSchema = z.object({
  update: z.union([z.lazy(() => ProfileUpdateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedUpdateWithoutUserInputSchema)]),
  create: z.union([z.lazy(() => ProfileCreateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedCreateWithoutUserInputSchema)]),
  where: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();
const ProfileUpdateToOneWithWhereWithoutUserInputSchema = z.object({
  where: z.lazy(() => ProfileWhereInputSchema).optional(),
  data: z.union([z.lazy(() => ProfileUpdateWithoutUserInputSchema), z.lazy(() => ProfileUncheckedUpdateWithoutUserInputSchema)])
}).strict();
const ProfileUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  country: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  state: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  city: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  postalCode: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NullableEnumGovernmentIdTypeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NullableEnumKycStatusFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const ProfileUncheckedUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  country: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  state: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  city: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  postalCode: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdType: z.union([z.lazy(() => GovernmentIdTypeSchema), z.lazy(() => NullableEnumGovernmentIdTypeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  governmentIdExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  kycStatus: z.union([z.lazy(() => KycStatusSchema), z.lazy(() => NullableEnumKycStatusFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SessionUpsertWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([z.lazy(() => SessionUpdateWithoutUserInputSchema), z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema)]),
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema)])
}).strict();
const SessionUpdateWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([z.lazy(() => SessionUpdateWithoutUserInputSchema), z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema)])
}).strict();
const SessionUpdateManyWithWhereWithoutUserInputSchema = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([z.lazy(() => SessionUpdateManyMutationInputSchema), z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
const SessionScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => SessionScalarWhereInputSchema), z.lazy(() => SessionScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionScalarWhereInputSchema), z.lazy(() => SessionScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  token: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  impersonatedBy: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const AccountUpsertWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([z.lazy(() => AccountUpdateWithoutUserInputSchema), z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema)]),
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema)])
}).strict();
const AccountUpdateWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([z.lazy(() => AccountUpdateWithoutUserInputSchema), z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema)])
}).strict();
const AccountUpdateManyWithWhereWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([z.lazy(() => AccountUpdateManyMutationInputSchema), z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
const AccountScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => AccountScalarWhereInputSchema), z.lazy(() => AccountScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountScalarWhereInputSchema), z.lazy(() => AccountScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  accountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const FinancialAccountUpsertWithWhereUniqueWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutCreatorInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutCreatorInputSchema)])
}).strict();
const FinancialAccountUpdateWithWhereUniqueWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutCreatorInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutCreatorInputSchema)])
}).strict();
const FinancialAccountUpdateManyWithWhereWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => FinancialAccountScalarWhereInputSchema),
  data: z.union([z.lazy(() => FinancialAccountUpdateManyMutationInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorInputSchema)])
}).strict();
const FinancialAccountScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => FinancialAccountScalarWhereInputSchema), z.lazy(() => FinancialAccountScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => FinancialAccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => FinancialAccountScalarWhereInputSchema), z.lazy(() => FinancialAccountScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumAccountStatusFilterSchema), z.lazy(() => AccountStatusSchema)]).optional(),
  type: z.union([z.lazy(() => EnumAccountTypeFilterSchema), z.lazy(() => AccountTypeSchema)]).optional(),
  ownership: z.union([z.lazy(() => EnumAccountOwnershipFilterSchema), z.lazy(() => AccountOwnershipSchema)]).optional(),
  balance: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  totalTransactions: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  totalInvestments: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  firstTransactionAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  lastTransactionAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  dormantAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const AccountUserUpsertWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  update: z.union([z.lazy(() => AccountUserUpdateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutUserInputSchema)]),
  create: z.union([z.lazy(() => AccountUserCreateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutUserInputSchema)])
}).strict();
const AccountUserUpdateWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  data: z.union([z.lazy(() => AccountUserUpdateWithoutUserInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutUserInputSchema)])
}).strict();
const AccountUserUpdateManyWithWhereWithoutUserInputSchema = z.object({
  where: z.lazy(() => AccountUserScalarWhereInputSchema),
  data: z.union([z.lazy(() => AccountUserUpdateManyMutationInputSchema), z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
const AccountUserScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => AccountUserScalarWhereInputSchema), z.lazy(() => AccountUserScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => AccountUserScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountUserScalarWhereInputSchema), z.lazy(() => AccountUserScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  autosign: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const JointAccountRequestUpsertWithWhereUniqueWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateWithoutCreatorInputSchema)]),
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutCreatorInputSchema)])
}).strict();
const JointAccountRequestUpdateWithWhereUniqueWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountRequestUpdateWithoutCreatorInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateWithoutCreatorInputSchema)])
}).strict();
const JointAccountRequestUpdateManyWithWhereWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountRequestUpdateManyMutationInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorInputSchema)])
}).strict();
const JointAccountRequestScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountRequestScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountRequestScalarWhereInputSchema), z.lazy(() => JointAccountRequestScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientName: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientEmail: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => EnumAccountUserRoleFilterSchema), z.lazy(() => AccountUserRoleSchema)]).optional(),
  ownership: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  recipientId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  lastReminderAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  reminderCount: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const JointAccountRequestUpsertWithWhereUniqueWithoutRecipientInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateWithoutRecipientInputSchema)]),
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutRecipientInputSchema)])
}).strict();
const JointAccountRequestUpdateWithWhereUniqueWithoutRecipientInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountRequestUpdateWithoutRecipientInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateWithoutRecipientInputSchema)])
}).strict();
const JointAccountRequestUpdateManyWithWhereWithoutRecipientInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountRequestUpdateManyMutationInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientInputSchema)])
}).strict();
const JointAccountModRequestUpsertWithWhereUniqueWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutCreatorInputSchema)]),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutCreatorInputSchema)])
}).strict();
const JointAccountModRequestUpdateWithWhereUniqueWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutCreatorInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutCreatorInputSchema)])
}).strict();
const JointAccountModRequestUpdateManyWithWhereWithoutCreatorInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestUpdateManyMutationInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorInputSchema)])
}).strict();
const JointAccountModRequestScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestScalarWhereInputSchema), z.lazy(() => JointAccountModRequestScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  creatorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumJointAccountModRequestTypeFilterSchema), z.lazy(() => JointAccountModRequestTypeSchema)]).optional(),
  transactionId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const NotificationUpsertWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  update: z.union([z.lazy(() => NotificationUpdateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedUpdateWithoutUserInputSchema)]),
  create: z.union([z.lazy(() => NotificationCreateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema)])
}).strict();
const NotificationUpdateWithWhereUniqueWithoutUserInputSchema = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  data: z.union([z.lazy(() => NotificationUpdateWithoutUserInputSchema), z.lazy(() => NotificationUncheckedUpdateWithoutUserInputSchema)])
}).strict();
const NotificationUpdateManyWithWhereWithoutUserInputSchema = z.object({
  where: z.lazy(() => NotificationScalarWhereInputSchema),
  data: z.union([z.lazy(() => NotificationUpdateManyMutationInputSchema), z.lazy(() => NotificationUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
const NotificationScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => NotificationScalarWhereInputSchema), z.lazy(() => NotificationScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => NotificationScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => NotificationScalarWhereInputSchema), z.lazy(() => NotificationScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  title: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  body: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  bodyType: z.union([z.lazy(() => EnumNotificationBodyTypeFilterSchema), z.lazy(() => NotificationBodyTypeSchema)]).optional(),
  userId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  financialAccountId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  link: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  isRead: z.union([z.lazy(() => BoolFilterSchema), z.boolean()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutApproverInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateWithoutApproverInputSchema)]),
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutApproverInputSchema)])
}).strict();
const JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutApproverInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithoutApproverInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateWithoutApproverInputSchema)])
}).strict();
const JointAccountModRequestApprovalUpdateManyWithWhereWithoutApproverInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateManyMutationInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverInputSchema)])
}).strict();
const JointAccountModRequestApprovalScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema), z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  jointAccountModRequestId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  approverId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => EnumJointAccountRequestStatusFilterSchema), z.lazy(() => JointAccountRequestStatusSchema)]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const UserCreateWithoutSessionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutSessionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutSessionsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)])
}).strict();
const UserUpsertWithoutSessionsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutSessionsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutSessionsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutSessionsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)])
}).strict();
const UserUpdateWithoutSessionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutSessionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserCreateWithoutAccountsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutAccountsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutAccountsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema)])
}).strict();
const UserUpsertWithoutAccountsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutAccountsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutAccountsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutAccountsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema)])
}).strict();
const UserUpdateWithoutAccountsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutAccountsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserCreateWithoutProfileInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutProfileInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutProfileInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutProfileInputSchema), z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema)])
}).strict();
const UserUpsertWithoutProfileInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutProfileInputSchema), z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutProfileInputSchema), z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutProfileInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutProfileInputSchema), z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema)])
}).strict();
const UserUpdateWithoutProfileInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutProfileInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const FinancialAccountCreateWithoutBusinessProfileInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutBusinessProfileInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutBusinessProfileInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutBusinessProfileInputSchema)])
}).strict();
const FinancialAccountUpsertWithoutBusinessProfileInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutBusinessProfileInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutBusinessProfileInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutBusinessProfileInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutBusinessProfileInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutBusinessProfileInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutBusinessProfileInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutBusinessProfileInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const UserCreateWithoutCreatedAccountsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutCreatedAccountsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutCreatedAccountsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutCreatedAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedAccountsInputSchema)])
}).strict();
const BusinessProfileCreateWithoutAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  address: z.string().optional().nullable(),
  creationMonth: z.string().optional().nullable(),
  creationYear: z.number().int().optional().nullable(),
  proofOfAddress: z.string().optional().nullable(),
  proofOfAddressExt: z.string().optional().nullable(),
  certificate: z.string().optional().nullable(),
  certificateExt: z.string().optional().nullable(),
  approved: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const BusinessProfileUncheckedCreateWithoutAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  address: z.string().optional().nullable(),
  creationMonth: z.string().optional().nullable(),
  creationYear: z.number().int().optional().nullable(),
  proofOfAddress: z.string().optional().nullable(),
  proofOfAddressExt: z.string().optional().nullable(),
  certificate: z.string().optional().nullable(),
  certificateExt: z.string().optional().nullable(),
  approved: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const BusinessProfileCreateOrConnectWithoutAccountInputSchema = z.object({
  where: z.lazy(() => BusinessProfileWhereUniqueInputSchema),
  create: z.union([z.lazy(() => BusinessProfileCreateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedCreateWithoutAccountInputSchema)])
}).strict();
const AccountUserCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountMembershipsInputSchema),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutInitiatorInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserUncheckedCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutInitiatorInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserCreateOrConnectWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const AccountUserCreateManyFinancialAccountInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => AccountUserCreateManyFinancialAccountInputSchema), z.lazy(() => AccountUserCreateManyFinancialAccountInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const JointAccountRequestCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedJointAccountRequestsInputSchema),
  recipient: z.lazy(() => UserCreateNestedOneWithoutReceivedJointAccountRequestsInputSchema).optional()
}).strict();
const JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  recipientId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestCreateOrConnectWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const JointAccountRequestCreateManyFinancialAccountInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountRequestCreateManyFinancialAccountInputSchema), z.lazy(() => JointAccountRequestCreateManyFinancialAccountInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const JointAccountModRequestCreateWithoutAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedJointAccountModRequestsInputSchema),
  transaction: z.lazy(() => TransactionCreateNestedOneWithoutJointAccountModRequestsInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedCreateWithoutAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  transactionId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestCreateOrConnectWithoutAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema)])
}).strict();
const JointAccountModRequestCreateManyAccountInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountModRequestCreateManyAccountInputSchema), z.lazy(() => JointAccountModRequestCreateManyAccountInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const NotificationCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutNotificationsInputSchema).optional()
}).strict();
const NotificationUncheckedCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  userId: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const NotificationCreateOrConnectWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  create: z.union([z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const NotificationCreateManyFinancialAccountInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => NotificationCreateManyFinancialAccountInputSchema), z.lazy(() => NotificationCreateManyFinancialAccountInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const TransactionCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  initiator: z.lazy(() => AccountUserCreateNestedOneWithoutTransactionsInputSchema),
  recipientAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema).optional(),
  investment: z.lazy(() => InvestmentCreateNestedOneWithoutTransactionsInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionCreateNestedOneWithoutChildTransactionsInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUncheckedCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionCreateOrConnectWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const TransactionCreateManyFinancialAccountInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => TransactionCreateManyFinancialAccountInputSchema), z.lazy(() => TransactionCreateManyFinancialAccountInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const TransactionCreateWithoutRecipientAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  initiator: z.lazy(() => AccountUserCreateNestedOneWithoutTransactionsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutTransactionsInputSchema),
  investment: z.lazy(() => InvestmentCreateNestedOneWithoutTransactionsInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionCreateNestedOneWithoutChildTransactionsInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUncheckedCreateWithoutRecipientAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionCreateOrConnectWithoutRecipientAccountInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema)])
}).strict();
const TransactionCreateManyRecipientAccountInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => TransactionCreateManyRecipientAccountInputSchema), z.lazy(() => TransactionCreateManyRecipientAccountInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const InvestmentCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  investor: z.lazy(() => AccountUserCreateNestedOneWithoutInvestmentsInputSchema),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutInvestmentInputSchema).optional()
}).strict();
const InvestmentUncheckedCreateWithoutFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  investorId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutInvestmentInputSchema).optional()
}).strict();
const InvestmentCreateOrConnectWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereUniqueInputSchema),
  create: z.union([z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const InvestmentCreateManyFinancialAccountInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => InvestmentCreateManyFinancialAccountInputSchema), z.lazy(() => InvestmentCreateManyFinancialAccountInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const UserUpsertWithoutCreatedAccountsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutCreatedAccountsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedAccountsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutCreatedAccountsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedAccountsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutCreatedAccountsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutCreatedAccountsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedAccountsInputSchema)])
}).strict();
const UserUpdateWithoutCreatedAccountsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutCreatedAccountsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const BusinessProfileUpsertWithoutAccountInputSchema = z.object({
  update: z.union([z.lazy(() => BusinessProfileUpdateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedUpdateWithoutAccountInputSchema)]),
  create: z.union([z.lazy(() => BusinessProfileCreateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedCreateWithoutAccountInputSchema)]),
  where: z.lazy(() => BusinessProfileWhereInputSchema).optional()
}).strict();
const BusinessProfileUpdateToOneWithWhereWithoutAccountInputSchema = z.object({
  where: z.lazy(() => BusinessProfileWhereInputSchema).optional(),
  data: z.union([z.lazy(() => BusinessProfileUpdateWithoutAccountInputSchema), z.lazy(() => BusinessProfileUncheckedUpdateWithoutAccountInputSchema)])
}).strict();
const BusinessProfileUpdateWithoutAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationMonth: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationYear: z.union([z.number().int(), z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddressExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificate: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificateExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approved: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const BusinessProfileUncheckedUpdateWithoutAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  address: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationMonth: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  creationYear: z.union([z.number().int(), z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  proofOfAddressExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificate: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  certificateExt: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approved: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  update: z.union([z.lazy(() => AccountUserUpdateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutFinancialAccountInputSchema)]),
  create: z.union([z.lazy(() => AccountUserCreateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  data: z.union([z.lazy(() => AccountUserUpdateWithoutFinancialAccountInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutFinancialAccountInputSchema)])
}).strict();
const AccountUserUpdateManyWithWhereWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => AccountUserScalarWhereInputSchema),
  data: z.union([z.lazy(() => AccountUserUpdateManyMutationInputSchema), z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountInputSchema)])
}).strict();
const JointAccountRequestUpsertWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountRequestUpdateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateWithoutFinancialAccountInputSchema)]),
  create: z.union([z.lazy(() => JointAccountRequestCreateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const JointAccountRequestUpdateWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountRequestUpdateWithoutFinancialAccountInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateWithoutFinancialAccountInputSchema)])
}).strict();
const JointAccountRequestUpdateManyWithWhereWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountRequestScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountRequestUpdateManyMutationInputSchema), z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountInputSchema)])
}).strict();
const JointAccountModRequestUpsertWithWhereUniqueWithoutAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutAccountInputSchema)]),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutAccountInputSchema)])
}).strict();
const JointAccountModRequestUpdateWithWhereUniqueWithoutAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutAccountInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutAccountInputSchema)])
}).strict();
const JointAccountModRequestUpdateManyWithWhereWithoutAccountInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestUpdateManyMutationInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountInputSchema)])
}).strict();
const NotificationUpsertWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  update: z.union([z.lazy(() => NotificationUpdateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedUpdateWithoutFinancialAccountInputSchema)]),
  create: z.union([z.lazy(() => NotificationCreateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const NotificationUpdateWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  data: z.union([z.lazy(() => NotificationUpdateWithoutFinancialAccountInputSchema), z.lazy(() => NotificationUncheckedUpdateWithoutFinancialAccountInputSchema)])
}).strict();
const NotificationUpdateManyWithWhereWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => NotificationScalarWhereInputSchema),
  data: z.union([z.lazy(() => NotificationUpdateManyMutationInputSchema), z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountInputSchema)])
}).strict();
const TransactionUpsertWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  update: z.union([z.lazy(() => TransactionUpdateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutFinancialAccountInputSchema)]),
  create: z.union([z.lazy(() => TransactionCreateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const TransactionUpdateWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateWithoutFinancialAccountInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutFinancialAccountInputSchema)])
}).strict();
const TransactionUpdateManyWithWhereWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => TransactionScalarWhereInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateManyMutationInputSchema), z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountInputSchema)])
}).strict();
const TransactionScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => TransactionScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => TransactionScalarWhereInputSchema), z.lazy(() => TransactionScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  amount: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  currency: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  USDAmount: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  rate: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  charges: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  type: z.union([z.lazy(() => EnumTransactionTypeFilterSchema), z.lazy(() => TransactionTypeSchema)]).optional(),
  initiatorAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  recipientAccountId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  investmentId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => EnumTransactionStatusFilterSchema), z.lazy(() => TransactionStatusSchema)]).optional(),
  parentTransactionId: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  approvedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  failedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  failReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  bank: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  bankAccount: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  description: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const TransactionUpsertWithWhereUniqueWithoutRecipientAccountInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  update: z.union([z.lazy(() => TransactionUpdateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutRecipientAccountInputSchema)]),
  create: z.union([z.lazy(() => TransactionCreateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutRecipientAccountInputSchema)])
}).strict();
const TransactionUpdateWithWhereUniqueWithoutRecipientAccountInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateWithoutRecipientAccountInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutRecipientAccountInputSchema)])
}).strict();
const TransactionUpdateManyWithWhereWithoutRecipientAccountInputSchema = z.object({
  where: z.lazy(() => TransactionScalarWhereInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateManyMutationInputSchema), z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountInputSchema)])
}).strict();
const InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereUniqueInputSchema),
  update: z.union([z.lazy(() => InvestmentUpdateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedUpdateWithoutFinancialAccountInputSchema)]),
  create: z.union([z.lazy(() => InvestmentCreateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutFinancialAccountInputSchema)])
}).strict();
const InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereUniqueInputSchema),
  data: z.union([z.lazy(() => InvestmentUpdateWithoutFinancialAccountInputSchema), z.lazy(() => InvestmentUncheckedUpdateWithoutFinancialAccountInputSchema)])
}).strict();
const InvestmentUpdateManyWithWhereWithoutFinancialAccountInputSchema = z.object({
  where: z.lazy(() => InvestmentScalarWhereInputSchema),
  data: z.union([z.lazy(() => InvestmentUpdateManyMutationInputSchema), z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountInputSchema)])
}).strict();
const InvestmentScalarWhereInputSchema = z.object({
  AND: z.union([z.lazy(() => InvestmentScalarWhereInputSchema), z.lazy(() => InvestmentScalarWhereInputSchema).array()]).optional(),
  OR: z.lazy(() => InvestmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvestmentScalarWhereInputSchema), z.lazy(() => InvestmentScalarWhereInputSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  financialAccountId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  investorId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  deposit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  investmentName: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
  totalProfit: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  profitCount: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  status: z.union([z.lazy(() => EnumInvestmentStatusFilterSchema), z.lazy(() => InvestmentStatusSchema)]).optional(),
  pausedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  pausedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  closedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  closedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  terminatedAt: z.union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()]).optional().nullable(),
  terminatedReason: z.union([z.lazy(() => StringNullableFilterSchema), z.string()]).optional().nullable(),
  category: z.union([z.lazy(() => EnumInvestmentPlanCategoryFilterSchema), z.lazy(() => InvestmentPlanCategorySchema)]).optional(),
  daysCompleted: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  duration: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
  totalReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  periodicReturn: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  profitDistribution: z.union([z.lazy(() => EnumProfitDistributionFilterSchema), z.lazy(() => ProfitDistributionSchema)]).optional(),
  terminationFee: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional()
}).strict();
const UserCreateWithoutAccountMembershipsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutAccountMembershipsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutAccountMembershipsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutAccountMembershipsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountMembershipsInputSchema)])
}).strict();
const FinancialAccountCreateWithoutAccountUsersInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutAccountUsersInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutAccountUsersInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutAccountUsersInputSchema)])
}).strict();
const TransactionCreateWithoutInitiatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutTransactionsInputSchema),
  recipientAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema).optional(),
  investment: z.lazy(() => InvestmentCreateNestedOneWithoutTransactionsInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionCreateNestedOneWithoutChildTransactionsInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUncheckedCreateWithoutInitiatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionCreateOrConnectWithoutInitiatorInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => TransactionCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema)])
}).strict();
const TransactionCreateManyInitiatorInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => TransactionCreateManyInitiatorInputSchema), z.lazy(() => TransactionCreateManyInitiatorInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const InvestmentCreateWithoutInvestorInputSchema = z.object({
  id: z.string().uuid().optional(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutInvestmentInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutInvestmentsInputSchema)
}).strict();
const InvestmentUncheckedCreateWithoutInvestorInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutInvestmentInputSchema).optional()
}).strict();
const InvestmentCreateOrConnectWithoutInvestorInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereUniqueInputSchema),
  create: z.union([z.lazy(() => InvestmentCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema)])
}).strict();
const InvestmentCreateManyInvestorInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => InvestmentCreateManyInvestorInputSchema), z.lazy(() => InvestmentCreateManyInvestorInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const UserUpsertWithoutAccountMembershipsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutAccountMembershipsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountMembershipsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutAccountMembershipsInputSchema), z.lazy(() => UserUncheckedCreateWithoutAccountMembershipsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutAccountMembershipsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutAccountMembershipsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountMembershipsInputSchema)])
}).strict();
const UserUpdateWithoutAccountMembershipsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutAccountMembershipsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const FinancialAccountUpsertWithoutAccountUsersInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutAccountUsersInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutAccountUsersInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutAccountUsersInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutAccountUsersInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutAccountUsersInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutAccountUsersInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutAccountUsersInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const TransactionUpsertWithWhereUniqueWithoutInitiatorInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  update: z.union([z.lazy(() => TransactionUpdateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutInitiatorInputSchema)]),
  create: z.union([z.lazy(() => TransactionCreateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInitiatorInputSchema)])
}).strict();
const TransactionUpdateWithWhereUniqueWithoutInitiatorInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateWithoutInitiatorInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutInitiatorInputSchema)])
}).strict();
const TransactionUpdateManyWithWhereWithoutInitiatorInputSchema = z.object({
  where: z.lazy(() => TransactionScalarWhereInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateManyMutationInputSchema), z.lazy(() => TransactionUncheckedUpdateManyWithoutInitiatorInputSchema)])
}).strict();
const InvestmentUpsertWithWhereUniqueWithoutInvestorInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereUniqueInputSchema),
  update: z.union([z.lazy(() => InvestmentUpdateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedUpdateWithoutInvestorInputSchema)]),
  create: z.union([z.lazy(() => InvestmentCreateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutInvestorInputSchema)])
}).strict();
const InvestmentUpdateWithWhereUniqueWithoutInvestorInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereUniqueInputSchema),
  data: z.union([z.lazy(() => InvestmentUpdateWithoutInvestorInputSchema), z.lazy(() => InvestmentUncheckedUpdateWithoutInvestorInputSchema)])
}).strict();
const InvestmentUpdateManyWithWhereWithoutInvestorInputSchema = z.object({
  where: z.lazy(() => InvestmentScalarWhereInputSchema),
  data: z.union([z.lazy(() => InvestmentUpdateManyMutationInputSchema), z.lazy(() => InvestmentUncheckedUpdateManyWithoutInvestorInputSchema)])
}).strict();
const UserCreateWithoutCreatedJointAccountRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutCreatedJointAccountRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutCreatedJointAccountRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountRequestsInputSchema)])
}).strict();
const UserCreateWithoutReceivedJointAccountRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutReceivedJointAccountRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutReceivedJointAccountRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutReceivedJointAccountRequestsInputSchema)])
}).strict();
const FinancialAccountCreateWithoutJointAccountRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutJointAccountRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutJointAccountRequestsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountRequestsInputSchema)])
}).strict();
const UserUpsertWithoutCreatedJointAccountRequestsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedJointAccountRequestsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountRequestsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutCreatedJointAccountRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutCreatedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedJointAccountRequestsInputSchema)])
}).strict();
const UserUpdateWithoutCreatedJointAccountRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutCreatedJointAccountRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUpsertWithoutReceivedJointAccountRequestsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutReceivedJointAccountRequestsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutReceivedJointAccountRequestsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutReceivedJointAccountRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutReceivedJointAccountRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutReceivedJointAccountRequestsInputSchema)])
}).strict();
const UserUpdateWithoutReceivedJointAccountRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutReceivedJointAccountRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const FinancialAccountUpsertWithoutJointAccountRequestsInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutJointAccountRequestsInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountRequestsInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutJointAccountRequestsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutJointAccountRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutJointAccountRequestsInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutJointAccountRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutJointAccountRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const UserCreateWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountModRequestsInputSchema)])
}).strict();
const FinancialAccountCreateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountModRequestsInputSchema)])
}).strict();
const TransactionCreateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  initiator: z.lazy(() => AccountUserCreateNestedOneWithoutTransactionsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutTransactionsInputSchema),
  recipientAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema).optional(),
  investment: z.lazy(() => InvestmentCreateNestedOneWithoutTransactionsInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionCreateNestedOneWithoutChildTransactionsInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUncheckedCreateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionCreateOrConnectWithoutJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => TransactionCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutJointAccountModRequestsInputSchema)])
}).strict();
const JointAccountModRequestApprovalCreateWithoutRequestInputSchema = z.object({
  id: z.string().uuid().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  approver: z.lazy(() => UserCreateNestedOneWithoutApprovedJointAccountModRequestsInputSchema)
}).strict();
const JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema = z.object({
  id: z.string().uuid().optional(),
  approverId: z.string(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestApprovalCreateOrConnectWithoutRequestInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema)])
}).strict();
const JointAccountModRequestApprovalCreateManyRequestInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountModRequestApprovalCreateManyRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalCreateManyRequestInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const UserUpsertWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedJointAccountModRequestsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutCreatedJointAccountModRequestsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutCreatedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutCreatedJointAccountModRequestsInputSchema)])
}).strict();
const UserUpdateWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutCreatedJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const FinancialAccountUpsertWithoutJointAccountModRequestsInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutJointAccountModRequestsInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutJointAccountModRequestsInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutJointAccountModRequestsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutJointAccountModRequestsInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const TransactionUpsertWithoutJointAccountModRequestsInputSchema = z.object({
  update: z.union([z.lazy(() => TransactionUpdateWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutJointAccountModRequestsInputSchema)]),
  create: z.union([z.lazy(() => TransactionCreateWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutJointAccountModRequestsInputSchema)]),
  where: z.lazy(() => TransactionWhereInputSchema).optional()
}).strict();
const TransactionUpdateToOneWithWhereWithoutJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => TransactionWhereInputSchema).optional(),
  data: z.union([z.lazy(() => TransactionUpdateWithoutJointAccountModRequestsInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutJointAccountModRequestsInputSchema)])
}).strict();
const TransactionUpdateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  initiator: z.lazy(() => AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema).optional(),
  investment: z.lazy(() => InvestmentUpdateOneWithoutTransactionsNestedInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionUpdateOneWithoutChildTransactionsNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateWithoutJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalUpsertWithWhereUniqueWithoutRequestInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateWithoutRequestInputSchema)]),
  create: z.union([z.lazy(() => JointAccountModRequestApprovalCreateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedCreateWithoutRequestInputSchema)])
}).strict();
const JointAccountModRequestApprovalUpdateWithWhereUniqueWithoutRequestInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateWithoutRequestInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateWithoutRequestInputSchema)])
}).strict();
const JointAccountModRequestApprovalUpdateManyWithWhereWithoutRequestInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestApprovalScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestApprovalUpdateManyMutationInputSchema), z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutRequestInputSchema)])
}).strict();
const JointAccountModRequestCreateWithoutApprovalsInputSchema = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedJointAccountModRequestsInputSchema),
  account: z.lazy(() => FinancialAccountCreateNestedOneWithoutJointAccountModRequestsInputSchema),
  transaction: z.lazy(() => TransactionCreateNestedOneWithoutJointAccountModRequestsInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedCreateWithoutApprovalsInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  financialAccountId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  transactionId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestCreateOrConnectWithoutApprovalsInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutApprovalsInputSchema)])
}).strict();
const UserCreateWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutApprovedJointAccountModRequestsInputSchema)])
}).strict();
const JointAccountModRequestUpsertWithoutApprovalsInputSchema = z.object({
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutApprovalsInputSchema)]),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutApprovalsInputSchema)]),
  where: z.lazy(() => JointAccountModRequestWhereInputSchema).optional()
}).strict();
const JointAccountModRequestUpdateToOneWithWhereWithoutApprovalsInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereInputSchema).optional(),
  data: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutApprovalsInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutApprovalsInputSchema)])
}).strict();
const JointAccountModRequestUpdateWithoutApprovalsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedJointAccountModRequestsNestedInputSchema).optional(),
  account: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutJointAccountModRequestsNestedInputSchema).optional(),
  transaction: z.lazy(() => TransactionUpdateOneWithoutJointAccountModRequestsNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateWithoutApprovalsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  transactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const UserUpsertWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutApprovedJointAccountModRequestsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedCreateWithoutApprovedJointAccountModRequestsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutApprovedJointAccountModRequestsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutApprovedJointAccountModRequestsInputSchema)])
}).strict();
const UserUpdateWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutApprovedJointAccountModRequestsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();
const AccountUserCreateWithoutInvestmentsInputSchema = z.object({
  id: z.string().uuid().optional(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountMembershipsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutAccountUsersInputSchema),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutInitiatorInputSchema).optional()
}).strict();
const AccountUserUncheckedCreateWithoutInvestmentsInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  financialAccountId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutInitiatorInputSchema).optional()
}).strict();
const AccountUserCreateOrConnectWithoutInvestmentsInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => AccountUserCreateWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutInvestmentsInputSchema)])
}).strict();
const TransactionCreateWithoutInvestmentInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  initiator: z.lazy(() => AccountUserCreateNestedOneWithoutTransactionsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutTransactionsInputSchema),
  recipientAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionCreateNestedOneWithoutChildTransactionsInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUncheckedCreateWithoutInvestmentInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionCreateOrConnectWithoutInvestmentInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => TransactionCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema)])
}).strict();
const TransactionCreateManyInvestmentInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => TransactionCreateManyInvestmentInputSchema), z.lazy(() => TransactionCreateManyInvestmentInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const FinancialAccountCreateWithoutInvestmentsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutInvestmentsInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutInvestmentsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutInvestmentsInputSchema)])
}).strict();
const AccountUserUpsertWithoutInvestmentsInputSchema = z.object({
  update: z.union([z.lazy(() => AccountUserUpdateWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutInvestmentsInputSchema)]),
  create: z.union([z.lazy(() => AccountUserCreateWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutInvestmentsInputSchema)]),
  where: z.lazy(() => AccountUserWhereInputSchema).optional()
}).strict();
const AccountUserUpdateToOneWithWhereWithoutInvestmentsInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => AccountUserUpdateWithoutInvestmentsInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutInvestmentsInputSchema)])
}).strict();
const AccountUserUpdateWithoutInvestmentsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountMembershipsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutInitiatorNestedInputSchema).optional()
}).strict();
const AccountUserUncheckedUpdateWithoutInvestmentsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutInitiatorNestedInputSchema).optional()
}).strict();
const TransactionUpsertWithWhereUniqueWithoutInvestmentInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  update: z.union([z.lazy(() => TransactionUpdateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutInvestmentInputSchema)]),
  create: z.union([z.lazy(() => TransactionCreateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutInvestmentInputSchema)])
}).strict();
const TransactionUpdateWithWhereUniqueWithoutInvestmentInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateWithoutInvestmentInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutInvestmentInputSchema)])
}).strict();
const TransactionUpdateManyWithWhereWithoutInvestmentInputSchema = z.object({
  where: z.lazy(() => TransactionScalarWhereInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateManyMutationInputSchema), z.lazy(() => TransactionUncheckedUpdateManyWithoutInvestmentInputSchema)])
}).strict();
const FinancialAccountUpsertWithoutInvestmentsInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutInvestmentsInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutInvestmentsInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutInvestmentsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutInvestmentsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutInvestmentsInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutInvestmentsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutInvestmentsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional()
}).strict();
const AccountUserCreateWithoutTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountMembershipsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutAccountUsersInputSchema),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserUncheckedCreateWithoutTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  financialAccountId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutInvestorInputSchema).optional()
}).strict();
const AccountUserCreateOrConnectWithoutTransactionsInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => AccountUserCreateWithoutTransactionsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutTransactionsInputSchema)])
}).strict();
const FinancialAccountCreateWithoutTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutTransactionsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutTransactionsInputSchema)])
}).strict();
const FinancialAccountCreateWithoutReceivedTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutReceivedTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutReceivedTransactionsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutReceivedTransactionsInputSchema)])
}).strict();
const InvestmentCreateWithoutTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  investor: z.lazy(() => AccountUserCreateNestedOneWithoutInvestmentsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutInvestmentsInputSchema)
}).strict();
const InvestmentUncheckedCreateWithoutTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  investorId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const InvestmentCreateOrConnectWithoutTransactionsInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereUniqueInputSchema),
  create: z.union([z.lazy(() => InvestmentCreateWithoutTransactionsInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutTransactionsInputSchema)])
}).strict();
const JointAccountModRequestCreateWithoutTransactionInputSchema = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedJointAccountModRequestsInputSchema),
  account: z.lazy(() => FinancialAccountCreateNestedOneWithoutJointAccountModRequestsInputSchema),
  approvals: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  financialAccountId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutRequestInputSchema).optional()
}).strict();
const JointAccountModRequestCreateOrConnectWithoutTransactionInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema)])
}).strict();
const JointAccountModRequestCreateManyTransactionInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => JointAccountModRequestCreateManyTransactionInputSchema), z.lazy(() => JointAccountModRequestCreateManyTransactionInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const TransactionCreateWithoutChildTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  initiator: z.lazy(() => AccountUserCreateNestedOneWithoutTransactionsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutTransactionsInputSchema),
  recipientAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema).optional(),
  investment: z.lazy(() => InvestmentCreateNestedOneWithoutTransactionsInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionCreateNestedOneWithoutChildTransactionsInputSchema).optional()
}).strict();
const TransactionUncheckedCreateWithoutChildTransactionsInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema).optional()
}).strict();
const TransactionCreateOrConnectWithoutChildTransactionsInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => TransactionCreateWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutChildTransactionsInputSchema)])
}).strict();
const TransactionCreateWithoutParentTransactionInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  initiator: z.lazy(() => AccountUserCreateNestedOneWithoutTransactionsInputSchema),
  financialAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutTransactionsInputSchema),
  recipientAccount: z.lazy(() => FinancialAccountCreateNestedOneWithoutReceivedTransactionsInputSchema).optional(),
  investment: z.lazy(() => InvestmentCreateNestedOneWithoutTransactionsInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutTransactionInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionUncheckedCreateWithoutParentTransactionInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutTransactionInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutParentTransactionInputSchema).optional()
}).strict();
const TransactionCreateOrConnectWithoutParentTransactionInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  create: z.union([z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema)])
}).strict();
const TransactionCreateManyParentTransactionInputEnvelopeSchema = z.object({
  data: z.union([z.lazy(() => TransactionCreateManyParentTransactionInputSchema), z.lazy(() => TransactionCreateManyParentTransactionInputSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
const AccountUserUpsertWithoutTransactionsInputSchema = z.object({
  update: z.union([z.lazy(() => AccountUserUpdateWithoutTransactionsInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutTransactionsInputSchema)]),
  create: z.union([z.lazy(() => AccountUserCreateWithoutTransactionsInputSchema), z.lazy(() => AccountUserUncheckedCreateWithoutTransactionsInputSchema)]),
  where: z.lazy(() => AccountUserWhereInputSchema).optional()
}).strict();
const AccountUserUpdateToOneWithWhereWithoutTransactionsInputSchema = z.object({
  where: z.lazy(() => AccountUserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => AccountUserUpdateWithoutTransactionsInputSchema), z.lazy(() => AccountUserUncheckedUpdateWithoutTransactionsInputSchema)])
}).strict();
const AccountUserUpdateWithoutTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountMembershipsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const AccountUserUncheckedUpdateWithoutTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const FinancialAccountUpsertWithoutTransactionsInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutTransactionsInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutTransactionsInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutTransactionsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutTransactionsInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUpsertWithoutReceivedTransactionsInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutReceivedTransactionsInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutReceivedTransactionsInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutReceivedTransactionsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutReceivedTransactionsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutReceivedTransactionsInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutReceivedTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutReceivedTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const InvestmentUpsertWithoutTransactionsInputSchema = z.object({
  update: z.union([z.lazy(() => InvestmentUpdateWithoutTransactionsInputSchema), z.lazy(() => InvestmentUncheckedUpdateWithoutTransactionsInputSchema)]),
  create: z.union([z.lazy(() => InvestmentCreateWithoutTransactionsInputSchema), z.lazy(() => InvestmentUncheckedCreateWithoutTransactionsInputSchema)]),
  where: z.lazy(() => InvestmentWhereInputSchema).optional()
}).strict();
const InvestmentUpdateToOneWithWhereWithoutTransactionsInputSchema = z.object({
  where: z.lazy(() => InvestmentWhereInputSchema).optional(),
  data: z.union([z.lazy(() => InvestmentUpdateWithoutTransactionsInputSchema), z.lazy(() => InvestmentUncheckedUpdateWithoutTransactionsInputSchema)])
}).strict();
const InvestmentUpdateWithoutTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  investor: z.lazy(() => AccountUserUpdateOneRequiredWithoutInvestmentsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutInvestmentsNestedInputSchema).optional()
}).strict();
const InvestmentUncheckedUpdateWithoutTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  investorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestUpsertWithWhereUniqueWithoutTransactionInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  update: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutTransactionInputSchema)]),
  create: z.union([z.lazy(() => JointAccountModRequestCreateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedCreateWithoutTransactionInputSchema)])
}).strict();
const JointAccountModRequestUpdateWithWhereUniqueWithoutTransactionInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestWhereUniqueInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestUpdateWithoutTransactionInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateWithoutTransactionInputSchema)])
}).strict();
const JointAccountModRequestUpdateManyWithWhereWithoutTransactionInputSchema = z.object({
  where: z.lazy(() => JointAccountModRequestScalarWhereInputSchema),
  data: z.union([z.lazy(() => JointAccountModRequestUpdateManyMutationInputSchema), z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionInputSchema)])
}).strict();
const TransactionUpsertWithoutChildTransactionsInputSchema = z.object({
  update: z.union([z.lazy(() => TransactionUpdateWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutChildTransactionsInputSchema)]),
  create: z.union([z.lazy(() => TransactionCreateWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutChildTransactionsInputSchema)]),
  where: z.lazy(() => TransactionWhereInputSchema).optional()
}).strict();
const TransactionUpdateToOneWithWhereWithoutChildTransactionsInputSchema = z.object({
  where: z.lazy(() => TransactionWhereInputSchema).optional(),
  data: z.union([z.lazy(() => TransactionUpdateWithoutChildTransactionsInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutChildTransactionsInputSchema)])
}).strict();
const TransactionUpdateWithoutChildTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  initiator: z.lazy(() => AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema).optional(),
  investment: z.lazy(() => InvestmentUpdateOneWithoutTransactionsNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionUpdateOneWithoutChildTransactionsNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateWithoutChildTransactionsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema).optional()
}).strict();
const TransactionUpsertWithWhereUniqueWithoutParentTransactionInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  update: z.union([z.lazy(() => TransactionUpdateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutParentTransactionInputSchema)]),
  create: z.union([z.lazy(() => TransactionCreateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedCreateWithoutParentTransactionInputSchema)])
}).strict();
const TransactionUpdateWithWhereUniqueWithoutParentTransactionInputSchema = z.object({
  where: z.lazy(() => TransactionWhereUniqueInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateWithoutParentTransactionInputSchema), z.lazy(() => TransactionUncheckedUpdateWithoutParentTransactionInputSchema)])
}).strict();
const TransactionUpdateManyWithWhereWithoutParentTransactionInputSchema = z.object({
  where: z.lazy(() => TransactionScalarWhereInputSchema),
  data: z.union([z.lazy(() => TransactionUpdateManyMutationInputSchema), z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionInputSchema)])
}).strict();
const UserCreateWithoutNotificationsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutCreatorInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserUncheckedCreateWithoutNotificationsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  role: z.lazy(() => UserRoleSchema).optional(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutRecipientInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedCreateNestedManyWithoutApproverInputSchema).optional()
}).strict();
const UserCreateOrConnectWithoutNotificationsInputSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([z.lazy(() => UserCreateWithoutNotificationsInputSchema), z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema)])
}).strict();
const FinancialAccountCreateWithoutNotificationsInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedAccountsInputSchema),
  businessProfile: z.lazy(() => BusinessProfileCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestCreateNestedManyWithoutAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountUncheckedCreateWithoutNotificationsInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedCreateNestedOneWithoutAccountInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedCreateNestedManyWithoutRecipientAccountInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInputSchema).optional()
}).strict();
const FinancialAccountCreateOrConnectWithoutNotificationsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereUniqueInputSchema),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutNotificationsInputSchema)])
}).strict();
const UserUpsertWithoutNotificationsInputSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutNotificationsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutNotificationsInputSchema), z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema)]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();
const UserUpdateToOneWithWhereWithoutNotificationsInputSchema = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutNotificationsInputSchema), z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema)])
}).strict();
const UserUpdateWithoutNotificationsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutCreatorNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const UserUncheckedUpdateWithoutNotificationsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  role: z.union([z.lazy(() => UserRoleSchema), z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  banExpires: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  profile: z.lazy(() => ProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdAccounts: z.lazy(() => FinancialAccountUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  accountMemberships: z.lazy(() => AccountUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  receivedJointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutRecipientNestedInputSchema).optional(),
  createdJointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  approvedJointAccountModRequests: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverNestedInputSchema).optional()
}).strict();
const FinancialAccountUpsertWithoutNotificationsInputSchema = z.object({
  update: z.union([z.lazy(() => FinancialAccountUpdateWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutNotificationsInputSchema)]),
  create: z.union([z.lazy(() => FinancialAccountCreateWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUncheckedCreateWithoutNotificationsInputSchema)]),
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional()
}).strict();
const FinancialAccountUpdateToOneWithWhereWithoutNotificationsInputSchema = z.object({
  where: z.lazy(() => FinancialAccountWhereInputSchema).optional(),
  data: z.union([z.lazy(() => FinancialAccountUpdateWithoutNotificationsInputSchema), z.lazy(() => FinancialAccountUncheckedUpdateWithoutNotificationsInputSchema)])
}).strict();
const FinancialAccountUpdateWithoutNotificationsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedAccountsNestedInputSchema).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutNotificationsInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const SessionCreateManyUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountCreateManyUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const FinancialAccountCreateManyCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  number: z.string(),
  status: z.lazy(() => AccountStatusSchema).optional(),
  type: z.lazy(() => AccountTypeSchema).optional(),
  ownership: z.lazy(() => AccountOwnershipSchema).optional(),
  balance: z.number().optional(),
  totalTransactions: z.number().int().optional(),
  totalInvestments: z.number().int().optional(),
  firstTransactionAt: z.coerce.date().optional().nullable(),
  lastTransactionAt: z.coerce.date().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  dormantAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountUserCreateManyUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestCreateManyCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  recipientId: z.string().optional().nullable(),
  financialAccountId: z.string(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestCreateManyRecipientInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  financialAccountId: z.string(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestCreateManyCreatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  transactionId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const NotificationCreateManyUserInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  financialAccountId: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestApprovalCreateManyApproverInputSchema = z.object({
  id: z.string().uuid().optional(),
  jointAccountModRequestId: z.string(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const SessionUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SessionUncheckedUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const SessionUncheckedUpdateManyWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUncheckedUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUncheckedUpdateManyWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const FinancialAccountUpdateWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  businessProfile: z.lazy(() => BusinessProfileUncheckedUpdateOneWithoutAccountNestedInputSchema).optional(),
  accountUsers: z.lazy(() => AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountRequests: z.lazy(() => JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional(),
  receivedTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutRecipientAccountNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInputSchema).optional()
}).strict();
const FinancialAccountUncheckedUpdateManyWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => AccountStatusSchema), z.lazy(() => EnumAccountStatusFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => AccountTypeSchema), z.lazy(() => EnumAccountTypeFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.lazy(() => AccountOwnershipSchema), z.lazy(() => EnumAccountOwnershipFieldUpdateOperationsInputSchema)]).optional(),
  balance: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  totalTransactions: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalInvestments: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  firstTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastTransactionAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  dormantAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUserUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutInitiatorNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const AccountUserUncheckedUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutInitiatorNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const AccountUserUncheckedUpdateManyWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestUpdateWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipient: z.lazy(() => UserUpdateOneWithoutReceivedJointAccountRequestsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutJointAccountRequestsNestedInputSchema).optional()
}).strict();
const JointAccountRequestUncheckedUpdateWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipientId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestUncheckedUpdateManyWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipientId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestUpdateWithoutRecipientInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedJointAccountRequestsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutJointAccountRequestsNestedInputSchema).optional()
}).strict();
const JointAccountRequestUncheckedUpdateWithoutRecipientInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestUncheckedUpdateManyWithoutRecipientInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestUpdateWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  account: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutJointAccountModRequestsNestedInputSchema).optional(),
  transaction: z.lazy(() => TransactionUpdateOneWithoutJointAccountModRequestsNestedInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  transactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateManyWithoutCreatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  transactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const NotificationUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneWithoutNotificationsNestedInputSchema).optional()
}).strict();
const NotificationUncheckedUpdateWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const NotificationUncheckedUpdateManyWithoutUserInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalUpdateWithoutApproverInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  request: z.lazy(() => JointAccountModRequestUpdateOneRequiredWithoutApprovalsNestedInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateWithoutApproverInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequestId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateManyWithoutApproverInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequestId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const AccountUserCreateManyFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  role: z.lazy(() => AccountUserRoleSchema).optional(),
  ownership: z.number().optional(),
  autosign: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountRequestCreateManyFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  recipientName: z.string(),
  recipientEmail: z.string(),
  role: z.lazy(() => AccountUserRoleSchema),
  ownership: z.number(),
  recipientId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  lastReminderAt: z.coerce.date().optional().nullable(),
  reminderCount: z.number().int().optional(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestCreateManyAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  transactionId: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const NotificationCreateManyFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  title: z.string(),
  body: z.string(),
  bodyType: z.lazy(() => NotificationBodyTypeSchema).optional(),
  userId: z.string().optional().nullable(),
  link: z.string().optional().nullable(),
  isRead: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const TransactionCreateManyFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const TransactionCreateManyRecipientAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const InvestmentCreateManyFinancialAccountInputSchema = z.object({
  id: z.string().uuid().optional(),
  investorId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const AccountUserUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountMembershipsNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutInitiatorNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const AccountUserUncheckedUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutInitiatorNestedInputSchema).optional(),
  investments: z.lazy(() => InvestmentUncheckedUpdateManyWithoutInvestorNestedInputSchema).optional()
}).strict();
const AccountUserUncheckedUpdateManyWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  autosign: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedJointAccountRequestsNestedInputSchema).optional(),
  recipient: z.lazy(() => UserUpdateOneWithoutReceivedJointAccountRequestsNestedInputSchema).optional()
}).strict();
const JointAccountRequestUncheckedUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipientId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountRequestUncheckedUpdateManyWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientEmail: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  role: z.union([z.lazy(() => AccountUserRoleSchema), z.lazy(() => EnumAccountUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  ownership: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipientId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastReminderAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  reminderCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestUpdateWithoutAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedJointAccountModRequestsNestedInputSchema).optional(),
  transaction: z.lazy(() => TransactionUpdateOneWithoutJointAccountModRequestsNestedInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateWithoutAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  transactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateManyWithoutAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  transactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const NotificationUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutNotificationsNestedInputSchema).optional()
}).strict();
const NotificationUncheckedUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const NotificationUncheckedUpdateManyWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  title: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  body: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  bodyType: z.union([z.lazy(() => NotificationBodyTypeSchema), z.lazy(() => EnumNotificationBodyTypeFieldUpdateOperationsInputSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  link: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isRead: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const TransactionUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  initiator: z.lazy(() => AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema).optional(),
  investment: z.lazy(() => InvestmentUpdateOneWithoutTransactionsNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionUpdateOneWithoutChildTransactionsNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const TransactionUpdateWithoutRecipientAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  initiator: z.lazy(() => AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  investment: z.lazy(() => InvestmentUpdateOneWithoutTransactionsNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionUpdateOneWithoutChildTransactionsNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateWithoutRecipientAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutRecipientAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  investor: z.lazy(() => AccountUserUpdateOneRequiredWithoutInvestmentsNestedInputSchema).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutInvestmentNestedInputSchema).optional()
}).strict();
const InvestmentUncheckedUpdateWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  investorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutInvestmentNestedInputSchema).optional()
}).strict();
const InvestmentUncheckedUpdateManyWithoutFinancialAccountInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  investorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const TransactionCreateManyInitiatorInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const InvestmentCreateManyInvestorInputSchema = z.object({
  id: z.string().uuid().optional(),
  financialAccountId: z.string(),
  deposit: z.number(),
  investmentName: z.string(),
  totalProfit: z.number().optional(),
  profitCount: z.number().int().optional(),
  status: z.lazy(() => InvestmentStatusSchema).optional(),
  pausedAt: z.coerce.date().optional().nullable(),
  pausedReason: z.string().optional().nullable(),
  closedAt: z.coerce.date().optional().nullable(),
  closedReason: z.string().optional().nullable(),
  terminatedAt: z.coerce.date().optional().nullable(),
  terminatedReason: z.string().optional().nullable(),
  category: z.lazy(() => InvestmentPlanCategorySchema),
  daysCompleted: z.number().int().optional(),
  duration: z.number().int(),
  totalReturn: z.number(),
  periodicReturn: z.number(),
  profitDistribution: z.lazy(() => ProfitDistributionSchema).optional(),
  terminationFee: z.number().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const TransactionUpdateWithoutInitiatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema).optional(),
  investment: z.lazy(() => InvestmentUpdateOneWithoutTransactionsNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionUpdateOneWithoutChildTransactionsNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateWithoutInitiatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutInitiatorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const InvestmentUpdateWithoutInvestorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUpdateManyWithoutInvestmentNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutInvestmentsNestedInputSchema).optional()
}).strict();
const InvestmentUncheckedUpdateWithoutInvestorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  transactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutInvestmentNestedInputSchema).optional()
}).strict();
const InvestmentUncheckedUpdateManyWithoutInvestorInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  deposit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  investmentName: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  totalProfit: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitCount: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => InvestmentStatusSchema), z.lazy(() => EnumInvestmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  pausedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  pausedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  closedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  terminatedReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z.union([z.lazy(() => InvestmentPlanCategorySchema), z.lazy(() => EnumInvestmentPlanCategoryFieldUpdateOperationsInputSchema)]).optional(),
  daysCompleted: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  duration: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  totalReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  periodicReturn: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  profitDistribution: z.union([z.lazy(() => ProfitDistributionSchema), z.lazy(() => EnumProfitDistributionFieldUpdateOperationsInputSchema)]).optional(),
  terminationFee: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalCreateManyRequestInputSchema = z.object({
  id: z.string().uuid().optional(),
  approverId: z.string(),
  status: z.lazy(() => JointAccountRequestStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestApprovalUpdateWithoutRequestInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  approver: z.lazy(() => UserUpdateOneRequiredWithoutApprovedJointAccountModRequestsNestedInputSchema).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateWithoutRequestInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  approverId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestApprovalUncheckedUpdateManyWithoutRequestInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  approverId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => JointAccountRequestStatusSchema), z.lazy(() => EnumJointAccountRequestStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const TransactionCreateManyInvestmentInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  parentTransactionId: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const TransactionUpdateWithoutInvestmentInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  initiator: z.lazy(() => AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema).optional(),
  parentTransaction: z.lazy(() => TransactionUpdateOneWithoutChildTransactionsNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateWithoutInvestmentInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutInvestmentInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  parentTransactionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const JointAccountModRequestCreateManyTransactionInputSchema = z.object({
  id: z.string().uuid().optional(),
  creatorId: z.string(),
  financialAccountId: z.string(),
  type: z.lazy(() => JointAccountModRequestTypeSchema),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const TransactionCreateManyParentTransactionInputSchema = z.object({
  id: z.string().uuid().optional(),
  amount: z.number(),
  currency: z.string().optional(),
  USDAmount: z.number(),
  rate: z.number().optional(),
  charges: z.number().optional(),
  financialAccountId: z.string(),
  type: z.lazy(() => TransactionTypeSchema),
  initiatorAccountId: z.string(),
  recipientAccountId: z.string().optional().nullable(),
  investmentId: z.string().optional().nullable(),
  status: z.lazy(() => TransactionStatusSchema).optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  failedAt: z.coerce.date().optional().nullable(),
  failReason: z.string().optional().nullable(),
  depositWalletAddress: z.string().optional().nullable(),
  depositWalletAddressNetwork: z.string().optional().nullable(),
  withdrawalWalletAddress: z.string().optional().nullable(),
  withdrawalWalletAddressNetwork: z.string().optional().nullable(),
  bank: z.string().optional().nullable(),
  bankAccount: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();
const JointAccountModRequestUpdateWithoutTransactionInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedJointAccountModRequestsNestedInputSchema).optional(),
  account: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutJointAccountModRequestsNestedInputSchema).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateWithoutTransactionInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  approvals: z.lazy(() => JointAccountModRequestApprovalUncheckedUpdateManyWithoutRequestNestedInputSchema).optional()
}).strict();
const JointAccountModRequestUncheckedUpdateManyWithoutTransactionInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  creatorId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => JointAccountModRequestTypeSchema), z.lazy(() => EnumJointAccountModRequestTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
const TransactionUpdateWithoutParentTransactionInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  initiator: z.lazy(() => AccountUserUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  financialAccount: z.lazy(() => FinancialAccountUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  recipientAccount: z.lazy(() => FinancialAccountUpdateOneWithoutReceivedTransactionsNestedInputSchema).optional(),
  investment: z.lazy(() => InvestmentUpdateOneWithoutTransactionsNestedInputSchema).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUpdateManyWithoutTransactionNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateWithoutParentTransactionInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  jointAccountModRequests: z.lazy(() => JointAccountModRequestUncheckedUpdateManyWithoutTransactionNestedInputSchema).optional(),
  childTransactions: z.lazy(() => TransactionUncheckedUpdateManyWithoutParentTransactionNestedInputSchema).optional()
}).strict();
const TransactionUncheckedUpdateManyWithoutParentTransactionInputSchema = z.object({
  id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  amount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  currency: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  USDAmount: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  rate: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  charges: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  financialAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  type: z.union([z.lazy(() => TransactionTypeSchema), z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema)]).optional(),
  initiatorAccountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipientAccountId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  investmentId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z.union([z.lazy(() => TransactionStatusSchema), z.lazy(() => EnumTransactionStatusFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failedAt: z.union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  failReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  depositWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  withdrawalWalletAddressNetwork: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bank: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  bankAccount: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  description: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([UserOrderByWithAggregationInputSchema.array(), UserOrderByWithAggregationInputSchema]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
const SessionFindManyArgsSchema = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([SessionOrderByWithAggregationInputSchema.array(), SessionOrderByWithAggregationInputSchema]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([AccountOrderByWithRelationInputSchema.array(), AccountOrderByWithRelationInputSchema]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([AccountScalarFieldEnumSchema, AccountScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([AccountOrderByWithRelationInputSchema.array(), AccountOrderByWithRelationInputSchema]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([AccountScalarFieldEnumSchema, AccountScalarFieldEnumSchema.array()]).optional()
}).strict();
const AccountFindManyArgsSchema = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([AccountOrderByWithRelationInputSchema.array(), AccountOrderByWithRelationInputSchema]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([AccountScalarFieldEnumSchema, AccountScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([AccountOrderByWithRelationInputSchema.array(), AccountOrderByWithRelationInputSchema]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([AccountOrderByWithAggregationInputSchema.array(), AccountOrderByWithAggregationInputSchema]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([VerificationOrderByWithRelationInputSchema.array(), VerificationOrderByWithRelationInputSchema]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([VerificationScalarFieldEnumSchema, VerificationScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([VerificationOrderByWithRelationInputSchema.array(), VerificationOrderByWithRelationInputSchema]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([VerificationScalarFieldEnumSchema, VerificationScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([VerificationOrderByWithRelationInputSchema.array(), VerificationOrderByWithRelationInputSchema]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([VerificationScalarFieldEnumSchema, VerificationScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([VerificationOrderByWithRelationInputSchema.array(), VerificationOrderByWithRelationInputSchema]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([VerificationOrderByWithAggregationInputSchema.array(), VerificationOrderByWithAggregationInputSchema]).optional(),
  by: VerificationScalarFieldEnumSchema.array(),
  having: VerificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ProfileOrderByWithRelationInputSchema.array(), ProfileOrderByWithRelationInputSchema]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ProfileScalarFieldEnumSchema, ProfileScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ProfileOrderByWithRelationInputSchema.array(), ProfileOrderByWithRelationInputSchema]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ProfileScalarFieldEnumSchema, ProfileScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ProfileOrderByWithRelationInputSchema.array(), ProfileOrderByWithRelationInputSchema]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ProfileScalarFieldEnumSchema, ProfileScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ProfileOrderByWithRelationInputSchema.array(), ProfileOrderByWithRelationInputSchema]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ProfileOrderByWithAggregationInputSchema.array(), ProfileOrderByWithAggregationInputSchema]).optional(),
  by: ProfileScalarFieldEnumSchema.array(),
  having: ProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  where: BusinessProfileWhereInputSchema.optional(),
  orderBy: z.union([BusinessProfileOrderByWithRelationInputSchema.array(), BusinessProfileOrderByWithRelationInputSchema]).optional(),
  cursor: BusinessProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([BusinessProfileScalarFieldEnumSchema, BusinessProfileScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  where: BusinessProfileWhereInputSchema.optional(),
  orderBy: z.union([BusinessProfileOrderByWithRelationInputSchema.array(), BusinessProfileOrderByWithRelationInputSchema]).optional(),
  cursor: BusinessProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([BusinessProfileScalarFieldEnumSchema, BusinessProfileScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  where: BusinessProfileWhereInputSchema.optional(),
  orderBy: z.union([BusinessProfileOrderByWithRelationInputSchema.array(), BusinessProfileOrderByWithRelationInputSchema]).optional(),
  cursor: BusinessProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([BusinessProfileScalarFieldEnumSchema, BusinessProfileScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: BusinessProfileWhereInputSchema.optional(),
  orderBy: z.union([BusinessProfileOrderByWithRelationInputSchema.array(), BusinessProfileOrderByWithRelationInputSchema]).optional(),
  cursor: BusinessProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: BusinessProfileWhereInputSchema.optional(),
  orderBy: z.union([BusinessProfileOrderByWithAggregationInputSchema.array(), BusinessProfileOrderByWithAggregationInputSchema]).optional(),
  by: BusinessProfileScalarFieldEnumSchema.array(),
  having: BusinessProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  where: BusinessProfileWhereUniqueInputSchema
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  where: BusinessProfileWhereUniqueInputSchema
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  where: FinancialAccountWhereInputSchema.optional(),
  orderBy: z.union([FinancialAccountOrderByWithRelationInputSchema.array(), FinancialAccountOrderByWithRelationInputSchema]).optional(),
  cursor: FinancialAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([FinancialAccountScalarFieldEnumSchema, FinancialAccountScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  where: FinancialAccountWhereInputSchema.optional(),
  orderBy: z.union([FinancialAccountOrderByWithRelationInputSchema.array(), FinancialAccountOrderByWithRelationInputSchema]).optional(),
  cursor: FinancialAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([FinancialAccountScalarFieldEnumSchema, FinancialAccountScalarFieldEnumSchema.array()]).optional()
}).strict();
const FinancialAccountFindManyArgsSchema = z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  where: FinancialAccountWhereInputSchema.optional(),
  orderBy: z.union([FinancialAccountOrderByWithRelationInputSchema.array(), FinancialAccountOrderByWithRelationInputSchema]).optional(),
  cursor: FinancialAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([FinancialAccountScalarFieldEnumSchema, FinancialAccountScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: FinancialAccountWhereInputSchema.optional(),
  orderBy: z.union([FinancialAccountOrderByWithRelationInputSchema.array(), FinancialAccountOrderByWithRelationInputSchema]).optional(),
  cursor: FinancialAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: FinancialAccountWhereInputSchema.optional(),
  orderBy: z.union([FinancialAccountOrderByWithAggregationInputSchema.array(), FinancialAccountOrderByWithAggregationInputSchema]).optional(),
  by: FinancialAccountScalarFieldEnumSchema.array(),
  having: FinancialAccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  where: FinancialAccountWhereUniqueInputSchema
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  where: FinancialAccountWhereUniqueInputSchema
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  where: AccountUserWhereInputSchema.optional(),
  orderBy: z.union([AccountUserOrderByWithRelationInputSchema.array(), AccountUserOrderByWithRelationInputSchema]).optional(),
  cursor: AccountUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([AccountUserScalarFieldEnumSchema, AccountUserScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  where: AccountUserWhereInputSchema.optional(),
  orderBy: z.union([AccountUserOrderByWithRelationInputSchema.array(), AccountUserOrderByWithRelationInputSchema]).optional(),
  cursor: AccountUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([AccountUserScalarFieldEnumSchema, AccountUserScalarFieldEnumSchema.array()]).optional()
}).strict();
const AccountUserFindManyArgsSchema = z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  where: AccountUserWhereInputSchema.optional(),
  orderBy: z.union([AccountUserOrderByWithRelationInputSchema.array(), AccountUserOrderByWithRelationInputSchema]).optional(),
  cursor: AccountUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([AccountUserScalarFieldEnumSchema, AccountUserScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: AccountUserWhereInputSchema.optional(),
  orderBy: z.union([AccountUserOrderByWithRelationInputSchema.array(), AccountUserOrderByWithRelationInputSchema]).optional(),
  cursor: AccountUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: AccountUserWhereInputSchema.optional(),
  orderBy: z.union([AccountUserOrderByWithAggregationInputSchema.array(), AccountUserOrderByWithAggregationInputSchema]).optional(),
  by: AccountUserScalarFieldEnumSchema.array(),
  having: AccountUserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  where: AccountUserWhereUniqueInputSchema
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  where: AccountUserWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  where: JointAccountRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountRequestOrderByWithRelationInputSchema.array(), JointAccountRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountRequestScalarFieldEnumSchema, JointAccountRequestScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  where: JointAccountRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountRequestOrderByWithRelationInputSchema.array(), JointAccountRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountRequestScalarFieldEnumSchema, JointAccountRequestScalarFieldEnumSchema.array()]).optional()
}).strict();
const JointAccountRequestFindManyArgsSchema = z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  where: JointAccountRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountRequestOrderByWithRelationInputSchema.array(), JointAccountRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountRequestScalarFieldEnumSchema, JointAccountRequestScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: JointAccountRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountRequestOrderByWithRelationInputSchema.array(), JointAccountRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: JointAccountRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountRequestOrderByWithAggregationInputSchema.array(), JointAccountRequestOrderByWithAggregationInputSchema]).optional(),
  by: JointAccountRequestScalarFieldEnumSchema.array(),
  having: JointAccountRequestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  where: JointAccountRequestWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  where: JointAccountRequestWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  where: JointAccountModRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestOrderByWithRelationInputSchema.array(), JointAccountModRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountModRequestScalarFieldEnumSchema, JointAccountModRequestScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  where: JointAccountModRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestOrderByWithRelationInputSchema.array(), JointAccountModRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountModRequestScalarFieldEnumSchema, JointAccountModRequestScalarFieldEnumSchema.array()]).optional()
}).strict();
const JointAccountModRequestFindManyArgsSchema = z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  where: JointAccountModRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestOrderByWithRelationInputSchema.array(), JointAccountModRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountModRequestScalarFieldEnumSchema, JointAccountModRequestScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: JointAccountModRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestOrderByWithRelationInputSchema.array(), JointAccountModRequestOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: JointAccountModRequestWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestOrderByWithAggregationInputSchema.array(), JointAccountModRequestOrderByWithAggregationInputSchema]).optional(),
  by: JointAccountModRequestScalarFieldEnumSchema.array(),
  having: JointAccountModRequestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  where: JointAccountModRequestWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  where: JointAccountModRequestWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestApprovalOrderByWithRelationInputSchema.array(), JointAccountModRequestApprovalOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountModRequestApprovalScalarFieldEnumSchema, JointAccountModRequestApprovalScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestApprovalOrderByWithRelationInputSchema.array(), JointAccountModRequestApprovalOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountModRequestApprovalScalarFieldEnumSchema, JointAccountModRequestApprovalScalarFieldEnumSchema.array()]).optional()
}).strict();
const JointAccountModRequestApprovalFindManyArgsSchema = z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestApprovalOrderByWithRelationInputSchema.array(), JointAccountModRequestApprovalOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([JointAccountModRequestApprovalScalarFieldEnumSchema, JointAccountModRequestApprovalScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestApprovalOrderByWithRelationInputSchema.array(), JointAccountModRequestApprovalOrderByWithRelationInputSchema]).optional(),
  cursor: JointAccountModRequestApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  orderBy: z.union([JointAccountModRequestApprovalOrderByWithAggregationInputSchema.array(), JointAccountModRequestApprovalOrderByWithAggregationInputSchema]).optional(),
  by: JointAccountModRequestApprovalScalarFieldEnumSchema.array(),
  having: JointAccountModRequestApprovalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  where: JointAccountModRequestApprovalWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  where: JointAccountModRequestApprovalWhereUniqueInputSchema
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  where: InvestmentPlanWhereInputSchema.optional(),
  orderBy: z.union([InvestmentPlanOrderByWithRelationInputSchema.array(), InvestmentPlanOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([InvestmentPlanScalarFieldEnumSchema, InvestmentPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  where: InvestmentPlanWhereInputSchema.optional(),
  orderBy: z.union([InvestmentPlanOrderByWithRelationInputSchema.array(), InvestmentPlanOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([InvestmentPlanScalarFieldEnumSchema, InvestmentPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  where: InvestmentPlanWhereInputSchema.optional(),
  orderBy: z.union([InvestmentPlanOrderByWithRelationInputSchema.array(), InvestmentPlanOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([InvestmentPlanScalarFieldEnumSchema, InvestmentPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: InvestmentPlanWhereInputSchema.optional(),
  orderBy: z.union([InvestmentPlanOrderByWithRelationInputSchema.array(), InvestmentPlanOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: InvestmentPlanWhereInputSchema.optional(),
  orderBy: z.union([InvestmentPlanOrderByWithAggregationInputSchema.array(), InvestmentPlanOrderByWithAggregationInputSchema]).optional(),
  by: InvestmentPlanScalarFieldEnumSchema.array(),
  having: InvestmentPlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  where: InvestmentPlanWhereUniqueInputSchema
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  where: InvestmentPlanWhereUniqueInputSchema
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  where: InvestmentWhereInputSchema.optional(),
  orderBy: z.union([InvestmentOrderByWithRelationInputSchema.array(), InvestmentOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([InvestmentScalarFieldEnumSchema, InvestmentScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  where: InvestmentWhereInputSchema.optional(),
  orderBy: z.union([InvestmentOrderByWithRelationInputSchema.array(), InvestmentOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([InvestmentScalarFieldEnumSchema, InvestmentScalarFieldEnumSchema.array()]).optional()
}).strict();
const InvestmentFindManyArgsSchema = z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  where: InvestmentWhereInputSchema.optional(),
  orderBy: z.union([InvestmentOrderByWithRelationInputSchema.array(), InvestmentOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([InvestmentScalarFieldEnumSchema, InvestmentScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: InvestmentWhereInputSchema.optional(),
  orderBy: z.union([InvestmentOrderByWithRelationInputSchema.array(), InvestmentOrderByWithRelationInputSchema]).optional(),
  cursor: InvestmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: InvestmentWhereInputSchema.optional(),
  orderBy: z.union([InvestmentOrderByWithAggregationInputSchema.array(), InvestmentOrderByWithAggregationInputSchema]).optional(),
  by: InvestmentScalarFieldEnumSchema.array(),
  having: InvestmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  where: InvestmentWhereUniqueInputSchema
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  where: InvestmentWhereUniqueInputSchema
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  where: TransactionWhereInputSchema.optional(),
  orderBy: z.union([TransactionOrderByWithRelationInputSchema.array(), TransactionOrderByWithRelationInputSchema]).optional(),
  cursor: TransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([TransactionScalarFieldEnumSchema, TransactionScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  where: TransactionWhereInputSchema.optional(),
  orderBy: z.union([TransactionOrderByWithRelationInputSchema.array(), TransactionOrderByWithRelationInputSchema]).optional(),
  cursor: TransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([TransactionScalarFieldEnumSchema, TransactionScalarFieldEnumSchema.array()]).optional()
}).strict();
const TransactionFindManyArgsSchema = z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  where: TransactionWhereInputSchema.optional(),
  orderBy: z.union([TransactionOrderByWithRelationInputSchema.array(), TransactionOrderByWithRelationInputSchema]).optional(),
  cursor: TransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([TransactionScalarFieldEnumSchema, TransactionScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: TransactionWhereInputSchema.optional(),
  orderBy: z.union([TransactionOrderByWithRelationInputSchema.array(), TransactionOrderByWithRelationInputSchema]).optional(),
  cursor: TransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: TransactionWhereInputSchema.optional(),
  orderBy: z.union([TransactionOrderByWithAggregationInputSchema.array(), TransactionOrderByWithAggregationInputSchema]).optional(),
  by: TransactionScalarFieldEnumSchema.array(),
  having: TransactionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  where: TransactionWhereUniqueInputSchema
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  where: TransactionWhereUniqueInputSchema
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([NotificationOrderByWithRelationInputSchema.array(), NotificationOrderByWithRelationInputSchema]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([NotificationScalarFieldEnumSchema, NotificationScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([NotificationOrderByWithRelationInputSchema.array(), NotificationOrderByWithRelationInputSchema]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([NotificationScalarFieldEnumSchema, NotificationScalarFieldEnumSchema.array()]).optional()
}).strict();
const NotificationFindManyArgsSchema = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([NotificationOrderByWithRelationInputSchema.array(), NotificationOrderByWithRelationInputSchema]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([NotificationScalarFieldEnumSchema, NotificationScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([NotificationOrderByWithRelationInputSchema.array(), NotificationOrderByWithRelationInputSchema]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([NotificationOrderByWithAggregationInputSchema.array(), NotificationOrderByWithAggregationInputSchema]).optional(),
  by: NotificationScalarFieldEnumSchema.array(),
  having: NotificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([CurrencyOrderByWithRelationInputSchema.array(), CurrencyOrderByWithRelationInputSchema]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([CurrencyScalarFieldEnumSchema, CurrencyScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([CurrencyOrderByWithRelationInputSchema.array(), CurrencyOrderByWithRelationInputSchema]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([CurrencyScalarFieldEnumSchema, CurrencyScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([CurrencyOrderByWithRelationInputSchema.array(), CurrencyOrderByWithRelationInputSchema]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([CurrencyScalarFieldEnumSchema, CurrencyScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([CurrencyOrderByWithRelationInputSchema.array(), CurrencyOrderByWithRelationInputSchema]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([CurrencyOrderByWithAggregationInputSchema.array(), CurrencyOrderByWithAggregationInputSchema]).optional(),
  by: CurrencyScalarFieldEnumSchema.array(),
  having: CurrencyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  where: CurrencyWhereUniqueInputSchema
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  where: CurrencyWhereUniqueInputSchema
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  where: SettingsWhereInputSchema.optional(),
  orderBy: z.union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema]).optional(),
  cursor: SettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([SettingsScalarFieldEnumSchema, SettingsScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  where: SettingsWhereInputSchema.optional(),
  orderBy: z.union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema]).optional(),
  cursor: SettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([SettingsScalarFieldEnumSchema, SettingsScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  where: SettingsWhereInputSchema.optional(),
  orderBy: z.union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema]).optional(),
  cursor: SettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([SettingsScalarFieldEnumSchema, SettingsScalarFieldEnumSchema.array()]).optional()
}).strict();
z.object({
  where: SettingsWhereInputSchema.optional(),
  orderBy: z.union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema]).optional(),
  cursor: SettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  where: SettingsWhereInputSchema.optional(),
  orderBy: z.union([SettingsOrderByWithAggregationInputSchema.array(), SettingsOrderByWithAggregationInputSchema]).optional(),
  by: SettingsScalarFieldEnumSchema.array(),
  having: SettingsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional()
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  where: SettingsWhereUniqueInputSchema
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  where: SettingsWhereUniqueInputSchema
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema])
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema]),
  update: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([UserCreateManyInputSchema, UserCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([UserCreateManyInputSchema, UserCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
  where: UserWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([UserUpdateManyMutationInputSchema, UserUncheckedUpdateManyInputSchema]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([UserUpdateManyMutationInputSchema, UserUncheckedUpdateManyInputSchema]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([SessionCreateInputSchema, SessionUncheckedCreateInputSchema])
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([SessionCreateInputSchema, SessionUncheckedCreateInputSchema]),
  update: z.union([SessionUpdateInputSchema, SessionUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([SessionCreateManyInputSchema, SessionCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([SessionCreateManyInputSchema, SessionCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([SessionUpdateInputSchema, SessionUncheckedUpdateInputSchema]),
  where: SessionWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([SessionUpdateManyMutationInputSchema, SessionUncheckedUpdateManyInputSchema]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([SessionUpdateManyMutationInputSchema, SessionUncheckedUpdateManyInputSchema]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([AccountCreateInputSchema, AccountUncheckedCreateInputSchema])
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([AccountCreateInputSchema, AccountUncheckedCreateInputSchema]),
  update: z.union([AccountUpdateInputSchema, AccountUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([AccountCreateManyInputSchema, AccountCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([AccountCreateManyInputSchema, AccountCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema
}).strict();
z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([AccountUpdateInputSchema, AccountUncheckedUpdateInputSchema]),
  where: AccountWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([AccountUpdateManyMutationInputSchema, AccountUncheckedUpdateManyInputSchema]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([AccountUpdateManyMutationInputSchema, AccountUncheckedUpdateManyInputSchema]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  data: z.union([VerificationCreateInputSchema, VerificationUncheckedCreateInputSchema])
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
  create: z.union([VerificationCreateInputSchema, VerificationUncheckedCreateInputSchema]),
  update: z.union([VerificationUpdateInputSchema, VerificationUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([VerificationCreateManyInputSchema, VerificationCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([VerificationCreateManyInputSchema, VerificationCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema
}).strict();
z.object({
  select: VerificationSelectSchema.optional(),
  data: z.union([VerificationUpdateInputSchema, VerificationUncheckedUpdateInputSchema]),
  where: VerificationWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([VerificationUpdateManyMutationInputSchema, VerificationUncheckedUpdateManyInputSchema]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([VerificationUpdateManyMutationInputSchema, VerificationUncheckedUpdateManyInputSchema]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ProfileCreateInputSchema, ProfileUncheckedCreateInputSchema])
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
  create: z.union([ProfileCreateInputSchema, ProfileUncheckedCreateInputSchema]),
  update: z.union([ProfileUpdateInputSchema, ProfileUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([ProfileCreateManyInputSchema, ProfileCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([ProfileCreateManyInputSchema, ProfileCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema
}).strict();
z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ProfileUpdateInputSchema, ProfileUncheckedUpdateInputSchema]),
  where: ProfileWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([ProfileUpdateManyMutationInputSchema, ProfileUncheckedUpdateManyInputSchema]),
  where: ProfileWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([ProfileUpdateManyMutationInputSchema, ProfileUncheckedUpdateManyInputSchema]),
  where: ProfileWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: ProfileWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  data: z.union([BusinessProfileCreateInputSchema, BusinessProfileUncheckedCreateInputSchema])
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  where: BusinessProfileWhereUniqueInputSchema,
  create: z.union([BusinessProfileCreateInputSchema, BusinessProfileUncheckedCreateInputSchema]),
  update: z.union([BusinessProfileUpdateInputSchema, BusinessProfileUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([BusinessProfileCreateManyInputSchema, BusinessProfileCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([BusinessProfileCreateManyInputSchema, BusinessProfileCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  where: BusinessProfileWhereUniqueInputSchema
}).strict();
z.object({
  select: BusinessProfileSelectSchema.optional(),
  include: BusinessProfileIncludeSchema.optional(),
  data: z.union([BusinessProfileUpdateInputSchema, BusinessProfileUncheckedUpdateInputSchema]),
  where: BusinessProfileWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([BusinessProfileUpdateManyMutationInputSchema, BusinessProfileUncheckedUpdateManyInputSchema]),
  where: BusinessProfileWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([BusinessProfileUpdateManyMutationInputSchema, BusinessProfileUncheckedUpdateManyInputSchema]),
  where: BusinessProfileWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: BusinessProfileWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  data: z.union([FinancialAccountCreateInputSchema, FinancialAccountUncheckedCreateInputSchema])
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  where: FinancialAccountWhereUniqueInputSchema,
  create: z.union([FinancialAccountCreateInputSchema, FinancialAccountUncheckedCreateInputSchema]),
  update: z.union([FinancialAccountUpdateInputSchema, FinancialAccountUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([FinancialAccountCreateManyInputSchema, FinancialAccountCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([FinancialAccountCreateManyInputSchema, FinancialAccountCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  where: FinancialAccountWhereUniqueInputSchema
}).strict();
z.object({
  select: FinancialAccountSelectSchema.optional(),
  include: FinancialAccountIncludeSchema.optional(),
  data: z.union([FinancialAccountUpdateInputSchema, FinancialAccountUncheckedUpdateInputSchema]),
  where: FinancialAccountWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([FinancialAccountUpdateManyMutationInputSchema, FinancialAccountUncheckedUpdateManyInputSchema]),
  where: FinancialAccountWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([FinancialAccountUpdateManyMutationInputSchema, FinancialAccountUncheckedUpdateManyInputSchema]),
  where: FinancialAccountWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: FinancialAccountWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  data: z.union([AccountUserCreateInputSchema, AccountUserUncheckedCreateInputSchema])
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  where: AccountUserWhereUniqueInputSchema,
  create: z.union([AccountUserCreateInputSchema, AccountUserUncheckedCreateInputSchema]),
  update: z.union([AccountUserUpdateInputSchema, AccountUserUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([AccountUserCreateManyInputSchema, AccountUserCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([AccountUserCreateManyInputSchema, AccountUserCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  where: AccountUserWhereUniqueInputSchema
}).strict();
z.object({
  select: AccountUserSelectSchema.optional(),
  include: AccountUserIncludeSchema.optional(),
  data: z.union([AccountUserUpdateInputSchema, AccountUserUncheckedUpdateInputSchema]),
  where: AccountUserWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([AccountUserUpdateManyMutationInputSchema, AccountUserUncheckedUpdateManyInputSchema]),
  where: AccountUserWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([AccountUserUpdateManyMutationInputSchema, AccountUserUncheckedUpdateManyInputSchema]),
  where: AccountUserWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: AccountUserWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  data: z.union([JointAccountRequestCreateInputSchema, JointAccountRequestUncheckedCreateInputSchema])
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  where: JointAccountRequestWhereUniqueInputSchema,
  create: z.union([JointAccountRequestCreateInputSchema, JointAccountRequestUncheckedCreateInputSchema]),
  update: z.union([JointAccountRequestUpdateInputSchema, JointAccountRequestUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([JointAccountRequestCreateManyInputSchema, JointAccountRequestCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([JointAccountRequestCreateManyInputSchema, JointAccountRequestCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  where: JointAccountRequestWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountRequestSelectSchema.optional(),
  include: JointAccountRequestIncludeSchema.optional(),
  data: z.union([JointAccountRequestUpdateInputSchema, JointAccountRequestUncheckedUpdateInputSchema]),
  where: JointAccountRequestWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([JointAccountRequestUpdateManyMutationInputSchema, JointAccountRequestUncheckedUpdateManyInputSchema]),
  where: JointAccountRequestWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([JointAccountRequestUpdateManyMutationInputSchema, JointAccountRequestUncheckedUpdateManyInputSchema]),
  where: JointAccountRequestWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: JointAccountRequestWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  data: z.union([JointAccountModRequestCreateInputSchema, JointAccountModRequestUncheckedCreateInputSchema])
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  where: JointAccountModRequestWhereUniqueInputSchema,
  create: z.union([JointAccountModRequestCreateInputSchema, JointAccountModRequestUncheckedCreateInputSchema]),
  update: z.union([JointAccountModRequestUpdateInputSchema, JointAccountModRequestUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([JointAccountModRequestCreateManyInputSchema, JointAccountModRequestCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([JointAccountModRequestCreateManyInputSchema, JointAccountModRequestCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  where: JointAccountModRequestWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountModRequestSelectSchema.optional(),
  include: JointAccountModRequestIncludeSchema.optional(),
  data: z.union([JointAccountModRequestUpdateInputSchema, JointAccountModRequestUncheckedUpdateInputSchema]),
  where: JointAccountModRequestWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([JointAccountModRequestUpdateManyMutationInputSchema, JointAccountModRequestUncheckedUpdateManyInputSchema]),
  where: JointAccountModRequestWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([JointAccountModRequestUpdateManyMutationInputSchema, JointAccountModRequestUncheckedUpdateManyInputSchema]),
  where: JointAccountModRequestWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: JointAccountModRequestWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  data: z.union([JointAccountModRequestApprovalCreateInputSchema, JointAccountModRequestApprovalUncheckedCreateInputSchema])
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  where: JointAccountModRequestApprovalWhereUniqueInputSchema,
  create: z.union([JointAccountModRequestApprovalCreateInputSchema, JointAccountModRequestApprovalUncheckedCreateInputSchema]),
  update: z.union([JointAccountModRequestApprovalUpdateInputSchema, JointAccountModRequestApprovalUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([JointAccountModRequestApprovalCreateManyInputSchema, JointAccountModRequestApprovalCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([JointAccountModRequestApprovalCreateManyInputSchema, JointAccountModRequestApprovalCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  where: JointAccountModRequestApprovalWhereUniqueInputSchema
}).strict();
z.object({
  select: JointAccountModRequestApprovalSelectSchema.optional(),
  include: JointAccountModRequestApprovalIncludeSchema.optional(),
  data: z.union([JointAccountModRequestApprovalUpdateInputSchema, JointAccountModRequestApprovalUncheckedUpdateInputSchema]),
  where: JointAccountModRequestApprovalWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([JointAccountModRequestApprovalUpdateManyMutationInputSchema, JointAccountModRequestApprovalUncheckedUpdateManyInputSchema]),
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([JointAccountModRequestApprovalUpdateManyMutationInputSchema, JointAccountModRequestApprovalUncheckedUpdateManyInputSchema]),
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: JointAccountModRequestApprovalWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  data: z.union([InvestmentPlanCreateInputSchema, InvestmentPlanUncheckedCreateInputSchema])
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  where: InvestmentPlanWhereUniqueInputSchema,
  create: z.union([InvestmentPlanCreateInputSchema, InvestmentPlanUncheckedCreateInputSchema]),
  update: z.union([InvestmentPlanUpdateInputSchema, InvestmentPlanUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([InvestmentPlanCreateManyInputSchema, InvestmentPlanCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([InvestmentPlanCreateManyInputSchema, InvestmentPlanCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  where: InvestmentPlanWhereUniqueInputSchema
}).strict();
z.object({
  select: InvestmentPlanSelectSchema.optional(),
  data: z.union([InvestmentPlanUpdateInputSchema, InvestmentPlanUncheckedUpdateInputSchema]),
  where: InvestmentPlanWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([InvestmentPlanUpdateManyMutationInputSchema, InvestmentPlanUncheckedUpdateManyInputSchema]),
  where: InvestmentPlanWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([InvestmentPlanUpdateManyMutationInputSchema, InvestmentPlanUncheckedUpdateManyInputSchema]),
  where: InvestmentPlanWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: InvestmentPlanWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  data: z.union([InvestmentCreateInputSchema, InvestmentUncheckedCreateInputSchema])
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  where: InvestmentWhereUniqueInputSchema,
  create: z.union([InvestmentCreateInputSchema, InvestmentUncheckedCreateInputSchema]),
  update: z.union([InvestmentUpdateInputSchema, InvestmentUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([InvestmentCreateManyInputSchema, InvestmentCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([InvestmentCreateManyInputSchema, InvestmentCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  where: InvestmentWhereUniqueInputSchema
}).strict();
z.object({
  select: InvestmentSelectSchema.optional(),
  include: InvestmentIncludeSchema.optional(),
  data: z.union([InvestmentUpdateInputSchema, InvestmentUncheckedUpdateInputSchema]),
  where: InvestmentWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([InvestmentUpdateManyMutationInputSchema, InvestmentUncheckedUpdateManyInputSchema]),
  where: InvestmentWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([InvestmentUpdateManyMutationInputSchema, InvestmentUncheckedUpdateManyInputSchema]),
  where: InvestmentWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: InvestmentWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  data: z.union([TransactionCreateInputSchema, TransactionUncheckedCreateInputSchema])
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  where: TransactionWhereUniqueInputSchema,
  create: z.union([TransactionCreateInputSchema, TransactionUncheckedCreateInputSchema]),
  update: z.union([TransactionUpdateInputSchema, TransactionUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([TransactionCreateManyInputSchema, TransactionCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([TransactionCreateManyInputSchema, TransactionCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  where: TransactionWhereUniqueInputSchema
}).strict();
z.object({
  select: TransactionSelectSchema.optional(),
  include: TransactionIncludeSchema.optional(),
  data: z.union([TransactionUpdateInputSchema, TransactionUncheckedUpdateInputSchema]),
  where: TransactionWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([TransactionUpdateManyMutationInputSchema, TransactionUncheckedUpdateManyInputSchema]),
  where: TransactionWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([TransactionUpdateManyMutationInputSchema, TransactionUncheckedUpdateManyInputSchema]),
  where: TransactionWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: TransactionWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  data: z.union([NotificationCreateInputSchema, NotificationUncheckedCreateInputSchema])
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
  create: z.union([NotificationCreateInputSchema, NotificationUncheckedCreateInputSchema]),
  update: z.union([NotificationUpdateInputSchema, NotificationUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([NotificationCreateManyInputSchema, NotificationCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([NotificationCreateManyInputSchema, NotificationCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema
}).strict();
z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  data: z.union([NotificationUpdateInputSchema, NotificationUncheckedUpdateInputSchema]),
  where: NotificationWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([NotificationUpdateManyMutationInputSchema, NotificationUncheckedUpdateManyInputSchema]),
  where: NotificationWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([NotificationUpdateManyMutationInputSchema, NotificationUncheckedUpdateManyInputSchema]),
  where: NotificationWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: NotificationWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  data: z.union([CurrencyCreateInputSchema, CurrencyUncheckedCreateInputSchema])
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  where: CurrencyWhereUniqueInputSchema,
  create: z.union([CurrencyCreateInputSchema, CurrencyUncheckedCreateInputSchema]),
  update: z.union([CurrencyUpdateInputSchema, CurrencyUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([CurrencyCreateManyInputSchema, CurrencyCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([CurrencyCreateManyInputSchema, CurrencyCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  where: CurrencyWhereUniqueInputSchema
}).strict();
z.object({
  select: CurrencySelectSchema.optional(),
  data: z.union([CurrencyUpdateInputSchema, CurrencyUncheckedUpdateInputSchema]),
  where: CurrencyWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([CurrencyUpdateManyMutationInputSchema, CurrencyUncheckedUpdateManyInputSchema]),
  where: CurrencyWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([CurrencyUpdateManyMutationInputSchema, CurrencyUncheckedUpdateManyInputSchema]),
  where: CurrencyWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: CurrencyWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  data: z.union([SettingsCreateInputSchema, SettingsUncheckedCreateInputSchema])
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  where: SettingsWhereUniqueInputSchema,
  create: z.union([SettingsCreateInputSchema, SettingsUncheckedCreateInputSchema]),
  update: z.union([SettingsUpdateInputSchema, SettingsUncheckedUpdateInputSchema])
}).strict();
z.object({
  data: z.union([SettingsCreateManyInputSchema, SettingsCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  data: z.union([SettingsCreateManyInputSchema, SettingsCreateManyInputSchema.array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  where: SettingsWhereUniqueInputSchema
}).strict();
z.object({
  select: SettingsSelectSchema.optional(),
  data: z.union([SettingsUpdateInputSchema, SettingsUncheckedUpdateInputSchema]),
  where: SettingsWhereUniqueInputSchema
}).strict();
z.object({
  data: z.union([SettingsUpdateManyMutationInputSchema, SettingsUncheckedUpdateManyInputSchema]),
  where: SettingsWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  data: z.union([SettingsUpdateManyMutationInputSchema, SettingsUncheckedUpdateManyInputSchema]),
  where: SettingsWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();
z.object({
  where: SettingsWhereInputSchema.optional(),
  limit: z.number().optional()
}).strict();

export { FinancialAccountSchema as F, InvestmentSchema as I };
//# sourceMappingURL=index.mjs.map

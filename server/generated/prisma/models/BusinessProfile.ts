/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `BusinessProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from "../pjtg";
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model BusinessProfile
 *
 */
export type BusinessProfileModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BusinessProfilePayload>;

export type AggregateBusinessProfile = {
  _count: BusinessProfileCountAggregateOutputType | null;
  _avg: BusinessProfileAvgAggregateOutputType | null;
  _sum: BusinessProfileSumAggregateOutputType | null;
  _min: BusinessProfileMinAggregateOutputType | null;
  _max: BusinessProfileMaxAggregateOutputType | null;
};

export type BusinessProfileAvgAggregateOutputType = {
  creationYear: number | null;
};

export type BusinessProfileSumAggregateOutputType = {
  creationYear: number | null;
};

export type BusinessProfileMinAggregateOutputType = {
  id: string | null;
  financialAccountId: string | null;
  address: string | null;
  creationMonth: string | null;
  creationYear: number | null;
  proofOfAddress: string | null;
  proofOfAddressExt: string | null;
  certificate: string | null;
  certificateExt: string | null;
  approved: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type BusinessProfileMaxAggregateOutputType = {
  id: string | null;
  financialAccountId: string | null;
  address: string | null;
  creationMonth: string | null;
  creationYear: number | null;
  proofOfAddress: string | null;
  proofOfAddressExt: string | null;
  certificate: string | null;
  certificateExt: string | null;
  approved: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type BusinessProfileCountAggregateOutputType = {
  id: number;
  financialAccountId: number;
  address: number;
  creationMonth: number;
  creationYear: number;
  proofOfAddress: number;
  proofOfAddressExt: number;
  certificate: number;
  certificateExt: number;
  approved: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type BusinessProfileAvgAggregateInputType = {
  creationYear?: true;
};

export type BusinessProfileSumAggregateInputType = {
  creationYear?: true;
};

export type BusinessProfileMinAggregateInputType = {
  id?: true;
  financialAccountId?: true;
  address?: true;
  creationMonth?: true;
  creationYear?: true;
  proofOfAddress?: true;
  proofOfAddressExt?: true;
  certificate?: true;
  certificateExt?: true;
  approved?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type BusinessProfileMaxAggregateInputType = {
  id?: true;
  financialAccountId?: true;
  address?: true;
  creationMonth?: true;
  creationYear?: true;
  proofOfAddress?: true;
  proofOfAddressExt?: true;
  certificate?: true;
  certificateExt?: true;
  approved?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type BusinessProfileCountAggregateInputType = {
  id?: true;
  financialAccountId?: true;
  address?: true;
  creationMonth?: true;
  creationYear?: true;
  proofOfAddress?: true;
  proofOfAddressExt?: true;
  certificate?: true;
  certificateExt?: true;
  approved?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type BusinessProfileAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BusinessProfile to aggregate.
   */
  where?: Prisma.BusinessProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BusinessProfiles to fetch.
   */
  orderBy?:
    | Prisma.BusinessProfileOrderByWithRelationInput
    | Prisma.BusinessProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BusinessProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BusinessProfiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BusinessProfiles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BusinessProfiles
   **/
  _count?: true | BusinessProfileCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BusinessProfileAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BusinessProfileSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BusinessProfileMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BusinessProfileMaxAggregateInputType;
};

export type GetBusinessProfileAggregateType<
  T extends BusinessProfileAggregateArgs,
> = {
  [P in keyof T & keyof AggregateBusinessProfile]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBusinessProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateBusinessProfile[P]>;
};

export type BusinessProfileGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BusinessProfileWhereInput;
  orderBy?:
    | Prisma.BusinessProfileOrderByWithAggregationInput
    | Prisma.BusinessProfileOrderByWithAggregationInput[];
  by:
    | Prisma.BusinessProfileScalarFieldEnum[]
    | Prisma.BusinessProfileScalarFieldEnum;
  having?: Prisma.BusinessProfileScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BusinessProfileCountAggregateInputType | true;
  _avg?: BusinessProfileAvgAggregateInputType;
  _sum?: BusinessProfileSumAggregateInputType;
  _min?: BusinessProfileMinAggregateInputType;
  _max?: BusinessProfileMaxAggregateInputType;
};

export type BusinessProfileGroupByOutputType = {
  id: string;
  financialAccountId: string;
  address: string | null;
  creationMonth: string | null;
  creationYear: number | null;
  proofOfAddress: string | null;
  proofOfAddressExt: string | null;
  certificate: string | null;
  certificateExt: string | null;
  approved: boolean;
  createdAt: Date;
  updatedAt: Date;
  _count: BusinessProfileCountAggregateOutputType | null;
  _avg: BusinessProfileAvgAggregateOutputType | null;
  _sum: BusinessProfileSumAggregateOutputType | null;
  _min: BusinessProfileMinAggregateOutputType | null;
  _max: BusinessProfileMaxAggregateOutputType | null;
};

type GetBusinessProfileGroupByPayload<T extends BusinessProfileGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<BusinessProfileGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof BusinessProfileGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BusinessProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BusinessProfileGroupByOutputType[P]>;
      }
    >
  >;

export type BusinessProfileWhereInput = {
  AND?: Prisma.BusinessProfileWhereInput | Prisma.BusinessProfileWhereInput[];
  OR?: Prisma.BusinessProfileWhereInput[];
  NOT?: Prisma.BusinessProfileWhereInput | Prisma.BusinessProfileWhereInput[];
  id?: Prisma.StringFilter<"BusinessProfile"> | string;
  financialAccountId?: Prisma.StringFilter<"BusinessProfile"> | string;
  address?: Prisma.StringNullableFilter<"BusinessProfile"> | string | null;
  creationMonth?:
    | Prisma.StringNullableFilter<"BusinessProfile">
    | string
    | null;
  creationYear?: Prisma.IntNullableFilter<"BusinessProfile"> | number | null;
  proofOfAddress?:
    | Prisma.StringNullableFilter<"BusinessProfile">
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.StringNullableFilter<"BusinessProfile">
    | string
    | null;
  certificate?: Prisma.StringNullableFilter<"BusinessProfile"> | string | null;
  certificateExt?:
    | Prisma.StringNullableFilter<"BusinessProfile">
    | string
    | null;
  approved?: Prisma.BoolFilter<"BusinessProfile"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"BusinessProfile"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"BusinessProfile"> | Date | string;
  account?: Prisma.XOR<
    Prisma.FinancialAccountScalarRelationFilter,
    Prisma.FinancialAccountWhereInput
  >;
};

export type BusinessProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  address?: Prisma.SortOrderInput | Prisma.SortOrder;
  creationMonth?: Prisma.SortOrderInput | Prisma.SortOrder;
  creationYear?: Prisma.SortOrderInput | Prisma.SortOrder;
  proofOfAddress?: Prisma.SortOrderInput | Prisma.SortOrder;
  proofOfAddressExt?: Prisma.SortOrderInput | Prisma.SortOrder;
  certificate?: Prisma.SortOrderInput | Prisma.SortOrder;
  certificateExt?: Prisma.SortOrderInput | Prisma.SortOrder;
  approved?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  account?: Prisma.FinancialAccountOrderByWithRelationInput;
};

export type BusinessProfileWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    financialAccountId?: string;
    AND?: Prisma.BusinessProfileWhereInput | Prisma.BusinessProfileWhereInput[];
    OR?: Prisma.BusinessProfileWhereInput[];
    NOT?: Prisma.BusinessProfileWhereInput | Prisma.BusinessProfileWhereInput[];
    address?: Prisma.StringNullableFilter<"BusinessProfile"> | string | null;
    creationMonth?:
      | Prisma.StringNullableFilter<"BusinessProfile">
      | string
      | null;
    creationYear?: Prisma.IntNullableFilter<"BusinessProfile"> | number | null;
    proofOfAddress?:
      | Prisma.StringNullableFilter<"BusinessProfile">
      | string
      | null;
    proofOfAddressExt?:
      | Prisma.StringNullableFilter<"BusinessProfile">
      | string
      | null;
    certificate?:
      | Prisma.StringNullableFilter<"BusinessProfile">
      | string
      | null;
    certificateExt?:
      | Prisma.StringNullableFilter<"BusinessProfile">
      | string
      | null;
    approved?: Prisma.BoolFilter<"BusinessProfile"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"BusinessProfile"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"BusinessProfile"> | Date | string;
    account?: Prisma.XOR<
      Prisma.FinancialAccountScalarRelationFilter,
      Prisma.FinancialAccountWhereInput
    >;
  },
  "id" | "financialAccountId"
>;

export type BusinessProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  address?: Prisma.SortOrderInput | Prisma.SortOrder;
  creationMonth?: Prisma.SortOrderInput | Prisma.SortOrder;
  creationYear?: Prisma.SortOrderInput | Prisma.SortOrder;
  proofOfAddress?: Prisma.SortOrderInput | Prisma.SortOrder;
  proofOfAddressExt?: Prisma.SortOrderInput | Prisma.SortOrder;
  certificate?: Prisma.SortOrderInput | Prisma.SortOrder;
  certificateExt?: Prisma.SortOrderInput | Prisma.SortOrder;
  approved?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.BusinessProfileCountOrderByAggregateInput;
  _avg?: Prisma.BusinessProfileAvgOrderByAggregateInput;
  _max?: Prisma.BusinessProfileMaxOrderByAggregateInput;
  _min?: Prisma.BusinessProfileMinOrderByAggregateInput;
  _sum?: Prisma.BusinessProfileSumOrderByAggregateInput;
};

export type BusinessProfileScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BusinessProfileScalarWhereWithAggregatesInput
    | Prisma.BusinessProfileScalarWhereWithAggregatesInput[];
  OR?: Prisma.BusinessProfileScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BusinessProfileScalarWhereWithAggregatesInput
    | Prisma.BusinessProfileScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"BusinessProfile"> | string;
  financialAccountId?:
    | Prisma.StringWithAggregatesFilter<"BusinessProfile">
    | string;
  address?:
    | Prisma.StringNullableWithAggregatesFilter<"BusinessProfile">
    | string
    | null;
  creationMonth?:
    | Prisma.StringNullableWithAggregatesFilter<"BusinessProfile">
    | string
    | null;
  creationYear?:
    | Prisma.IntNullableWithAggregatesFilter<"BusinessProfile">
    | number
    | null;
  proofOfAddress?:
    | Prisma.StringNullableWithAggregatesFilter<"BusinessProfile">
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.StringNullableWithAggregatesFilter<"BusinessProfile">
    | string
    | null;
  certificate?:
    | Prisma.StringNullableWithAggregatesFilter<"BusinessProfile">
    | string
    | null;
  certificateExt?:
    | Prisma.StringNullableWithAggregatesFilter<"BusinessProfile">
    | string
    | null;
  approved?: Prisma.BoolWithAggregatesFilter<"BusinessProfile"> | boolean;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"BusinessProfile">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"BusinessProfile">
    | Date
    | string;
};

export type BusinessProfileCreateInput = {
  id?: string;
  address?: string | null;
  creationMonth?: string | null;
  creationYear?: number | null;
  proofOfAddress?: string | null;
  proofOfAddressExt?: string | null;
  certificate?: string | null;
  certificateExt?: string | null;
  approved: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  account: Prisma.FinancialAccountCreateNestedOneWithoutBusinessProfileInput;
};

export type BusinessProfileUncheckedCreateInput = {
  id?: string;
  financialAccountId: string;
  address?: string | null;
  creationMonth?: string | null;
  creationYear?: number | null;
  proofOfAddress?: string | null;
  proofOfAddressExt?: string | null;
  certificate?: string | null;
  certificateExt?: string | null;
  approved: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type BusinessProfileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creationMonth?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  creationYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  proofOfAddress?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  certificate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  certificateExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  account?: Prisma.FinancialAccountUpdateOneRequiredWithoutBusinessProfileNestedInput;
};

export type BusinessProfileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creationMonth?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  creationYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  proofOfAddress?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  certificate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  certificateExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BusinessProfileCreateManyInput = {
  id?: string;
  financialAccountId: string;
  address?: string | null;
  creationMonth?: string | null;
  creationYear?: number | null;
  proofOfAddress?: string | null;
  proofOfAddressExt?: string | null;
  certificate?: string | null;
  certificateExt?: string | null;
  approved: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type BusinessProfileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creationMonth?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  creationYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  proofOfAddress?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  certificate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  certificateExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BusinessProfileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creationMonth?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  creationYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  proofOfAddress?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  certificate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  certificateExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BusinessProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  creationMonth?: Prisma.SortOrder;
  creationYear?: Prisma.SortOrder;
  proofOfAddress?: Prisma.SortOrder;
  proofOfAddressExt?: Prisma.SortOrder;
  certificate?: Prisma.SortOrder;
  certificateExt?: Prisma.SortOrder;
  approved?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type BusinessProfileAvgOrderByAggregateInput = {
  creationYear?: Prisma.SortOrder;
};

export type BusinessProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  creationMonth?: Prisma.SortOrder;
  creationYear?: Prisma.SortOrder;
  proofOfAddress?: Prisma.SortOrder;
  proofOfAddressExt?: Prisma.SortOrder;
  certificate?: Prisma.SortOrder;
  certificateExt?: Prisma.SortOrder;
  approved?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type BusinessProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  address?: Prisma.SortOrder;
  creationMonth?: Prisma.SortOrder;
  creationYear?: Prisma.SortOrder;
  proofOfAddress?: Prisma.SortOrder;
  proofOfAddressExt?: Prisma.SortOrder;
  certificate?: Prisma.SortOrder;
  certificateExt?: Prisma.SortOrder;
  approved?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type BusinessProfileSumOrderByAggregateInput = {
  creationYear?: Prisma.SortOrder;
};

export type BusinessProfileNullableScalarRelationFilter = {
  is?: Prisma.BusinessProfileWhereInput | null;
  isNot?: Prisma.BusinessProfileWhereInput | null;
};

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type BusinessProfileCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<
    Prisma.BusinessProfileCreateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedCreateWithoutAccountInput
  >;
  connectOrCreate?: Prisma.BusinessProfileCreateOrConnectWithoutAccountInput;
  connect?: Prisma.BusinessProfileWhereUniqueInput;
};

export type BusinessProfileUncheckedCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<
    Prisma.BusinessProfileCreateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedCreateWithoutAccountInput
  >;
  connectOrCreate?: Prisma.BusinessProfileCreateOrConnectWithoutAccountInput;
  connect?: Prisma.BusinessProfileWhereUniqueInput;
};

export type BusinessProfileUpdateOneWithoutAccountNestedInput = {
  create?: Prisma.XOR<
    Prisma.BusinessProfileCreateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedCreateWithoutAccountInput
  >;
  connectOrCreate?: Prisma.BusinessProfileCreateOrConnectWithoutAccountInput;
  upsert?: Prisma.BusinessProfileUpsertWithoutAccountInput;
  disconnect?: Prisma.BusinessProfileWhereInput | boolean;
  delete?: Prisma.BusinessProfileWhereInput | boolean;
  connect?: Prisma.BusinessProfileWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BusinessProfileUpdateToOneWithWhereWithoutAccountInput,
      Prisma.BusinessProfileUpdateWithoutAccountInput
    >,
    Prisma.BusinessProfileUncheckedUpdateWithoutAccountInput
  >;
};

export type BusinessProfileUncheckedUpdateOneWithoutAccountNestedInput = {
  create?: Prisma.XOR<
    Prisma.BusinessProfileCreateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedCreateWithoutAccountInput
  >;
  connectOrCreate?: Prisma.BusinessProfileCreateOrConnectWithoutAccountInput;
  upsert?: Prisma.BusinessProfileUpsertWithoutAccountInput;
  disconnect?: Prisma.BusinessProfileWhereInput | boolean;
  delete?: Prisma.BusinessProfileWhereInput | boolean;
  connect?: Prisma.BusinessProfileWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BusinessProfileUpdateToOneWithWhereWithoutAccountInput,
      Prisma.BusinessProfileUpdateWithoutAccountInput
    >,
    Prisma.BusinessProfileUncheckedUpdateWithoutAccountInput
  >;
};

export type BusinessProfileCreateWithoutAccountInput = {
  id?: string;
  address?: string | null;
  creationMonth?: string | null;
  creationYear?: number | null;
  proofOfAddress?: string | null;
  proofOfAddressExt?: string | null;
  certificate?: string | null;
  certificateExt?: string | null;
  approved: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type BusinessProfileUncheckedCreateWithoutAccountInput = {
  id?: string;
  address?: string | null;
  creationMonth?: string | null;
  creationYear?: number | null;
  proofOfAddress?: string | null;
  proofOfAddressExt?: string | null;
  certificate?: string | null;
  certificateExt?: string | null;
  approved: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type BusinessProfileCreateOrConnectWithoutAccountInput = {
  where: Prisma.BusinessProfileWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BusinessProfileCreateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedCreateWithoutAccountInput
  >;
};

export type BusinessProfileUpsertWithoutAccountInput = {
  update: Prisma.XOR<
    Prisma.BusinessProfileUpdateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedUpdateWithoutAccountInput
  >;
  create: Prisma.XOR<
    Prisma.BusinessProfileCreateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedCreateWithoutAccountInput
  >;
  where?: Prisma.BusinessProfileWhereInput;
};

export type BusinessProfileUpdateToOneWithWhereWithoutAccountInput = {
  where?: Prisma.BusinessProfileWhereInput;
  data: Prisma.XOR<
    Prisma.BusinessProfileUpdateWithoutAccountInput,
    Prisma.BusinessProfileUncheckedUpdateWithoutAccountInput
  >;
};

export type BusinessProfileUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creationMonth?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  creationYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  proofOfAddress?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  certificate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  certificateExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BusinessProfileUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creationMonth?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  creationYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  proofOfAddress?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  proofOfAddressExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  certificate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  certificateExt?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  approved?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BusinessProfileSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    financialAccountId?: boolean;
    address?: boolean;
    creationMonth?: boolean;
    creationYear?: boolean;
    proofOfAddress?: boolean;
    proofOfAddressExt?: boolean;
    certificate?: boolean;
    certificateExt?: boolean;
    approved?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    account?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["businessProfile"]
>;

export type BusinessProfileSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    financialAccountId?: boolean;
    address?: boolean;
    creationMonth?: boolean;
    creationYear?: boolean;
    proofOfAddress?: boolean;
    proofOfAddressExt?: boolean;
    certificate?: boolean;
    certificateExt?: boolean;
    approved?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    account?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["businessProfile"]
>;

export type BusinessProfileSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    financialAccountId?: boolean;
    address?: boolean;
    creationMonth?: boolean;
    creationYear?: boolean;
    proofOfAddress?: boolean;
    proofOfAddressExt?: boolean;
    certificate?: boolean;
    certificateExt?: boolean;
    approved?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    account?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["businessProfile"]
>;

export type BusinessProfileSelectScalar = {
  id?: boolean;
  financialAccountId?: boolean;
  address?: boolean;
  creationMonth?: boolean;
  creationYear?: boolean;
  proofOfAddress?: boolean;
  proofOfAddressExt?: boolean;
  certificate?: boolean;
  certificateExt?: boolean;
  approved?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type BusinessProfileOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "financialAccountId"
  | "address"
  | "creationMonth"
  | "creationYear"
  | "proofOfAddress"
  | "proofOfAddressExt"
  | "certificate"
  | "certificateExt"
  | "approved"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["businessProfile"]
>;
export type BusinessProfileInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  account?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
};
export type BusinessProfileIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  account?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
};
export type BusinessProfileIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  account?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
};

export type $BusinessProfilePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "BusinessProfile";
  objects: {
    account: Prisma.$FinancialAccountPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      financialAccountId: string;
      address: string | null;
      creationMonth: string | null;
      creationYear: number | null;
      proofOfAddress: string | null;
      proofOfAddressExt: string | null;
      certificate: string | null;
      certificateExt: string | null;
      approved: boolean;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["businessProfile"]
  >;
  composites: {};
};

export type BusinessProfileGetPayload<
  S extends boolean | null | undefined | BusinessProfileDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$BusinessProfilePayload, S>;

export type BusinessProfileCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  BusinessProfileFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: BusinessProfileCountAggregateInputType | true;
};

export interface BusinessProfileDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["BusinessProfile"];
    meta: { name: "BusinessProfile" };
  };
  /**
   * Find zero or one BusinessProfile that matches the filter.
   * @param {BusinessProfileFindUniqueArgs} args - Arguments to find a BusinessProfile
   * @example
   * // Get one BusinessProfile
   * const businessProfile = await prisma.businessProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BusinessProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BusinessProfileFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BusinessProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BusinessProfileFindUniqueOrThrowArgs} args - Arguments to find a BusinessProfile
   * @example
   * // Get one BusinessProfile
   * const businessProfile = await prisma.businessProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BusinessProfileFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BusinessProfileFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BusinessProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessProfileFindFirstArgs} args - Arguments to find a BusinessProfile
   * @example
   * // Get one BusinessProfile
   * const businessProfile = await prisma.businessProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BusinessProfileFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BusinessProfileFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BusinessProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessProfileFindFirstOrThrowArgs} args - Arguments to find a BusinessProfile
   * @example
   * // Get one BusinessProfile
   * const businessProfile = await prisma.businessProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BusinessProfileFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BusinessProfileFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BusinessProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BusinessProfiles
   * const businessProfiles = await prisma.businessProfile.findMany()
   *
   * // Get first 10 BusinessProfiles
   * const businessProfiles = await prisma.businessProfile.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const businessProfileWithIdOnly = await prisma.businessProfile.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BusinessProfileFindManyArgs>(
    args?: Prisma.SelectSubset<T, BusinessProfileFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a BusinessProfile.
   * @param {BusinessProfileCreateArgs} args - Arguments to create a BusinessProfile.
   * @example
   * // Create one BusinessProfile
   * const BusinessProfile = await prisma.businessProfile.create({
   *   data: {
   *     // ... data to create a BusinessProfile
   *   }
   * })
   *
   */
  create<T extends BusinessProfileCreateArgs>(
    args: Prisma.SelectSubset<T, BusinessProfileCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many BusinessProfiles.
   * @param {BusinessProfileCreateManyArgs} args - Arguments to create many BusinessProfiles.
   * @example
   * // Create many BusinessProfiles
   * const businessProfile = await prisma.businessProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BusinessProfileCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BusinessProfileCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many BusinessProfiles and returns the data saved in the database.
   * @param {BusinessProfileCreateManyAndReturnArgs} args - Arguments to create many BusinessProfiles.
   * @example
   * // Create many BusinessProfiles
   * const businessProfile = await prisma.businessProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many BusinessProfiles and only return the `id`
   * const businessProfileWithIdOnly = await prisma.businessProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BusinessProfileCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      BusinessProfileCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a BusinessProfile.
   * @param {BusinessProfileDeleteArgs} args - Arguments to delete one BusinessProfile.
   * @example
   * // Delete one BusinessProfile
   * const BusinessProfile = await prisma.businessProfile.delete({
   *   where: {
   *     // ... filter to delete one BusinessProfile
   *   }
   * })
   *
   */
  delete<T extends BusinessProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, BusinessProfileDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one BusinessProfile.
   * @param {BusinessProfileUpdateArgs} args - Arguments to update one BusinessProfile.
   * @example
   * // Update one BusinessProfile
   * const businessProfile = await prisma.businessProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BusinessProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, BusinessProfileUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more BusinessProfiles.
   * @param {BusinessProfileDeleteManyArgs} args - Arguments to filter BusinessProfiles to delete.
   * @example
   * // Delete a few BusinessProfiles
   * const { count } = await prisma.businessProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BusinessProfileDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BusinessProfileDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BusinessProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BusinessProfiles
   * const businessProfile = await prisma.businessProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BusinessProfileUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BusinessProfileUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BusinessProfiles and returns the data updated in the database.
   * @param {BusinessProfileUpdateManyAndReturnArgs} args - Arguments to update many BusinessProfiles.
   * @example
   * // Update many BusinessProfiles
   * const businessProfile = await prisma.businessProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more BusinessProfiles and only return the `id`
   * const businessProfileWithIdOnly = await prisma.businessProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BusinessProfileUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      BusinessProfileUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one BusinessProfile.
   * @param {BusinessProfileUpsertArgs} args - Arguments to update or create a BusinessProfile.
   * @example
   * // Update or create a BusinessProfile
   * const businessProfile = await prisma.businessProfile.upsert({
   *   create: {
   *     // ... data to create a BusinessProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BusinessProfile we want to update
   *   }
   * })
   */
  upsert<T extends BusinessProfileUpsertArgs>(
    args: Prisma.SelectSubset<T, BusinessProfileUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__BusinessProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$BusinessProfilePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of BusinessProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessProfileCountArgs} args - Arguments to filter BusinessProfiles to count.
   * @example
   * // Count the number of BusinessProfiles
   * const count = await prisma.businessProfile.count({
   *   where: {
   *     // ... the filter for the BusinessProfiles we want to count
   *   }
   * })
   **/
  count<T extends BusinessProfileCountArgs>(
    args?: Prisma.Subset<T, BusinessProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            BusinessProfileCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BusinessProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BusinessProfileAggregateArgs>(
    args: Prisma.Subset<T, BusinessProfileAggregateArgs>,
  ): Prisma.PrismaPromise<GetBusinessProfileAggregateType<T>>;

  /**
   * Group by BusinessProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BusinessProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BusinessProfileGroupByArgs["orderBy"] }
      : { orderBy?: BusinessProfileGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, BusinessProfileGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetBusinessProfileGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BusinessProfile model
   */
  readonly fields: BusinessProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BusinessProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BusinessProfileClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  account<T extends Prisma.FinancialAccountDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FinancialAccountDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__FinancialAccountClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FinancialAccountPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BusinessProfile model
 */
export interface BusinessProfileFieldRefs {
  readonly id: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly financialAccountId: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly address: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly creationMonth: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly creationYear: Prisma.FieldRef<"BusinessProfile", "Int">;
  readonly proofOfAddress: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly proofOfAddressExt: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly certificate: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly certificateExt: Prisma.FieldRef<"BusinessProfile", "String">;
  readonly approved: Prisma.FieldRef<"BusinessProfile", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"BusinessProfile", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"BusinessProfile", "DateTime">;
}

// Custom InputTypes
/**
 * BusinessProfile findUnique
 */
export type BusinessProfileFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * Filter, which BusinessProfile to fetch.
   */
  where: Prisma.BusinessProfileWhereUniqueInput;
};

/**
 * BusinessProfile findUniqueOrThrow
 */
export type BusinessProfileFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * Filter, which BusinessProfile to fetch.
   */
  where: Prisma.BusinessProfileWhereUniqueInput;
};

/**
 * BusinessProfile findFirst
 */
export type BusinessProfileFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * Filter, which BusinessProfile to fetch.
   */
  where?: Prisma.BusinessProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BusinessProfiles to fetch.
   */
  orderBy?:
    | Prisma.BusinessProfileOrderByWithRelationInput
    | Prisma.BusinessProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BusinessProfiles.
   */
  cursor?: Prisma.BusinessProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BusinessProfiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BusinessProfiles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BusinessProfiles.
   */
  distinct?:
    | Prisma.BusinessProfileScalarFieldEnum
    | Prisma.BusinessProfileScalarFieldEnum[];
};

/**
 * BusinessProfile findFirstOrThrow
 */
export type BusinessProfileFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * Filter, which BusinessProfile to fetch.
   */
  where?: Prisma.BusinessProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BusinessProfiles to fetch.
   */
  orderBy?:
    | Prisma.BusinessProfileOrderByWithRelationInput
    | Prisma.BusinessProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BusinessProfiles.
   */
  cursor?: Prisma.BusinessProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BusinessProfiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BusinessProfiles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BusinessProfiles.
   */
  distinct?:
    | Prisma.BusinessProfileScalarFieldEnum
    | Prisma.BusinessProfileScalarFieldEnum[];
};

/**
 * BusinessProfile findMany
 */
export type BusinessProfileFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * Filter, which BusinessProfiles to fetch.
   */
  where?: Prisma.BusinessProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BusinessProfiles to fetch.
   */
  orderBy?:
    | Prisma.BusinessProfileOrderByWithRelationInput
    | Prisma.BusinessProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BusinessProfiles.
   */
  cursor?: Prisma.BusinessProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BusinessProfiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BusinessProfiles.
   */
  skip?: number;
  distinct?:
    | Prisma.BusinessProfileScalarFieldEnum
    | Prisma.BusinessProfileScalarFieldEnum[];
};

/**
 * BusinessProfile create
 */
export type BusinessProfileCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * The data needed to create a BusinessProfile.
   */
  data: Prisma.XOR<
    Prisma.BusinessProfileCreateInput,
    Prisma.BusinessProfileUncheckedCreateInput
  >;
};

/**
 * BusinessProfile createMany
 */
export type BusinessProfileCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many BusinessProfiles.
   */
  data:
    | Prisma.BusinessProfileCreateManyInput
    | Prisma.BusinessProfileCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BusinessProfile createManyAndReturn
 */
export type BusinessProfileCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * The data used to create many BusinessProfiles.
   */
  data:
    | Prisma.BusinessProfileCreateManyInput
    | Prisma.BusinessProfileCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * BusinessProfile update
 */
export type BusinessProfileUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * The data needed to update a BusinessProfile.
   */
  data: Prisma.XOR<
    Prisma.BusinessProfileUpdateInput,
    Prisma.BusinessProfileUncheckedUpdateInput
  >;
  /**
   * Choose, which BusinessProfile to update.
   */
  where: Prisma.BusinessProfileWhereUniqueInput;
};

/**
 * BusinessProfile updateMany
 */
export type BusinessProfileUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update BusinessProfiles.
   */
  data: Prisma.XOR<
    Prisma.BusinessProfileUpdateManyMutationInput,
    Prisma.BusinessProfileUncheckedUpdateManyInput
  >;
  /**
   * Filter which BusinessProfiles to update
   */
  where?: Prisma.BusinessProfileWhereInput;
  /**
   * Limit how many BusinessProfiles to update.
   */
  limit?: number;
};

/**
 * BusinessProfile updateManyAndReturn
 */
export type BusinessProfileUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * The data used to update BusinessProfiles.
   */
  data: Prisma.XOR<
    Prisma.BusinessProfileUpdateManyMutationInput,
    Prisma.BusinessProfileUncheckedUpdateManyInput
  >;
  /**
   * Filter which BusinessProfiles to update
   */
  where?: Prisma.BusinessProfileWhereInput;
  /**
   * Limit how many BusinessProfiles to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * BusinessProfile upsert
 */
export type BusinessProfileUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * The filter to search for the BusinessProfile to update in case it exists.
   */
  where: Prisma.BusinessProfileWhereUniqueInput;
  /**
   * In case the BusinessProfile found by the `where` argument doesn't exist, create a new BusinessProfile with this data.
   */
  create: Prisma.XOR<
    Prisma.BusinessProfileCreateInput,
    Prisma.BusinessProfileUncheckedCreateInput
  >;
  /**
   * In case the BusinessProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.BusinessProfileUpdateInput,
    Prisma.BusinessProfileUncheckedUpdateInput
  >;
};

/**
 * BusinessProfile delete
 */
export type BusinessProfileDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
  /**
   * Filter which BusinessProfile to delete.
   */
  where: Prisma.BusinessProfileWhereUniqueInput;
};

/**
 * BusinessProfile deleteMany
 */
export type BusinessProfileDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BusinessProfiles to delete
   */
  where?: Prisma.BusinessProfileWhereInput;
  /**
   * Limit how many BusinessProfiles to delete.
   */
  limit?: number;
};

/**
 * BusinessProfile without action
 */
export type BusinessProfileDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BusinessProfile
   */
  select?: Prisma.BusinessProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BusinessProfile
   */
  omit?: Prisma.BusinessProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessProfileInclude<ExtArgs> | null;
};

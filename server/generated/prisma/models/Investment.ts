
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Investment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Investment
 * 
 */
export type InvestmentModel = runtime.Types.Result.DefaultSelection<Prisma.$InvestmentPayload>

export type AggregateInvestment = {
  _count: InvestmentCountAggregateOutputType | null
  _avg: InvestmentAvgAggregateOutputType | null
  _sum: InvestmentSumAggregateOutputType | null
  _min: InvestmentMinAggregateOutputType | null
  _max: InvestmentMaxAggregateOutputType | null
}

export type InvestmentAvgAggregateOutputType = {
  deposit: number | null
  totalProfit: number | null
  profitCount: number | null
  daysCompleted: number | null
  duration: number | null
  totalReturn: number | null
  periodicReturn: number | null
  terminationFee: number | null
}

export type InvestmentSumAggregateOutputType = {
  deposit: number | null
  totalProfit: number | null
  profitCount: number | null
  daysCompleted: number | null
  duration: number | null
  totalReturn: number | null
  periodicReturn: number | null
  terminationFee: number | null
}

export type InvestmentMinAggregateOutputType = {
  id: string | null
  financialAccountId: string | null
  investorId: string | null
  deposit: number | null
  investmentName: string | null
  totalProfit: number | null
  profitCount: number | null
  status: $Enums.InvestmentStatus | null
  pausedAt: Date | null
  pausedReason: string | null
  closedAt: Date | null
  closedReason: string | null
  terminatedAt: Date | null
  terminatedReason: string | null
  category: $Enums.InvestmentPlanCategory | null
  daysCompleted: number | null
  duration: number | null
  totalReturn: number | null
  periodicReturn: number | null
  profitDistribution: $Enums.ProfitDistribution | null
  terminationFee: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InvestmentMaxAggregateOutputType = {
  id: string | null
  financialAccountId: string | null
  investorId: string | null
  deposit: number | null
  investmentName: string | null
  totalProfit: number | null
  profitCount: number | null
  status: $Enums.InvestmentStatus | null
  pausedAt: Date | null
  pausedReason: string | null
  closedAt: Date | null
  closedReason: string | null
  terminatedAt: Date | null
  terminatedReason: string | null
  category: $Enums.InvestmentPlanCategory | null
  daysCompleted: number | null
  duration: number | null
  totalReturn: number | null
  periodicReturn: number | null
  profitDistribution: $Enums.ProfitDistribution | null
  terminationFee: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InvestmentCountAggregateOutputType = {
  id: number
  financialAccountId: number
  investorId: number
  deposit: number
  investmentName: number
  totalProfit: number
  profitCount: number
  status: number
  pausedAt: number
  pausedReason: number
  closedAt: number
  closedReason: number
  terminatedAt: number
  terminatedReason: number
  category: number
  daysCompleted: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution: number
  terminationFee: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InvestmentAvgAggregateInputType = {
  deposit?: true
  totalProfit?: true
  profitCount?: true
  daysCompleted?: true
  duration?: true
  totalReturn?: true
  periodicReturn?: true
  terminationFee?: true
}

export type InvestmentSumAggregateInputType = {
  deposit?: true
  totalProfit?: true
  profitCount?: true
  daysCompleted?: true
  duration?: true
  totalReturn?: true
  periodicReturn?: true
  terminationFee?: true
}

export type InvestmentMinAggregateInputType = {
  id?: true
  financialAccountId?: true
  investorId?: true
  deposit?: true
  investmentName?: true
  totalProfit?: true
  profitCount?: true
  status?: true
  pausedAt?: true
  pausedReason?: true
  closedAt?: true
  closedReason?: true
  terminatedAt?: true
  terminatedReason?: true
  category?: true
  daysCompleted?: true
  duration?: true
  totalReturn?: true
  periodicReturn?: true
  profitDistribution?: true
  terminationFee?: true
  createdAt?: true
  updatedAt?: true
}

export type InvestmentMaxAggregateInputType = {
  id?: true
  financialAccountId?: true
  investorId?: true
  deposit?: true
  investmentName?: true
  totalProfit?: true
  profitCount?: true
  status?: true
  pausedAt?: true
  pausedReason?: true
  closedAt?: true
  closedReason?: true
  terminatedAt?: true
  terminatedReason?: true
  category?: true
  daysCompleted?: true
  duration?: true
  totalReturn?: true
  periodicReturn?: true
  profitDistribution?: true
  terminationFee?: true
  createdAt?: true
  updatedAt?: true
}

export type InvestmentCountAggregateInputType = {
  id?: true
  financialAccountId?: true
  investorId?: true
  deposit?: true
  investmentName?: true
  totalProfit?: true
  profitCount?: true
  status?: true
  pausedAt?: true
  pausedReason?: true
  closedAt?: true
  closedReason?: true
  terminatedAt?: true
  terminatedReason?: true
  category?: true
  daysCompleted?: true
  duration?: true
  totalReturn?: true
  periodicReturn?: true
  profitDistribution?: true
  terminationFee?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InvestmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Investment to aggregate.
   */
  where?: Prisma.InvestmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Investments to fetch.
   */
  orderBy?: Prisma.InvestmentOrderByWithRelationInput | Prisma.InvestmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InvestmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Investments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Investments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Investments
  **/
  _count?: true | InvestmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: InvestmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: InvestmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InvestmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InvestmentMaxAggregateInputType
}

export type GetInvestmentAggregateType<T extends InvestmentAggregateArgs> = {
      [P in keyof T & keyof AggregateInvestment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInvestment[P]>
    : Prisma.GetScalarType<T[P], AggregateInvestment[P]>
}




export type InvestmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InvestmentWhereInput
  orderBy?: Prisma.InvestmentOrderByWithAggregationInput | Prisma.InvestmentOrderByWithAggregationInput[]
  by: Prisma.InvestmentScalarFieldEnum[] | Prisma.InvestmentScalarFieldEnum
  having?: Prisma.InvestmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InvestmentCountAggregateInputType | true
  _avg?: InvestmentAvgAggregateInputType
  _sum?: InvestmentSumAggregateInputType
  _min?: InvestmentMinAggregateInputType
  _max?: InvestmentMaxAggregateInputType
}

export type InvestmentGroupByOutputType = {
  id: string
  financialAccountId: string
  investorId: string
  deposit: number
  investmentName: string
  totalProfit: number
  profitCount: number
  status: $Enums.InvestmentStatus
  pausedAt: Date | null
  pausedReason: string | null
  closedAt: Date | null
  closedReason: string | null
  terminatedAt: Date | null
  terminatedReason: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution: $Enums.ProfitDistribution
  terminationFee: number
  createdAt: Date
  updatedAt: Date
  _count: InvestmentCountAggregateOutputType | null
  _avg: InvestmentAvgAggregateOutputType | null
  _sum: InvestmentSumAggregateOutputType | null
  _min: InvestmentMinAggregateOutputType | null
  _max: InvestmentMaxAggregateOutputType | null
}

type GetInvestmentGroupByPayload<T extends InvestmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InvestmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InvestmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InvestmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InvestmentGroupByOutputType[P]>
      }
    >
  >



export type InvestmentWhereInput = {
  AND?: Prisma.InvestmentWhereInput | Prisma.InvestmentWhereInput[]
  OR?: Prisma.InvestmentWhereInput[]
  NOT?: Prisma.InvestmentWhereInput | Prisma.InvestmentWhereInput[]
  id?: Prisma.StringFilter<"Investment"> | string
  financialAccountId?: Prisma.StringFilter<"Investment"> | string
  investorId?: Prisma.StringFilter<"Investment"> | string
  deposit?: Prisma.FloatFilter<"Investment"> | number
  investmentName?: Prisma.StringFilter<"Investment"> | string
  totalProfit?: Prisma.FloatFilter<"Investment"> | number
  profitCount?: Prisma.IntFilter<"Investment"> | number
  status?: Prisma.EnumInvestmentStatusFilter<"Investment"> | $Enums.InvestmentStatus
  pausedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  pausedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  closedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  closedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  terminatedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  terminatedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFilter<"Investment"> | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFilter<"Investment"> | number
  duration?: Prisma.IntFilter<"Investment"> | number
  totalReturn?: Prisma.FloatFilter<"Investment"> | number
  periodicReturn?: Prisma.FloatFilter<"Investment"> | number
  profitDistribution?: Prisma.EnumProfitDistributionFilter<"Investment"> | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFilter<"Investment"> | number
  createdAt?: Prisma.DateTimeFilter<"Investment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Investment"> | Date | string
  investor?: Prisma.XOR<Prisma.AccountUserScalarRelationFilter, Prisma.AccountUserWhereInput>
  transactions?: Prisma.TransactionListRelationFilter
  financialAccount?: Prisma.XOR<Prisma.FinancialAccountScalarRelationFilter, Prisma.FinancialAccountWhereInput>
}

export type InvestmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  financialAccountId?: Prisma.SortOrder
  investorId?: Prisma.SortOrder
  deposit?: Prisma.SortOrder
  investmentName?: Prisma.SortOrder
  totalProfit?: Prisma.SortOrder
  profitCount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  pausedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  pausedReason?: Prisma.SortOrderInput | Prisma.SortOrder
  closedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  closedReason?: Prisma.SortOrderInput | Prisma.SortOrder
  terminatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  terminatedReason?: Prisma.SortOrderInput | Prisma.SortOrder
  category?: Prisma.SortOrder
  daysCompleted?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  totalReturn?: Prisma.SortOrder
  periodicReturn?: Prisma.SortOrder
  profitDistribution?: Prisma.SortOrder
  terminationFee?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  investor?: Prisma.AccountUserOrderByWithRelationInput
  transactions?: Prisma.TransactionOrderByRelationAggregateInput
  financialAccount?: Prisma.FinancialAccountOrderByWithRelationInput
}

export type InvestmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InvestmentWhereInput | Prisma.InvestmentWhereInput[]
  OR?: Prisma.InvestmentWhereInput[]
  NOT?: Prisma.InvestmentWhereInput | Prisma.InvestmentWhereInput[]
  financialAccountId?: Prisma.StringFilter<"Investment"> | string
  investorId?: Prisma.StringFilter<"Investment"> | string
  deposit?: Prisma.FloatFilter<"Investment"> | number
  investmentName?: Prisma.StringFilter<"Investment"> | string
  totalProfit?: Prisma.FloatFilter<"Investment"> | number
  profitCount?: Prisma.IntFilter<"Investment"> | number
  status?: Prisma.EnumInvestmentStatusFilter<"Investment"> | $Enums.InvestmentStatus
  pausedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  pausedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  closedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  closedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  terminatedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  terminatedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFilter<"Investment"> | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFilter<"Investment"> | number
  duration?: Prisma.IntFilter<"Investment"> | number
  totalReturn?: Prisma.FloatFilter<"Investment"> | number
  periodicReturn?: Prisma.FloatFilter<"Investment"> | number
  profitDistribution?: Prisma.EnumProfitDistributionFilter<"Investment"> | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFilter<"Investment"> | number
  createdAt?: Prisma.DateTimeFilter<"Investment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Investment"> | Date | string
  investor?: Prisma.XOR<Prisma.AccountUserScalarRelationFilter, Prisma.AccountUserWhereInput>
  transactions?: Prisma.TransactionListRelationFilter
  financialAccount?: Prisma.XOR<Prisma.FinancialAccountScalarRelationFilter, Prisma.FinancialAccountWhereInput>
}, "id">

export type InvestmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  financialAccountId?: Prisma.SortOrder
  investorId?: Prisma.SortOrder
  deposit?: Prisma.SortOrder
  investmentName?: Prisma.SortOrder
  totalProfit?: Prisma.SortOrder
  profitCount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  pausedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  pausedReason?: Prisma.SortOrderInput | Prisma.SortOrder
  closedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  closedReason?: Prisma.SortOrderInput | Prisma.SortOrder
  terminatedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  terminatedReason?: Prisma.SortOrderInput | Prisma.SortOrder
  category?: Prisma.SortOrder
  daysCompleted?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  totalReturn?: Prisma.SortOrder
  periodicReturn?: Prisma.SortOrder
  profitDistribution?: Prisma.SortOrder
  terminationFee?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InvestmentCountOrderByAggregateInput
  _avg?: Prisma.InvestmentAvgOrderByAggregateInput
  _max?: Prisma.InvestmentMaxOrderByAggregateInput
  _min?: Prisma.InvestmentMinOrderByAggregateInput
  _sum?: Prisma.InvestmentSumOrderByAggregateInput
}

export type InvestmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.InvestmentScalarWhereWithAggregatesInput | Prisma.InvestmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.InvestmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InvestmentScalarWhereWithAggregatesInput | Prisma.InvestmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Investment"> | string
  financialAccountId?: Prisma.StringWithAggregatesFilter<"Investment"> | string
  investorId?: Prisma.StringWithAggregatesFilter<"Investment"> | string
  deposit?: Prisma.FloatWithAggregatesFilter<"Investment"> | number
  investmentName?: Prisma.StringWithAggregatesFilter<"Investment"> | string
  totalProfit?: Prisma.FloatWithAggregatesFilter<"Investment"> | number
  profitCount?: Prisma.IntWithAggregatesFilter<"Investment"> | number
  status?: Prisma.EnumInvestmentStatusWithAggregatesFilter<"Investment"> | $Enums.InvestmentStatus
  pausedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Investment"> | Date | string | null
  pausedReason?: Prisma.StringNullableWithAggregatesFilter<"Investment"> | string | null
  closedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Investment"> | Date | string | null
  closedReason?: Prisma.StringNullableWithAggregatesFilter<"Investment"> | string | null
  terminatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Investment"> | Date | string | null
  terminatedReason?: Prisma.StringNullableWithAggregatesFilter<"Investment"> | string | null
  category?: Prisma.EnumInvestmentPlanCategoryWithAggregatesFilter<"Investment"> | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntWithAggregatesFilter<"Investment"> | number
  duration?: Prisma.IntWithAggregatesFilter<"Investment"> | number
  totalReturn?: Prisma.FloatWithAggregatesFilter<"Investment"> | number
  periodicReturn?: Prisma.FloatWithAggregatesFilter<"Investment"> | number
  profitDistribution?: Prisma.EnumProfitDistributionWithAggregatesFilter<"Investment"> | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatWithAggregatesFilter<"Investment"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Investment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Investment"> | Date | string
}

export type InvestmentCreateInput = {
  id?: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  investor: Prisma.AccountUserCreateNestedOneWithoutInvestmentsInput
  transactions?: Prisma.TransactionCreateNestedManyWithoutInvestmentInput
  financialAccount: Prisma.FinancialAccountCreateNestedOneWithoutInvestmentsInput
}

export type InvestmentUncheckedCreateInput = {
  id?: string
  financialAccountId: string
  investorId: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutInvestmentInput
}

export type InvestmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  investor?: Prisma.AccountUserUpdateOneRequiredWithoutInvestmentsNestedInput
  transactions?: Prisma.TransactionUpdateManyWithoutInvestmentNestedInput
  financialAccount?: Prisma.FinancialAccountUpdateOneRequiredWithoutInvestmentsNestedInput
}

export type InvestmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  investorId?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutInvestmentNestedInput
}

export type InvestmentCreateManyInput = {
  id?: string
  financialAccountId: string
  investorId: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InvestmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  investorId?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentListRelationFilter = {
  every?: Prisma.InvestmentWhereInput
  some?: Prisma.InvestmentWhereInput
  none?: Prisma.InvestmentWhereInput
}

export type InvestmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InvestmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  financialAccountId?: Prisma.SortOrder
  investorId?: Prisma.SortOrder
  deposit?: Prisma.SortOrder
  investmentName?: Prisma.SortOrder
  totalProfit?: Prisma.SortOrder
  profitCount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  pausedAt?: Prisma.SortOrder
  pausedReason?: Prisma.SortOrder
  closedAt?: Prisma.SortOrder
  closedReason?: Prisma.SortOrder
  terminatedAt?: Prisma.SortOrder
  terminatedReason?: Prisma.SortOrder
  category?: Prisma.SortOrder
  daysCompleted?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  totalReturn?: Prisma.SortOrder
  periodicReturn?: Prisma.SortOrder
  profitDistribution?: Prisma.SortOrder
  terminationFee?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InvestmentAvgOrderByAggregateInput = {
  deposit?: Prisma.SortOrder
  totalProfit?: Prisma.SortOrder
  profitCount?: Prisma.SortOrder
  daysCompleted?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  totalReturn?: Prisma.SortOrder
  periodicReturn?: Prisma.SortOrder
  terminationFee?: Prisma.SortOrder
}

export type InvestmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  financialAccountId?: Prisma.SortOrder
  investorId?: Prisma.SortOrder
  deposit?: Prisma.SortOrder
  investmentName?: Prisma.SortOrder
  totalProfit?: Prisma.SortOrder
  profitCount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  pausedAt?: Prisma.SortOrder
  pausedReason?: Prisma.SortOrder
  closedAt?: Prisma.SortOrder
  closedReason?: Prisma.SortOrder
  terminatedAt?: Prisma.SortOrder
  terminatedReason?: Prisma.SortOrder
  category?: Prisma.SortOrder
  daysCompleted?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  totalReturn?: Prisma.SortOrder
  periodicReturn?: Prisma.SortOrder
  profitDistribution?: Prisma.SortOrder
  terminationFee?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InvestmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  financialAccountId?: Prisma.SortOrder
  investorId?: Prisma.SortOrder
  deposit?: Prisma.SortOrder
  investmentName?: Prisma.SortOrder
  totalProfit?: Prisma.SortOrder
  profitCount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  pausedAt?: Prisma.SortOrder
  pausedReason?: Prisma.SortOrder
  closedAt?: Prisma.SortOrder
  closedReason?: Prisma.SortOrder
  terminatedAt?: Prisma.SortOrder
  terminatedReason?: Prisma.SortOrder
  category?: Prisma.SortOrder
  daysCompleted?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  totalReturn?: Prisma.SortOrder
  periodicReturn?: Prisma.SortOrder
  profitDistribution?: Prisma.SortOrder
  terminationFee?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InvestmentSumOrderByAggregateInput = {
  deposit?: Prisma.SortOrder
  totalProfit?: Prisma.SortOrder
  profitCount?: Prisma.SortOrder
  daysCompleted?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  totalReturn?: Prisma.SortOrder
  periodicReturn?: Prisma.SortOrder
  terminationFee?: Prisma.SortOrder
}

export type InvestmentNullableScalarRelationFilter = {
  is?: Prisma.InvestmentWhereInput | null
  isNot?: Prisma.InvestmentWhereInput | null
}

export type InvestmentCreateNestedManyWithoutFinancialAccountInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput> | Prisma.InvestmentCreateWithoutFinancialAccountInput[] | Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput | Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput[]
  createMany?: Prisma.InvestmentCreateManyFinancialAccountInputEnvelope
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
}

export type InvestmentUncheckedCreateNestedManyWithoutFinancialAccountInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput> | Prisma.InvestmentCreateWithoutFinancialAccountInput[] | Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput | Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput[]
  createMany?: Prisma.InvestmentCreateManyFinancialAccountInputEnvelope
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
}

export type InvestmentUpdateManyWithoutFinancialAccountNestedInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput> | Prisma.InvestmentCreateWithoutFinancialAccountInput[] | Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput | Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput[]
  upsert?: Prisma.InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInput | Prisma.InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInput[]
  createMany?: Prisma.InvestmentCreateManyFinancialAccountInputEnvelope
  set?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  disconnect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  delete?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  update?: Prisma.InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInput | Prisma.InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInput[]
  updateMany?: Prisma.InvestmentUpdateManyWithWhereWithoutFinancialAccountInput | Prisma.InvestmentUpdateManyWithWhereWithoutFinancialAccountInput[]
  deleteMany?: Prisma.InvestmentScalarWhereInput | Prisma.InvestmentScalarWhereInput[]
}

export type InvestmentUncheckedUpdateManyWithoutFinancialAccountNestedInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput> | Prisma.InvestmentCreateWithoutFinancialAccountInput[] | Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput | Prisma.InvestmentCreateOrConnectWithoutFinancialAccountInput[]
  upsert?: Prisma.InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInput | Prisma.InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInput[]
  createMany?: Prisma.InvestmentCreateManyFinancialAccountInputEnvelope
  set?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  disconnect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  delete?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  update?: Prisma.InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInput | Prisma.InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInput[]
  updateMany?: Prisma.InvestmentUpdateManyWithWhereWithoutFinancialAccountInput | Prisma.InvestmentUpdateManyWithWhereWithoutFinancialAccountInput[]
  deleteMany?: Prisma.InvestmentScalarWhereInput | Prisma.InvestmentScalarWhereInput[]
}

export type InvestmentCreateNestedManyWithoutInvestorInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutInvestorInput, Prisma.InvestmentUncheckedCreateWithoutInvestorInput> | Prisma.InvestmentCreateWithoutInvestorInput[] | Prisma.InvestmentUncheckedCreateWithoutInvestorInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutInvestorInput | Prisma.InvestmentCreateOrConnectWithoutInvestorInput[]
  createMany?: Prisma.InvestmentCreateManyInvestorInputEnvelope
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
}

export type InvestmentUncheckedCreateNestedManyWithoutInvestorInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutInvestorInput, Prisma.InvestmentUncheckedCreateWithoutInvestorInput> | Prisma.InvestmentCreateWithoutInvestorInput[] | Prisma.InvestmentUncheckedCreateWithoutInvestorInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutInvestorInput | Prisma.InvestmentCreateOrConnectWithoutInvestorInput[]
  createMany?: Prisma.InvestmentCreateManyInvestorInputEnvelope
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
}

export type InvestmentUpdateManyWithoutInvestorNestedInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutInvestorInput, Prisma.InvestmentUncheckedCreateWithoutInvestorInput> | Prisma.InvestmentCreateWithoutInvestorInput[] | Prisma.InvestmentUncheckedCreateWithoutInvestorInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutInvestorInput | Prisma.InvestmentCreateOrConnectWithoutInvestorInput[]
  upsert?: Prisma.InvestmentUpsertWithWhereUniqueWithoutInvestorInput | Prisma.InvestmentUpsertWithWhereUniqueWithoutInvestorInput[]
  createMany?: Prisma.InvestmentCreateManyInvestorInputEnvelope
  set?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  disconnect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  delete?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  update?: Prisma.InvestmentUpdateWithWhereUniqueWithoutInvestorInput | Prisma.InvestmentUpdateWithWhereUniqueWithoutInvestorInput[]
  updateMany?: Prisma.InvestmentUpdateManyWithWhereWithoutInvestorInput | Prisma.InvestmentUpdateManyWithWhereWithoutInvestorInput[]
  deleteMany?: Prisma.InvestmentScalarWhereInput | Prisma.InvestmentScalarWhereInput[]
}

export type InvestmentUncheckedUpdateManyWithoutInvestorNestedInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutInvestorInput, Prisma.InvestmentUncheckedCreateWithoutInvestorInput> | Prisma.InvestmentCreateWithoutInvestorInput[] | Prisma.InvestmentUncheckedCreateWithoutInvestorInput[]
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutInvestorInput | Prisma.InvestmentCreateOrConnectWithoutInvestorInput[]
  upsert?: Prisma.InvestmentUpsertWithWhereUniqueWithoutInvestorInput | Prisma.InvestmentUpsertWithWhereUniqueWithoutInvestorInput[]
  createMany?: Prisma.InvestmentCreateManyInvestorInputEnvelope
  set?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  disconnect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  delete?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  connect?: Prisma.InvestmentWhereUniqueInput | Prisma.InvestmentWhereUniqueInput[]
  update?: Prisma.InvestmentUpdateWithWhereUniqueWithoutInvestorInput | Prisma.InvestmentUpdateWithWhereUniqueWithoutInvestorInput[]
  updateMany?: Prisma.InvestmentUpdateManyWithWhereWithoutInvestorInput | Prisma.InvestmentUpdateManyWithWhereWithoutInvestorInput[]
  deleteMany?: Prisma.InvestmentScalarWhereInput | Prisma.InvestmentScalarWhereInput[]
}

export type EnumInvestmentStatusFieldUpdateOperationsInput = {
  set?: $Enums.InvestmentStatus
}

export type InvestmentCreateNestedOneWithoutTransactionsInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutTransactionsInput, Prisma.InvestmentUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutTransactionsInput
  connect?: Prisma.InvestmentWhereUniqueInput
}

export type InvestmentUpdateOneWithoutTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.InvestmentCreateWithoutTransactionsInput, Prisma.InvestmentUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.InvestmentCreateOrConnectWithoutTransactionsInput
  upsert?: Prisma.InvestmentUpsertWithoutTransactionsInput
  disconnect?: Prisma.InvestmentWhereInput | boolean
  delete?: Prisma.InvestmentWhereInput | boolean
  connect?: Prisma.InvestmentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InvestmentUpdateToOneWithWhereWithoutTransactionsInput, Prisma.InvestmentUpdateWithoutTransactionsInput>, Prisma.InvestmentUncheckedUpdateWithoutTransactionsInput>
}

export type InvestmentCreateWithoutFinancialAccountInput = {
  id?: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  investor: Prisma.AccountUserCreateNestedOneWithoutInvestmentsInput
  transactions?: Prisma.TransactionCreateNestedManyWithoutInvestmentInput
}

export type InvestmentUncheckedCreateWithoutFinancialAccountInput = {
  id?: string
  investorId: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutInvestmentInput
}

export type InvestmentCreateOrConnectWithoutFinancialAccountInput = {
  where: Prisma.InvestmentWhereUniqueInput
  create: Prisma.XOR<Prisma.InvestmentCreateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput>
}

export type InvestmentCreateManyFinancialAccountInputEnvelope = {
  data: Prisma.InvestmentCreateManyFinancialAccountInput | Prisma.InvestmentCreateManyFinancialAccountInput[]
  skipDuplicates?: boolean
}

export type InvestmentUpsertWithWhereUniqueWithoutFinancialAccountInput = {
  where: Prisma.InvestmentWhereUniqueInput
  update: Prisma.XOR<Prisma.InvestmentUpdateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedUpdateWithoutFinancialAccountInput>
  create: Prisma.XOR<Prisma.InvestmentCreateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedCreateWithoutFinancialAccountInput>
}

export type InvestmentUpdateWithWhereUniqueWithoutFinancialAccountInput = {
  where: Prisma.InvestmentWhereUniqueInput
  data: Prisma.XOR<Prisma.InvestmentUpdateWithoutFinancialAccountInput, Prisma.InvestmentUncheckedUpdateWithoutFinancialAccountInput>
}

export type InvestmentUpdateManyWithWhereWithoutFinancialAccountInput = {
  where: Prisma.InvestmentScalarWhereInput
  data: Prisma.XOR<Prisma.InvestmentUpdateManyMutationInput, Prisma.InvestmentUncheckedUpdateManyWithoutFinancialAccountInput>
}

export type InvestmentScalarWhereInput = {
  AND?: Prisma.InvestmentScalarWhereInput | Prisma.InvestmentScalarWhereInput[]
  OR?: Prisma.InvestmentScalarWhereInput[]
  NOT?: Prisma.InvestmentScalarWhereInput | Prisma.InvestmentScalarWhereInput[]
  id?: Prisma.StringFilter<"Investment"> | string
  financialAccountId?: Prisma.StringFilter<"Investment"> | string
  investorId?: Prisma.StringFilter<"Investment"> | string
  deposit?: Prisma.FloatFilter<"Investment"> | number
  investmentName?: Prisma.StringFilter<"Investment"> | string
  totalProfit?: Prisma.FloatFilter<"Investment"> | number
  profitCount?: Prisma.IntFilter<"Investment"> | number
  status?: Prisma.EnumInvestmentStatusFilter<"Investment"> | $Enums.InvestmentStatus
  pausedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  pausedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  closedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  closedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  terminatedAt?: Prisma.DateTimeNullableFilter<"Investment"> | Date | string | null
  terminatedReason?: Prisma.StringNullableFilter<"Investment"> | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFilter<"Investment"> | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFilter<"Investment"> | number
  duration?: Prisma.IntFilter<"Investment"> | number
  totalReturn?: Prisma.FloatFilter<"Investment"> | number
  periodicReturn?: Prisma.FloatFilter<"Investment"> | number
  profitDistribution?: Prisma.EnumProfitDistributionFilter<"Investment"> | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFilter<"Investment"> | number
  createdAt?: Prisma.DateTimeFilter<"Investment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Investment"> | Date | string
}

export type InvestmentCreateWithoutInvestorInput = {
  id?: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionCreateNestedManyWithoutInvestmentInput
  financialAccount: Prisma.FinancialAccountCreateNestedOneWithoutInvestmentsInput
}

export type InvestmentUncheckedCreateWithoutInvestorInput = {
  id?: string
  financialAccountId: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutInvestmentInput
}

export type InvestmentCreateOrConnectWithoutInvestorInput = {
  where: Prisma.InvestmentWhereUniqueInput
  create: Prisma.XOR<Prisma.InvestmentCreateWithoutInvestorInput, Prisma.InvestmentUncheckedCreateWithoutInvestorInput>
}

export type InvestmentCreateManyInvestorInputEnvelope = {
  data: Prisma.InvestmentCreateManyInvestorInput | Prisma.InvestmentCreateManyInvestorInput[]
  skipDuplicates?: boolean
}

export type InvestmentUpsertWithWhereUniqueWithoutInvestorInput = {
  where: Prisma.InvestmentWhereUniqueInput
  update: Prisma.XOR<Prisma.InvestmentUpdateWithoutInvestorInput, Prisma.InvestmentUncheckedUpdateWithoutInvestorInput>
  create: Prisma.XOR<Prisma.InvestmentCreateWithoutInvestorInput, Prisma.InvestmentUncheckedCreateWithoutInvestorInput>
}

export type InvestmentUpdateWithWhereUniqueWithoutInvestorInput = {
  where: Prisma.InvestmentWhereUniqueInput
  data: Prisma.XOR<Prisma.InvestmentUpdateWithoutInvestorInput, Prisma.InvestmentUncheckedUpdateWithoutInvestorInput>
}

export type InvestmentUpdateManyWithWhereWithoutInvestorInput = {
  where: Prisma.InvestmentScalarWhereInput
  data: Prisma.XOR<Prisma.InvestmentUpdateManyMutationInput, Prisma.InvestmentUncheckedUpdateManyWithoutInvestorInput>
}

export type InvestmentCreateWithoutTransactionsInput = {
  id?: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  investor: Prisma.AccountUserCreateNestedOneWithoutInvestmentsInput
  financialAccount: Prisma.FinancialAccountCreateNestedOneWithoutInvestmentsInput
}

export type InvestmentUncheckedCreateWithoutTransactionsInput = {
  id?: string
  financialAccountId: string
  investorId: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InvestmentCreateOrConnectWithoutTransactionsInput = {
  where: Prisma.InvestmentWhereUniqueInput
  create: Prisma.XOR<Prisma.InvestmentCreateWithoutTransactionsInput, Prisma.InvestmentUncheckedCreateWithoutTransactionsInput>
}

export type InvestmentUpsertWithoutTransactionsInput = {
  update: Prisma.XOR<Prisma.InvestmentUpdateWithoutTransactionsInput, Prisma.InvestmentUncheckedUpdateWithoutTransactionsInput>
  create: Prisma.XOR<Prisma.InvestmentCreateWithoutTransactionsInput, Prisma.InvestmentUncheckedCreateWithoutTransactionsInput>
  where?: Prisma.InvestmentWhereInput
}

export type InvestmentUpdateToOneWithWhereWithoutTransactionsInput = {
  where?: Prisma.InvestmentWhereInput
  data: Prisma.XOR<Prisma.InvestmentUpdateWithoutTransactionsInput, Prisma.InvestmentUncheckedUpdateWithoutTransactionsInput>
}

export type InvestmentUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  investor?: Prisma.AccountUserUpdateOneRequiredWithoutInvestmentsNestedInput
  financialAccount?: Prisma.FinancialAccountUpdateOneRequiredWithoutInvestmentsNestedInput
}

export type InvestmentUncheckedUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  investorId?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentCreateManyFinancialAccountInput = {
  id?: string
  investorId: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InvestmentUpdateWithoutFinancialAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  investor?: Prisma.AccountUserUpdateOneRequiredWithoutInvestmentsNestedInput
  transactions?: Prisma.TransactionUpdateManyWithoutInvestmentNestedInput
}

export type InvestmentUncheckedUpdateWithoutFinancialAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  investorId?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutInvestmentNestedInput
}

export type InvestmentUncheckedUpdateManyWithoutFinancialAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  investorId?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentCreateManyInvestorInput = {
  id?: string
  financialAccountId: string
  deposit: number
  investmentName: string
  totalProfit?: number
  profitCount?: number
  status?: $Enums.InvestmentStatus
  pausedAt?: Date | string | null
  pausedReason?: string | null
  closedAt?: Date | string | null
  closedReason?: string | null
  terminatedAt?: Date | string | null
  terminatedReason?: string | null
  category: $Enums.InvestmentPlanCategory
  daysCompleted?: number
  duration: number
  totalReturn: number
  periodicReturn: number
  profitDistribution?: $Enums.ProfitDistribution
  terminationFee?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InvestmentUpdateWithoutInvestorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUpdateManyWithoutInvestmentNestedInput
  financialAccount?: Prisma.FinancialAccountUpdateOneRequiredWithoutInvestmentsNestedInput
}

export type InvestmentUncheckedUpdateWithoutInvestorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutInvestmentNestedInput
}

export type InvestmentUncheckedUpdateManyWithoutInvestorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  deposit?: Prisma.FloatFieldUpdateOperationsInput | number
  investmentName?: Prisma.StringFieldUpdateOperationsInput | string
  totalProfit?: Prisma.FloatFieldUpdateOperationsInput | number
  profitCount?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumInvestmentStatusFieldUpdateOperationsInput | $Enums.InvestmentStatus
  pausedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pausedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  closedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  closedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  terminatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminatedReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.EnumInvestmentPlanCategoryFieldUpdateOperationsInput | $Enums.InvestmentPlanCategory
  daysCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  totalReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  periodicReturn?: Prisma.FloatFieldUpdateOperationsInput | number
  profitDistribution?: Prisma.EnumProfitDistributionFieldUpdateOperationsInput | $Enums.ProfitDistribution
  terminationFee?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type InvestmentCountOutputType
 */

export type InvestmentCountOutputType = {
  transactions: number
}

export type InvestmentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transactions?: boolean | InvestmentCountOutputTypeCountTransactionsArgs
}

/**
 * InvestmentCountOutputType without action
 */
export type InvestmentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentCountOutputType
   */
  select?: Prisma.InvestmentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * InvestmentCountOutputType without action
 */
export type InvestmentCountOutputTypeCountTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}


export type InvestmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  financialAccountId?: boolean
  investorId?: boolean
  deposit?: boolean
  investmentName?: boolean
  totalProfit?: boolean
  profitCount?: boolean
  status?: boolean
  pausedAt?: boolean
  pausedReason?: boolean
  closedAt?: boolean
  closedReason?: boolean
  terminatedAt?: boolean
  terminatedReason?: boolean
  category?: boolean
  daysCompleted?: boolean
  duration?: boolean
  totalReturn?: boolean
  periodicReturn?: boolean
  profitDistribution?: boolean
  terminationFee?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  investor?: boolean | Prisma.AccountUserDefaultArgs<ExtArgs>
  transactions?: boolean | Prisma.Investment$transactionsArgs<ExtArgs>
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.InvestmentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["investment"]>

export type InvestmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  financialAccountId?: boolean
  investorId?: boolean
  deposit?: boolean
  investmentName?: boolean
  totalProfit?: boolean
  profitCount?: boolean
  status?: boolean
  pausedAt?: boolean
  pausedReason?: boolean
  closedAt?: boolean
  closedReason?: boolean
  terminatedAt?: boolean
  terminatedReason?: boolean
  category?: boolean
  daysCompleted?: boolean
  duration?: boolean
  totalReturn?: boolean
  periodicReturn?: boolean
  profitDistribution?: boolean
  terminationFee?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  investor?: boolean | Prisma.AccountUserDefaultArgs<ExtArgs>
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["investment"]>

export type InvestmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  financialAccountId?: boolean
  investorId?: boolean
  deposit?: boolean
  investmentName?: boolean
  totalProfit?: boolean
  profitCount?: boolean
  status?: boolean
  pausedAt?: boolean
  pausedReason?: boolean
  closedAt?: boolean
  closedReason?: boolean
  terminatedAt?: boolean
  terminatedReason?: boolean
  category?: boolean
  daysCompleted?: boolean
  duration?: boolean
  totalReturn?: boolean
  periodicReturn?: boolean
  profitDistribution?: boolean
  terminationFee?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  investor?: boolean | Prisma.AccountUserDefaultArgs<ExtArgs>
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["investment"]>

export type InvestmentSelectScalar = {
  id?: boolean
  financialAccountId?: boolean
  investorId?: boolean
  deposit?: boolean
  investmentName?: boolean
  totalProfit?: boolean
  profitCount?: boolean
  status?: boolean
  pausedAt?: boolean
  pausedReason?: boolean
  closedAt?: boolean
  closedReason?: boolean
  terminatedAt?: boolean
  terminatedReason?: boolean
  category?: boolean
  daysCompleted?: boolean
  duration?: boolean
  totalReturn?: boolean
  periodicReturn?: boolean
  profitDistribution?: boolean
  terminationFee?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InvestmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "financialAccountId" | "investorId" | "deposit" | "investmentName" | "totalProfit" | "profitCount" | "status" | "pausedAt" | "pausedReason" | "closedAt" | "closedReason" | "terminatedAt" | "terminatedReason" | "category" | "daysCompleted" | "duration" | "totalReturn" | "periodicReturn" | "profitDistribution" | "terminationFee" | "createdAt" | "updatedAt", ExtArgs["result"]["investment"]>
export type InvestmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  investor?: boolean | Prisma.AccountUserDefaultArgs<ExtArgs>
  transactions?: boolean | Prisma.Investment$transactionsArgs<ExtArgs>
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.InvestmentCountOutputTypeDefaultArgs<ExtArgs>
}
export type InvestmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  investor?: boolean | Prisma.AccountUserDefaultArgs<ExtArgs>
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>
}
export type InvestmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  investor?: boolean | Prisma.AccountUserDefaultArgs<ExtArgs>
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>
}

export type $InvestmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Investment"
  objects: {
    investor: Prisma.$AccountUserPayload<ExtArgs>
    transactions: Prisma.$TransactionPayload<ExtArgs>[]
    financialAccount: Prisma.$FinancialAccountPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    financialAccountId: string
    investorId: string
    deposit: number
    investmentName: string
    totalProfit: number
    profitCount: number
    status: $Enums.InvestmentStatus
    pausedAt: Date | null
    pausedReason: string | null
    closedAt: Date | null
    closedReason: string | null
    terminatedAt: Date | null
    terminatedReason: string | null
    category: $Enums.InvestmentPlanCategory
    daysCompleted: number
    duration: number
    totalReturn: number
    periodicReturn: number
    profitDistribution: $Enums.ProfitDistribution
    terminationFee: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["investment"]>
  composites: {}
}

export type InvestmentGetPayload<S extends boolean | null | undefined | InvestmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InvestmentPayload, S>

export type InvestmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InvestmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InvestmentCountAggregateInputType | true
  }

export interface InvestmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Investment'], meta: { name: 'Investment' } }
  /**
   * Find zero or one Investment that matches the filter.
   * @param {InvestmentFindUniqueArgs} args - Arguments to find a Investment
   * @example
   * // Get one Investment
   * const investment = await prisma.investment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InvestmentFindUniqueArgs>(args: Prisma.SelectSubset<T, InvestmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Investment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InvestmentFindUniqueOrThrowArgs} args - Arguments to find a Investment
   * @example
   * // Get one Investment
   * const investment = await prisma.investment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InvestmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InvestmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Investment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentFindFirstArgs} args - Arguments to find a Investment
   * @example
   * // Get one Investment
   * const investment = await prisma.investment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InvestmentFindFirstArgs>(args?: Prisma.SelectSubset<T, InvestmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Investment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentFindFirstOrThrowArgs} args - Arguments to find a Investment
   * @example
   * // Get one Investment
   * const investment = await prisma.investment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InvestmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InvestmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Investments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Investments
   * const investments = await prisma.investment.findMany()
   * 
   * // Get first 10 Investments
   * const investments = await prisma.investment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const investmentWithIdOnly = await prisma.investment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InvestmentFindManyArgs>(args?: Prisma.SelectSubset<T, InvestmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Investment.
   * @param {InvestmentCreateArgs} args - Arguments to create a Investment.
   * @example
   * // Create one Investment
   * const Investment = await prisma.investment.create({
   *   data: {
   *     // ... data to create a Investment
   *   }
   * })
   * 
   */
  create<T extends InvestmentCreateArgs>(args: Prisma.SelectSubset<T, InvestmentCreateArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Investments.
   * @param {InvestmentCreateManyArgs} args - Arguments to create many Investments.
   * @example
   * // Create many Investments
   * const investment = await prisma.investment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InvestmentCreateManyArgs>(args?: Prisma.SelectSubset<T, InvestmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Investments and returns the data saved in the database.
   * @param {InvestmentCreateManyAndReturnArgs} args - Arguments to create many Investments.
   * @example
   * // Create many Investments
   * const investment = await prisma.investment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Investments and only return the `id`
   * const investmentWithIdOnly = await prisma.investment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InvestmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InvestmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Investment.
   * @param {InvestmentDeleteArgs} args - Arguments to delete one Investment.
   * @example
   * // Delete one Investment
   * const Investment = await prisma.investment.delete({
   *   where: {
   *     // ... filter to delete one Investment
   *   }
   * })
   * 
   */
  delete<T extends InvestmentDeleteArgs>(args: Prisma.SelectSubset<T, InvestmentDeleteArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Investment.
   * @param {InvestmentUpdateArgs} args - Arguments to update one Investment.
   * @example
   * // Update one Investment
   * const investment = await prisma.investment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InvestmentUpdateArgs>(args: Prisma.SelectSubset<T, InvestmentUpdateArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Investments.
   * @param {InvestmentDeleteManyArgs} args - Arguments to filter Investments to delete.
   * @example
   * // Delete a few Investments
   * const { count } = await prisma.investment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InvestmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, InvestmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Investments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Investments
   * const investment = await prisma.investment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InvestmentUpdateManyArgs>(args: Prisma.SelectSubset<T, InvestmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Investments and returns the data updated in the database.
   * @param {InvestmentUpdateManyAndReturnArgs} args - Arguments to update many Investments.
   * @example
   * // Update many Investments
   * const investment = await prisma.investment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Investments and only return the `id`
   * const investmentWithIdOnly = await prisma.investment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InvestmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InvestmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Investment.
   * @param {InvestmentUpsertArgs} args - Arguments to update or create a Investment.
   * @example
   * // Update or create a Investment
   * const investment = await prisma.investment.upsert({
   *   create: {
   *     // ... data to create a Investment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Investment we want to update
   *   }
   * })
   */
  upsert<T extends InvestmentUpsertArgs>(args: Prisma.SelectSubset<T, InvestmentUpsertArgs<ExtArgs>>): Prisma.Prisma__InvestmentClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Investments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentCountArgs} args - Arguments to filter Investments to count.
   * @example
   * // Count the number of Investments
   * const count = await prisma.investment.count({
   *   where: {
   *     // ... the filter for the Investments we want to count
   *   }
   * })
  **/
  count<T extends InvestmentCountArgs>(
    args?: Prisma.Subset<T, InvestmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InvestmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Investment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InvestmentAggregateArgs>(args: Prisma.Subset<T, InvestmentAggregateArgs>): Prisma.PrismaPromise<GetInvestmentAggregateType<T>>

  /**
   * Group by Investment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InvestmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InvestmentGroupByArgs['orderBy'] }
      : { orderBy?: InvestmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InvestmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Investment model
 */
readonly fields: InvestmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Investment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InvestmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  investor<T extends Prisma.AccountUserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountUserDefaultArgs<ExtArgs>>): Prisma.Prisma__AccountUserClient<runtime.Types.Result.GetResult<Prisma.$AccountUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  transactions<T extends Prisma.Investment$transactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Investment$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  financialAccount<T extends Prisma.FinancialAccountDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FinancialAccountDefaultArgs<ExtArgs>>): Prisma.Prisma__FinancialAccountClient<runtime.Types.Result.GetResult<Prisma.$FinancialAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Investment model
 */
export interface InvestmentFieldRefs {
  readonly id: Prisma.FieldRef<"Investment", 'String'>
  readonly financialAccountId: Prisma.FieldRef<"Investment", 'String'>
  readonly investorId: Prisma.FieldRef<"Investment", 'String'>
  readonly deposit: Prisma.FieldRef<"Investment", 'Float'>
  readonly investmentName: Prisma.FieldRef<"Investment", 'String'>
  readonly totalProfit: Prisma.FieldRef<"Investment", 'Float'>
  readonly profitCount: Prisma.FieldRef<"Investment", 'Int'>
  readonly status: Prisma.FieldRef<"Investment", 'InvestmentStatus'>
  readonly pausedAt: Prisma.FieldRef<"Investment", 'DateTime'>
  readonly pausedReason: Prisma.FieldRef<"Investment", 'String'>
  readonly closedAt: Prisma.FieldRef<"Investment", 'DateTime'>
  readonly closedReason: Prisma.FieldRef<"Investment", 'String'>
  readonly terminatedAt: Prisma.FieldRef<"Investment", 'DateTime'>
  readonly terminatedReason: Prisma.FieldRef<"Investment", 'String'>
  readonly category: Prisma.FieldRef<"Investment", 'InvestmentPlanCategory'>
  readonly daysCompleted: Prisma.FieldRef<"Investment", 'Int'>
  readonly duration: Prisma.FieldRef<"Investment", 'Int'>
  readonly totalReturn: Prisma.FieldRef<"Investment", 'Float'>
  readonly periodicReturn: Prisma.FieldRef<"Investment", 'Float'>
  readonly profitDistribution: Prisma.FieldRef<"Investment", 'ProfitDistribution'>
  readonly terminationFee: Prisma.FieldRef<"Investment", 'Float'>
  readonly createdAt: Prisma.FieldRef<"Investment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Investment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Investment findUnique
 */
export type InvestmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * Filter, which Investment to fetch.
   */
  where: Prisma.InvestmentWhereUniqueInput
}

/**
 * Investment findUniqueOrThrow
 */
export type InvestmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * Filter, which Investment to fetch.
   */
  where: Prisma.InvestmentWhereUniqueInput
}

/**
 * Investment findFirst
 */
export type InvestmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * Filter, which Investment to fetch.
   */
  where?: Prisma.InvestmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Investments to fetch.
   */
  orderBy?: Prisma.InvestmentOrderByWithRelationInput | Prisma.InvestmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Investments.
   */
  cursor?: Prisma.InvestmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Investments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Investments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Investments.
   */
  distinct?: Prisma.InvestmentScalarFieldEnum | Prisma.InvestmentScalarFieldEnum[]
}

/**
 * Investment findFirstOrThrow
 */
export type InvestmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * Filter, which Investment to fetch.
   */
  where?: Prisma.InvestmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Investments to fetch.
   */
  orderBy?: Prisma.InvestmentOrderByWithRelationInput | Prisma.InvestmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Investments.
   */
  cursor?: Prisma.InvestmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Investments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Investments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Investments.
   */
  distinct?: Prisma.InvestmentScalarFieldEnum | Prisma.InvestmentScalarFieldEnum[]
}

/**
 * Investment findMany
 */
export type InvestmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * Filter, which Investments to fetch.
   */
  where?: Prisma.InvestmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Investments to fetch.
   */
  orderBy?: Prisma.InvestmentOrderByWithRelationInput | Prisma.InvestmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Investments.
   */
  cursor?: Prisma.InvestmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Investments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Investments.
   */
  skip?: number
  distinct?: Prisma.InvestmentScalarFieldEnum | Prisma.InvestmentScalarFieldEnum[]
}

/**
 * Investment create
 */
export type InvestmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * The data needed to create a Investment.
   */
  data: Prisma.XOR<Prisma.InvestmentCreateInput, Prisma.InvestmentUncheckedCreateInput>
}

/**
 * Investment createMany
 */
export type InvestmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Investments.
   */
  data: Prisma.InvestmentCreateManyInput | Prisma.InvestmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Investment createManyAndReturn
 */
export type InvestmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * The data used to create many Investments.
   */
  data: Prisma.InvestmentCreateManyInput | Prisma.InvestmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Investment update
 */
export type InvestmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * The data needed to update a Investment.
   */
  data: Prisma.XOR<Prisma.InvestmentUpdateInput, Prisma.InvestmentUncheckedUpdateInput>
  /**
   * Choose, which Investment to update.
   */
  where: Prisma.InvestmentWhereUniqueInput
}

/**
 * Investment updateMany
 */
export type InvestmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Investments.
   */
  data: Prisma.XOR<Prisma.InvestmentUpdateManyMutationInput, Prisma.InvestmentUncheckedUpdateManyInput>
  /**
   * Filter which Investments to update
   */
  where?: Prisma.InvestmentWhereInput
  /**
   * Limit how many Investments to update.
   */
  limit?: number
}

/**
 * Investment updateManyAndReturn
 */
export type InvestmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * The data used to update Investments.
   */
  data: Prisma.XOR<Prisma.InvestmentUpdateManyMutationInput, Prisma.InvestmentUncheckedUpdateManyInput>
  /**
   * Filter which Investments to update
   */
  where?: Prisma.InvestmentWhereInput
  /**
   * Limit how many Investments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Investment upsert
 */
export type InvestmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * The filter to search for the Investment to update in case it exists.
   */
  where: Prisma.InvestmentWhereUniqueInput
  /**
   * In case the Investment found by the `where` argument doesn't exist, create a new Investment with this data.
   */
  create: Prisma.XOR<Prisma.InvestmentCreateInput, Prisma.InvestmentUncheckedCreateInput>
  /**
   * In case the Investment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InvestmentUpdateInput, Prisma.InvestmentUncheckedUpdateInput>
}

/**
 * Investment delete
 */
export type InvestmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
  /**
   * Filter which Investment to delete.
   */
  where: Prisma.InvestmentWhereUniqueInput
}

/**
 * Investment deleteMany
 */
export type InvestmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Investments to delete
   */
  where?: Prisma.InvestmentWhereInput
  /**
   * Limit how many Investments to delete.
   */
  limit?: number
}

/**
 * Investment.transactions
 */
export type Investment$transactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Investment without action
 */
export type InvestmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null
}

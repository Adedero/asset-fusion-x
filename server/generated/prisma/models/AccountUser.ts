/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `AccountUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from "../pjtg";
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums.js";
import type * as Prisma from "../internal/prismaNamespace.js";

/**
 * Model AccountUser
 *
 */
export type AccountUserModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AccountUserPayload>;

export type AggregateAccountUser = {
  _count: AccountUserCountAggregateOutputType | null;
  _avg: AccountUserAvgAggregateOutputType | null;
  _sum: AccountUserSumAggregateOutputType | null;
  _min: AccountUserMinAggregateOutputType | null;
  _max: AccountUserMaxAggregateOutputType | null;
};

export type AccountUserAvgAggregateOutputType = {
  ownership: number | null;
};

export type AccountUserSumAggregateOutputType = {
  ownership: number | null;
};

export type AccountUserMinAggregateOutputType = {
  id: string | null;
  userId: string | null;
  financialAccountId: string | null;
  role: $Enums.AccountUserRole | null;
  ownership: number | null;
  autosign: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccountUserMaxAggregateOutputType = {
  id: string | null;
  userId: string | null;
  financialAccountId: string | null;
  role: $Enums.AccountUserRole | null;
  ownership: number | null;
  autosign: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccountUserCountAggregateOutputType = {
  id: number;
  userId: number;
  financialAccountId: number;
  role: number;
  ownership: number;
  autosign: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type AccountUserAvgAggregateInputType = {
  ownership?: true;
};

export type AccountUserSumAggregateInputType = {
  ownership?: true;
};

export type AccountUserMinAggregateInputType = {
  id?: true;
  userId?: true;
  financialAccountId?: true;
  role?: true;
  ownership?: true;
  autosign?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccountUserMaxAggregateInputType = {
  id?: true;
  userId?: true;
  financialAccountId?: true;
  role?: true;
  ownership?: true;
  autosign?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccountUserCountAggregateInputType = {
  id?: true;
  userId?: true;
  financialAccountId?: true;
  role?: true;
  ownership?: true;
  autosign?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type AccountUserAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccountUser to aggregate.
   */
  where?: Prisma.AccountUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountUsers to fetch.
   */
  orderBy?:
    | Prisma.AccountUserOrderByWithRelationInput
    | Prisma.AccountUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AccountUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AccountUsers
   **/
  _count?: true | AccountUserCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AccountUserAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AccountUserSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AccountUserMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AccountUserMaxAggregateInputType;
};

export type GetAccountUserAggregateType<T extends AccountUserAggregateArgs> = {
  [P in keyof T & keyof AggregateAccountUser]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccountUser[P]>
    : Prisma.GetScalarType<T[P], AggregateAccountUser[P]>;
};

export type AccountUserGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AccountUserWhereInput;
  orderBy?:
    | Prisma.AccountUserOrderByWithAggregationInput
    | Prisma.AccountUserOrderByWithAggregationInput[];
  by: Prisma.AccountUserScalarFieldEnum[] | Prisma.AccountUserScalarFieldEnum;
  having?: Prisma.AccountUserScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AccountUserCountAggregateInputType | true;
  _avg?: AccountUserAvgAggregateInputType;
  _sum?: AccountUserSumAggregateInputType;
  _min?: AccountUserMinAggregateInputType;
  _max?: AccountUserMaxAggregateInputType;
};

export type AccountUserGroupByOutputType = {
  id: string;
  userId: string;
  financialAccountId: string;
  role: $Enums.AccountUserRole;
  ownership: number;
  autosign: boolean;
  createdAt: Date;
  updatedAt: Date;
  _count: AccountUserCountAggregateOutputType | null;
  _avg: AccountUserAvgAggregateOutputType | null;
  _sum: AccountUserSumAggregateOutputType | null;
  _min: AccountUserMinAggregateOutputType | null;
  _max: AccountUserMaxAggregateOutputType | null;
};

type GetAccountUserGroupByPayload<T extends AccountUserGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AccountUserGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof AccountUserGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountUserGroupByOutputType[P]>;
      }
    >
  >;

export type AccountUserWhereInput = {
  AND?: Prisma.AccountUserWhereInput | Prisma.AccountUserWhereInput[];
  OR?: Prisma.AccountUserWhereInput[];
  NOT?: Prisma.AccountUserWhereInput | Prisma.AccountUserWhereInput[];
  id?: Prisma.StringFilter<"AccountUser"> | string;
  userId?: Prisma.StringFilter<"AccountUser"> | string;
  financialAccountId?: Prisma.StringFilter<"AccountUser"> | string;
  role?:
    | Prisma.EnumAccountUserRoleFilter<"AccountUser">
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFilter<"AccountUser"> | number;
  autosign?: Prisma.BoolFilter<"AccountUser"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"AccountUser"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"AccountUser"> | Date | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  financialAccount?: Prisma.XOR<
    Prisma.FinancialAccountScalarRelationFilter,
    Prisma.FinancialAccountWhereInput
  >;
  transactions?: Prisma.TransactionListRelationFilter;
  investments?: Prisma.InvestmentListRelationFilter;
};

export type AccountUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  ownership?: Prisma.SortOrder;
  autosign?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  financialAccount?: Prisma.FinancialAccountOrderByWithRelationInput;
  transactions?: Prisma.TransactionOrderByRelationAggregateInput;
  investments?: Prisma.InvestmentOrderByRelationAggregateInput;
};

export type AccountUserWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    userId_financialAccountId?: Prisma.AccountUserUserIdFinancialAccountIdCompoundUniqueInput;
    AND?: Prisma.AccountUserWhereInput | Prisma.AccountUserWhereInput[];
    OR?: Prisma.AccountUserWhereInput[];
    NOT?: Prisma.AccountUserWhereInput | Prisma.AccountUserWhereInput[];
    userId?: Prisma.StringFilter<"AccountUser"> | string;
    financialAccountId?: Prisma.StringFilter<"AccountUser"> | string;
    role?:
      | Prisma.EnumAccountUserRoleFilter<"AccountUser">
      | $Enums.AccountUserRole;
    ownership?: Prisma.FloatFilter<"AccountUser"> | number;
    autosign?: Prisma.BoolFilter<"AccountUser"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"AccountUser"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"AccountUser"> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    financialAccount?: Prisma.XOR<
      Prisma.FinancialAccountScalarRelationFilter,
      Prisma.FinancialAccountWhereInput
    >;
    transactions?: Prisma.TransactionListRelationFilter;
    investments?: Prisma.InvestmentListRelationFilter;
  },
  "id" | "userId_financialAccountId"
>;

export type AccountUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  ownership?: Prisma.SortOrder;
  autosign?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.AccountUserCountOrderByAggregateInput;
  _avg?: Prisma.AccountUserAvgOrderByAggregateInput;
  _max?: Prisma.AccountUserMaxOrderByAggregateInput;
  _min?: Prisma.AccountUserMinOrderByAggregateInput;
  _sum?: Prisma.AccountUserSumOrderByAggregateInput;
};

export type AccountUserScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AccountUserScalarWhereWithAggregatesInput
    | Prisma.AccountUserScalarWhereWithAggregatesInput[];
  OR?: Prisma.AccountUserScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AccountUserScalarWhereWithAggregatesInput
    | Prisma.AccountUserScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AccountUser"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"AccountUser"> | string;
  financialAccountId?:
    | Prisma.StringWithAggregatesFilter<"AccountUser">
    | string;
  role?:
    | Prisma.EnumAccountUserRoleWithAggregatesFilter<"AccountUser">
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatWithAggregatesFilter<"AccountUser"> | number;
  autosign?: Prisma.BoolWithAggregatesFilter<"AccountUser"> | boolean;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AccountUser">
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<"AccountUser">
    | Date
    | string;
};

export type AccountUserCreateInput = {
  id?: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutAccountMembershipsInput;
  financialAccount: Prisma.FinancialAccountCreateNestedOneWithoutAccountUsersInput;
  transactions?: Prisma.TransactionCreateNestedManyWithoutInitiatorInput;
  investments?: Prisma.InvestmentCreateNestedManyWithoutInvestorInput;
};

export type AccountUserUncheckedCreateInput = {
  id?: string;
  userId: string;
  financialAccountId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutInitiatorInput;
  investments?: Prisma.InvestmentUncheckedCreateNestedManyWithoutInvestorInput;
};

export type AccountUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAccountMembershipsNestedInput;
  financialAccount?: Prisma.FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInput;
  transactions?: Prisma.TransactionUpdateManyWithoutInitiatorNestedInput;
  investments?: Prisma.InvestmentUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutInitiatorNestedInput;
  investments?: Prisma.InvestmentUncheckedUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserCreateManyInput = {
  id?: string;
  userId: string;
  financialAccountId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccountUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccountUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccountUserListRelationFilter = {
  every?: Prisma.AccountUserWhereInput;
  some?: Prisma.AccountUserWhereInput;
  none?: Prisma.AccountUserWhereInput;
};

export type AccountUserOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AccountUserUserIdFinancialAccountIdCompoundUniqueInput = {
  userId: string;
  financialAccountId: string;
};

export type AccountUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  ownership?: Prisma.SortOrder;
  autosign?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccountUserAvgOrderByAggregateInput = {
  ownership?: Prisma.SortOrder;
};

export type AccountUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  ownership?: Prisma.SortOrder;
  autosign?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccountUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  financialAccountId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  ownership?: Prisma.SortOrder;
  autosign?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccountUserSumOrderByAggregateInput = {
  ownership?: Prisma.SortOrder;
};

export type AccountUserScalarRelationFilter = {
  is?: Prisma.AccountUserWhereInput;
  isNot?: Prisma.AccountUserWhereInput;
};

export type AccountUserCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutUserInput,
        Prisma.AccountUserUncheckedCreateWithoutUserInput
      >
    | Prisma.AccountUserCreateWithoutUserInput[]
    | Prisma.AccountUserUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutUserInput
    | Prisma.AccountUserCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AccountUserCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
};

export type AccountUserUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutUserInput,
        Prisma.AccountUserUncheckedCreateWithoutUserInput
      >
    | Prisma.AccountUserCreateWithoutUserInput[]
    | Prisma.AccountUserUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutUserInput
    | Prisma.AccountUserCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AccountUserCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
};

export type AccountUserUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutUserInput,
        Prisma.AccountUserUncheckedCreateWithoutUserInput
      >
    | Prisma.AccountUserCreateWithoutUserInput[]
    | Prisma.AccountUserUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutUserInput
    | Prisma.AccountUserCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AccountUserCreateManyUserInputEnvelope;
  set?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  delete?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  update?:
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AccountUserUpdateManyWithWhereWithoutUserInput
    | Prisma.AccountUserUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AccountUserScalarWhereInput
    | Prisma.AccountUserScalarWhereInput[];
};

export type AccountUserUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutUserInput,
        Prisma.AccountUserUncheckedCreateWithoutUserInput
      >
    | Prisma.AccountUserCreateWithoutUserInput[]
    | Prisma.AccountUserUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutUserInput
    | Prisma.AccountUserCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AccountUserCreateManyUserInputEnvelope;
  set?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  delete?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  update?:
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AccountUserUpdateManyWithWhereWithoutUserInput
    | Prisma.AccountUserUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AccountUserScalarWhereInput
    | Prisma.AccountUserScalarWhereInput[];
};

export type AccountUserCreateNestedManyWithoutFinancialAccountInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutFinancialAccountInput,
        Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput
      >
    | Prisma.AccountUserCreateWithoutFinancialAccountInput[]
    | Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput[];
  createMany?: Prisma.AccountUserCreateManyFinancialAccountInputEnvelope;
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
};

export type AccountUserUncheckedCreateNestedManyWithoutFinancialAccountInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutFinancialAccountInput,
        Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput
      >
    | Prisma.AccountUserCreateWithoutFinancialAccountInput[]
    | Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput[];
  createMany?: Prisma.AccountUserCreateManyFinancialAccountInputEnvelope;
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
};

export type AccountUserUpdateManyWithoutFinancialAccountNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutFinancialAccountInput,
        Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput
      >
    | Prisma.AccountUserCreateWithoutFinancialAccountInput[]
    | Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput[];
  upsert?:
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInput
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInput[];
  createMany?: Prisma.AccountUserCreateManyFinancialAccountInputEnvelope;
  set?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  delete?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  update?:
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInput
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInput[];
  updateMany?:
    | Prisma.AccountUserUpdateManyWithWhereWithoutFinancialAccountInput
    | Prisma.AccountUserUpdateManyWithWhereWithoutFinancialAccountInput[];
  deleteMany?:
    | Prisma.AccountUserScalarWhereInput
    | Prisma.AccountUserScalarWhereInput[];
};

export type AccountUserUncheckedUpdateManyWithoutFinancialAccountNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccountUserCreateWithoutFinancialAccountInput,
        Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput
      >
    | Prisma.AccountUserCreateWithoutFinancialAccountInput[]
    | Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput[];
  connectOrCreate?:
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput
    | Prisma.AccountUserCreateOrConnectWithoutFinancialAccountInput[];
  upsert?:
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInput
    | Prisma.AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInput[];
  createMany?: Prisma.AccountUserCreateManyFinancialAccountInputEnvelope;
  set?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  disconnect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  delete?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  connect?:
    | Prisma.AccountUserWhereUniqueInput
    | Prisma.AccountUserWhereUniqueInput[];
  update?:
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInput
    | Prisma.AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInput[];
  updateMany?:
    | Prisma.AccountUserUpdateManyWithWhereWithoutFinancialAccountInput
    | Prisma.AccountUserUpdateManyWithWhereWithoutFinancialAccountInput[];
  deleteMany?:
    | Prisma.AccountUserScalarWhereInput
    | Prisma.AccountUserScalarWhereInput[];
};

export type EnumAccountUserRoleFieldUpdateOperationsInput = {
  set?: $Enums.AccountUserRole;
};

export type AccountUserCreateNestedOneWithoutInvestmentsInput = {
  create?: Prisma.XOR<
    Prisma.AccountUserCreateWithoutInvestmentsInput,
    Prisma.AccountUserUncheckedCreateWithoutInvestmentsInput
  >;
  connectOrCreate?: Prisma.AccountUserCreateOrConnectWithoutInvestmentsInput;
  connect?: Prisma.AccountUserWhereUniqueInput;
};

export type AccountUserUpdateOneRequiredWithoutInvestmentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.AccountUserCreateWithoutInvestmentsInput,
    Prisma.AccountUserUncheckedCreateWithoutInvestmentsInput
  >;
  connectOrCreate?: Prisma.AccountUserCreateOrConnectWithoutInvestmentsInput;
  upsert?: Prisma.AccountUserUpsertWithoutInvestmentsInput;
  connect?: Prisma.AccountUserWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AccountUserUpdateToOneWithWhereWithoutInvestmentsInput,
      Prisma.AccountUserUpdateWithoutInvestmentsInput
    >,
    Prisma.AccountUserUncheckedUpdateWithoutInvestmentsInput
  >;
};

export type AccountUserCreateNestedOneWithoutTransactionsInput = {
  create?: Prisma.XOR<
    Prisma.AccountUserCreateWithoutTransactionsInput,
    Prisma.AccountUserUncheckedCreateWithoutTransactionsInput
  >;
  connectOrCreate?: Prisma.AccountUserCreateOrConnectWithoutTransactionsInput;
  connect?: Prisma.AccountUserWhereUniqueInput;
};

export type AccountUserUpdateOneRequiredWithoutTransactionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.AccountUserCreateWithoutTransactionsInput,
    Prisma.AccountUserUncheckedCreateWithoutTransactionsInput
  >;
  connectOrCreate?: Prisma.AccountUserCreateOrConnectWithoutTransactionsInput;
  upsert?: Prisma.AccountUserUpsertWithoutTransactionsInput;
  connect?: Prisma.AccountUserWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AccountUserUpdateToOneWithWhereWithoutTransactionsInput,
      Prisma.AccountUserUpdateWithoutTransactionsInput
    >,
    Prisma.AccountUserUncheckedUpdateWithoutTransactionsInput
  >;
};

export type AccountUserCreateWithoutUserInput = {
  id?: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  financialAccount: Prisma.FinancialAccountCreateNestedOneWithoutAccountUsersInput;
  transactions?: Prisma.TransactionCreateNestedManyWithoutInitiatorInput;
  investments?: Prisma.InvestmentCreateNestedManyWithoutInvestorInput;
};

export type AccountUserUncheckedCreateWithoutUserInput = {
  id?: string;
  financialAccountId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutInitiatorInput;
  investments?: Prisma.InvestmentUncheckedCreateNestedManyWithoutInvestorInput;
};

export type AccountUserCreateOrConnectWithoutUserInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutUserInput,
    Prisma.AccountUserUncheckedCreateWithoutUserInput
  >;
};

export type AccountUserCreateManyUserInputEnvelope = {
  data:
    | Prisma.AccountUserCreateManyUserInput
    | Prisma.AccountUserCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type AccountUserUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutUserInput,
    Prisma.AccountUserUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutUserInput,
    Prisma.AccountUserUncheckedCreateWithoutUserInput
  >;
};

export type AccountUserUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutUserInput,
    Prisma.AccountUserUncheckedUpdateWithoutUserInput
  >;
};

export type AccountUserUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AccountUserScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccountUserUpdateManyMutationInput,
    Prisma.AccountUserUncheckedUpdateManyWithoutUserInput
  >;
};

export type AccountUserScalarWhereInput = {
  AND?:
    | Prisma.AccountUserScalarWhereInput
    | Prisma.AccountUserScalarWhereInput[];
  OR?: Prisma.AccountUserScalarWhereInput[];
  NOT?:
    | Prisma.AccountUserScalarWhereInput
    | Prisma.AccountUserScalarWhereInput[];
  id?: Prisma.StringFilter<"AccountUser"> | string;
  userId?: Prisma.StringFilter<"AccountUser"> | string;
  financialAccountId?: Prisma.StringFilter<"AccountUser"> | string;
  role?:
    | Prisma.EnumAccountUserRoleFilter<"AccountUser">
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFilter<"AccountUser"> | number;
  autosign?: Prisma.BoolFilter<"AccountUser"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"AccountUser"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"AccountUser"> | Date | string;
};

export type AccountUserCreateWithoutFinancialAccountInput = {
  id?: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutAccountMembershipsInput;
  transactions?: Prisma.TransactionCreateNestedManyWithoutInitiatorInput;
  investments?: Prisma.InvestmentCreateNestedManyWithoutInvestorInput;
};

export type AccountUserUncheckedCreateWithoutFinancialAccountInput = {
  id?: string;
  userId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutInitiatorInput;
  investments?: Prisma.InvestmentUncheckedCreateNestedManyWithoutInvestorInput;
};

export type AccountUserCreateOrConnectWithoutFinancialAccountInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutFinancialAccountInput,
    Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput
  >;
};

export type AccountUserCreateManyFinancialAccountInputEnvelope = {
  data:
    | Prisma.AccountUserCreateManyFinancialAccountInput
    | Prisma.AccountUserCreateManyFinancialAccountInput[];
  skipDuplicates?: boolean;
};

export type AccountUserUpsertWithWhereUniqueWithoutFinancialAccountInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutFinancialAccountInput,
    Prisma.AccountUserUncheckedUpdateWithoutFinancialAccountInput
  >;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutFinancialAccountInput,
    Prisma.AccountUserUncheckedCreateWithoutFinancialAccountInput
  >;
};

export type AccountUserUpdateWithWhereUniqueWithoutFinancialAccountInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutFinancialAccountInput,
    Prisma.AccountUserUncheckedUpdateWithoutFinancialAccountInput
  >;
};

export type AccountUserUpdateManyWithWhereWithoutFinancialAccountInput = {
  where: Prisma.AccountUserScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccountUserUpdateManyMutationInput,
    Prisma.AccountUserUncheckedUpdateManyWithoutFinancialAccountInput
  >;
};

export type AccountUserCreateWithoutInvestmentsInput = {
  id?: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutAccountMembershipsInput;
  financialAccount: Prisma.FinancialAccountCreateNestedOneWithoutAccountUsersInput;
  transactions?: Prisma.TransactionCreateNestedManyWithoutInitiatorInput;
};

export type AccountUserUncheckedCreateWithoutInvestmentsInput = {
  id?: string;
  userId: string;
  financialAccountId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutInitiatorInput;
};

export type AccountUserCreateOrConnectWithoutInvestmentsInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutInvestmentsInput,
    Prisma.AccountUserUncheckedCreateWithoutInvestmentsInput
  >;
};

export type AccountUserUpsertWithoutInvestmentsInput = {
  update: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutInvestmentsInput,
    Prisma.AccountUserUncheckedUpdateWithoutInvestmentsInput
  >;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutInvestmentsInput,
    Prisma.AccountUserUncheckedCreateWithoutInvestmentsInput
  >;
  where?: Prisma.AccountUserWhereInput;
};

export type AccountUserUpdateToOneWithWhereWithoutInvestmentsInput = {
  where?: Prisma.AccountUserWhereInput;
  data: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutInvestmentsInput,
    Prisma.AccountUserUncheckedUpdateWithoutInvestmentsInput
  >;
};

export type AccountUserUpdateWithoutInvestmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAccountMembershipsNestedInput;
  financialAccount?: Prisma.FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInput;
  transactions?: Prisma.TransactionUpdateManyWithoutInitiatorNestedInput;
};

export type AccountUserUncheckedUpdateWithoutInvestmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutInitiatorNestedInput;
};

export type AccountUserCreateWithoutTransactionsInput = {
  id?: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutAccountMembershipsInput;
  financialAccount: Prisma.FinancialAccountCreateNestedOneWithoutAccountUsersInput;
  investments?: Prisma.InvestmentCreateNestedManyWithoutInvestorInput;
};

export type AccountUserUncheckedCreateWithoutTransactionsInput = {
  id?: string;
  userId: string;
  financialAccountId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  investments?: Prisma.InvestmentUncheckedCreateNestedManyWithoutInvestorInput;
};

export type AccountUserCreateOrConnectWithoutTransactionsInput = {
  where: Prisma.AccountUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutTransactionsInput,
    Prisma.AccountUserUncheckedCreateWithoutTransactionsInput
  >;
};

export type AccountUserUpsertWithoutTransactionsInput = {
  update: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutTransactionsInput,
    Prisma.AccountUserUncheckedUpdateWithoutTransactionsInput
  >;
  create: Prisma.XOR<
    Prisma.AccountUserCreateWithoutTransactionsInput,
    Prisma.AccountUserUncheckedCreateWithoutTransactionsInput
  >;
  where?: Prisma.AccountUserWhereInput;
};

export type AccountUserUpdateToOneWithWhereWithoutTransactionsInput = {
  where?: Prisma.AccountUserWhereInput;
  data: Prisma.XOR<
    Prisma.AccountUserUpdateWithoutTransactionsInput,
    Prisma.AccountUserUncheckedUpdateWithoutTransactionsInput
  >;
};

export type AccountUserUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAccountMembershipsNestedInput;
  financialAccount?: Prisma.FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInput;
  investments?: Prisma.InvestmentUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserUncheckedUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  investments?: Prisma.InvestmentUncheckedUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserCreateManyUserInput = {
  id?: string;
  financialAccountId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccountUserUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  financialAccount?: Prisma.FinancialAccountUpdateOneRequiredWithoutAccountUsersNestedInput;
  transactions?: Prisma.TransactionUpdateManyWithoutInitiatorNestedInput;
  investments?: Prisma.InvestmentUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutInitiatorNestedInput;
  investments?: Prisma.InvestmentUncheckedUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  financialAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccountUserCreateManyFinancialAccountInput = {
  id?: string;
  userId: string;
  role?: $Enums.AccountUserRole;
  ownership?: number;
  autosign?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccountUserUpdateWithoutFinancialAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAccountMembershipsNestedInput;
  transactions?: Prisma.TransactionUpdateManyWithoutInitiatorNestedInput;
  investments?: Prisma.InvestmentUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserUncheckedUpdateWithoutFinancialAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutInitiatorNestedInput;
  investments?: Prisma.InvestmentUncheckedUpdateManyWithoutInvestorNestedInput;
};

export type AccountUserUncheckedUpdateManyWithoutFinancialAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?:
    | Prisma.EnumAccountUserRoleFieldUpdateOperationsInput
    | $Enums.AccountUserRole;
  ownership?: Prisma.FloatFieldUpdateOperationsInput | number;
  autosign?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type AccountUserCountOutputType
 */

export type AccountUserCountOutputType = {
  transactions: number;
  investments: number;
};

export type AccountUserCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  transactions?: boolean | AccountUserCountOutputTypeCountTransactionsArgs;
  investments?: boolean | AccountUserCountOutputTypeCountInvestmentsArgs;
};

/**
 * AccountUserCountOutputType without action
 */
export type AccountUserCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUserCountOutputType
   */
  select?: Prisma.AccountUserCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AccountUserCountOutputType without action
 */
export type AccountUserCountOutputTypeCountTransactionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TransactionWhereInput;
};

/**
 * AccountUserCountOutputType without action
 */
export type AccountUserCountOutputTypeCountInvestmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InvestmentWhereInput;
};

export type AccountUserSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    financialAccountId?: boolean;
    role?: boolean;
    ownership?: boolean;
    autosign?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
    transactions?: boolean | Prisma.AccountUser$transactionsArgs<ExtArgs>;
    investments?: boolean | Prisma.AccountUser$investmentsArgs<ExtArgs>;
    _count?: boolean | Prisma.AccountUserCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["accountUser"]
>;

export type AccountUserSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    financialAccountId?: boolean;
    role?: boolean;
    ownership?: boolean;
    autosign?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["accountUser"]
>;

export type AccountUserSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    financialAccountId?: boolean;
    role?: boolean;
    ownership?: boolean;
    autosign?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["accountUser"]
>;

export type AccountUserSelectScalar = {
  id?: boolean;
  userId?: boolean;
  financialAccountId?: boolean;
  role?: boolean;
  ownership?: boolean;
  autosign?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type AccountUserOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "userId"
  | "financialAccountId"
  | "role"
  | "ownership"
  | "autosign"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["accountUser"]
>;
export type AccountUserInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
  transactions?: boolean | Prisma.AccountUser$transactionsArgs<ExtArgs>;
  investments?: boolean | Prisma.AccountUser$investmentsArgs<ExtArgs>;
  _count?: boolean | Prisma.AccountUserCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AccountUserIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
};
export type AccountUserIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  financialAccount?: boolean | Prisma.FinancialAccountDefaultArgs<ExtArgs>;
};

export type $AccountUserPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "AccountUser";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    financialAccount: Prisma.$FinancialAccountPayload<ExtArgs>;
    transactions: Prisma.$TransactionPayload<ExtArgs>[];
    investments: Prisma.$InvestmentPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      userId: string;
      financialAccountId: string;
      role: $Enums.AccountUserRole;
      ownership: number;
      autosign: boolean;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["accountUser"]
  >;
  composites: {};
};

export type AccountUserGetPayload<
  S extends boolean | null | undefined | AccountUserDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AccountUserPayload, S>;

export type AccountUserCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AccountUserFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: AccountUserCountAggregateInputType | true;
};

export interface AccountUserDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AccountUser"];
    meta: { name: "AccountUser" };
  };
  /**
   * Find zero or one AccountUser that matches the filter.
   * @param {AccountUserFindUniqueArgs} args - Arguments to find a AccountUser
   * @example
   * // Get one AccountUser
   * const accountUser = await prisma.accountUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AccountUserFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AccountUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountUserFindUniqueOrThrowArgs} args - Arguments to find a AccountUser
   * @example
   * // Get one AccountUser
   * const accountUser = await prisma.accountUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountUserFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AccountUserFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccountUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUserFindFirstArgs} args - Arguments to find a AccountUser
   * @example
   * // Get one AccountUser
   * const accountUser = await prisma.accountUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountUserFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AccountUserFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccountUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUserFindFirstOrThrowArgs} args - Arguments to find a AccountUser
   * @example
   * // Get one AccountUser
   * const accountUser = await prisma.accountUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountUserFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AccountUserFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AccountUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccountUsers
   * const accountUsers = await prisma.accountUser.findMany()
   *
   * // Get first 10 AccountUsers
   * const accountUsers = await prisma.accountUser.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const accountUserWithIdOnly = await prisma.accountUser.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AccountUserFindManyArgs>(
    args?: Prisma.SelectSubset<T, AccountUserFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AccountUser.
   * @param {AccountUserCreateArgs} args - Arguments to create a AccountUser.
   * @example
   * // Create one AccountUser
   * const AccountUser = await prisma.accountUser.create({
   *   data: {
   *     // ... data to create a AccountUser
   *   }
   * })
   *
   */
  create<T extends AccountUserCreateArgs>(
    args: Prisma.SelectSubset<T, AccountUserCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AccountUsers.
   * @param {AccountUserCreateManyArgs} args - Arguments to create many AccountUsers.
   * @example
   * // Create many AccountUsers
   * const accountUser = await prisma.accountUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AccountUserCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AccountUserCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AccountUsers and returns the data saved in the database.
   * @param {AccountUserCreateManyAndReturnArgs} args - Arguments to create many AccountUsers.
   * @example
   * // Create many AccountUsers
   * const accountUser = await prisma.accountUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AccountUsers and only return the `id`
   * const accountUserWithIdOnly = await prisma.accountUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AccountUserCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AccountUserCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AccountUser.
   * @param {AccountUserDeleteArgs} args - Arguments to delete one AccountUser.
   * @example
   * // Delete one AccountUser
   * const AccountUser = await prisma.accountUser.delete({
   *   where: {
   *     // ... filter to delete one AccountUser
   *   }
   * })
   *
   */
  delete<T extends AccountUserDeleteArgs>(
    args: Prisma.SelectSubset<T, AccountUserDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AccountUser.
   * @param {AccountUserUpdateArgs} args - Arguments to update one AccountUser.
   * @example
   * // Update one AccountUser
   * const accountUser = await prisma.accountUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AccountUserUpdateArgs>(
    args: Prisma.SelectSubset<T, AccountUserUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AccountUsers.
   * @param {AccountUserDeleteManyArgs} args - Arguments to filter AccountUsers to delete.
   * @example
   * // Delete a few AccountUsers
   * const { count } = await prisma.accountUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AccountUserDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AccountUserDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccountUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccountUsers
   * const accountUser = await prisma.accountUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AccountUserUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AccountUserUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccountUsers and returns the data updated in the database.
   * @param {AccountUserUpdateManyAndReturnArgs} args - Arguments to update many AccountUsers.
   * @example
   * // Update many AccountUsers
   * const accountUser = await prisma.accountUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AccountUsers and only return the `id`
   * const accountUserWithIdOnly = await prisma.accountUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AccountUserUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AccountUserUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AccountUser.
   * @param {AccountUserUpsertArgs} args - Arguments to update or create a AccountUser.
   * @example
   * // Update or create a AccountUser
   * const accountUser = await prisma.accountUser.upsert({
   *   create: {
   *     // ... data to create a AccountUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccountUser we want to update
   *   }
   * })
   */
  upsert<T extends AccountUserUpsertArgs>(
    args: Prisma.SelectSubset<T, AccountUserUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AccountUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountUserPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AccountUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUserCountArgs} args - Arguments to filter AccountUsers to count.
   * @example
   * // Count the number of AccountUsers
   * const count = await prisma.accountUser.count({
   *   where: {
   *     // ... the filter for the AccountUsers we want to count
   *   }
   * })
   **/
  count<T extends AccountUserCountArgs>(
    args?: Prisma.Subset<T, AccountUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AccountUserCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AccountUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AccountUserAggregateArgs>(
    args: Prisma.Subset<T, AccountUserAggregateArgs>,
  ): Prisma.PrismaPromise<GetAccountUserAggregateType<T>>;

  /**
   * Group by AccountUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AccountUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountUserGroupByArgs["orderBy"] }
      : { orderBy?: AccountUserGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AccountUserGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAccountUserGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AccountUser model
   */
  readonly fields: AccountUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccountUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountUserClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  financialAccount<T extends Prisma.FinancialAccountDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FinancialAccountDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__FinancialAccountClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FinancialAccountPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  transactions<T extends Prisma.AccountUser$transactionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccountUser$transactionsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$TransactionPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  investments<T extends Prisma.AccountUser$investmentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccountUser$investmentsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$InvestmentPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AccountUser model
 */
export interface AccountUserFieldRefs {
  readonly id: Prisma.FieldRef<"AccountUser", "String">;
  readonly userId: Prisma.FieldRef<"AccountUser", "String">;
  readonly financialAccountId: Prisma.FieldRef<"AccountUser", "String">;
  readonly role: Prisma.FieldRef<"AccountUser", "AccountUserRole">;
  readonly ownership: Prisma.FieldRef<"AccountUser", "Float">;
  readonly autosign: Prisma.FieldRef<"AccountUser", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"AccountUser", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"AccountUser", "DateTime">;
}

// Custom InputTypes
/**
 * AccountUser findUnique
 */
export type AccountUserFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * Filter, which AccountUser to fetch.
   */
  where: Prisma.AccountUserWhereUniqueInput;
};

/**
 * AccountUser findUniqueOrThrow
 */
export type AccountUserFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * Filter, which AccountUser to fetch.
   */
  where: Prisma.AccountUserWhereUniqueInput;
};

/**
 * AccountUser findFirst
 */
export type AccountUserFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * Filter, which AccountUser to fetch.
   */
  where?: Prisma.AccountUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountUsers to fetch.
   */
  orderBy?:
    | Prisma.AccountUserOrderByWithRelationInput
    | Prisma.AccountUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccountUsers.
   */
  cursor?: Prisma.AccountUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccountUsers.
   */
  distinct?:
    | Prisma.AccountUserScalarFieldEnum
    | Prisma.AccountUserScalarFieldEnum[];
};

/**
 * AccountUser findFirstOrThrow
 */
export type AccountUserFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * Filter, which AccountUser to fetch.
   */
  where?: Prisma.AccountUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountUsers to fetch.
   */
  orderBy?:
    | Prisma.AccountUserOrderByWithRelationInput
    | Prisma.AccountUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccountUsers.
   */
  cursor?: Prisma.AccountUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccountUsers.
   */
  distinct?:
    | Prisma.AccountUserScalarFieldEnum
    | Prisma.AccountUserScalarFieldEnum[];
};

/**
 * AccountUser findMany
 */
export type AccountUserFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * Filter, which AccountUsers to fetch.
   */
  where?: Prisma.AccountUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountUsers to fetch.
   */
  orderBy?:
    | Prisma.AccountUserOrderByWithRelationInput
    | Prisma.AccountUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AccountUsers.
   */
  cursor?: Prisma.AccountUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountUsers.
   */
  skip?: number;
  distinct?:
    | Prisma.AccountUserScalarFieldEnum
    | Prisma.AccountUserScalarFieldEnum[];
};

/**
 * AccountUser create
 */
export type AccountUserCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * The data needed to create a AccountUser.
   */
  data: Prisma.XOR<
    Prisma.AccountUserCreateInput,
    Prisma.AccountUserUncheckedCreateInput
  >;
};

/**
 * AccountUser createMany
 */
export type AccountUserCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AccountUsers.
   */
  data: Prisma.AccountUserCreateManyInput | Prisma.AccountUserCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AccountUser createManyAndReturn
 */
export type AccountUserCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * The data used to create many AccountUsers.
   */
  data: Prisma.AccountUserCreateManyInput | Prisma.AccountUserCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AccountUser update
 */
export type AccountUserUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * The data needed to update a AccountUser.
   */
  data: Prisma.XOR<
    Prisma.AccountUserUpdateInput,
    Prisma.AccountUserUncheckedUpdateInput
  >;
  /**
   * Choose, which AccountUser to update.
   */
  where: Prisma.AccountUserWhereUniqueInput;
};

/**
 * AccountUser updateMany
 */
export type AccountUserUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AccountUsers.
   */
  data: Prisma.XOR<
    Prisma.AccountUserUpdateManyMutationInput,
    Prisma.AccountUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccountUsers to update
   */
  where?: Prisma.AccountUserWhereInput;
  /**
   * Limit how many AccountUsers to update.
   */
  limit?: number;
};

/**
 * AccountUser updateManyAndReturn
 */
export type AccountUserUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * The data used to update AccountUsers.
   */
  data: Prisma.XOR<
    Prisma.AccountUserUpdateManyMutationInput,
    Prisma.AccountUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccountUsers to update
   */
  where?: Prisma.AccountUserWhereInput;
  /**
   * Limit how many AccountUsers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AccountUser upsert
 */
export type AccountUserUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * The filter to search for the AccountUser to update in case it exists.
   */
  where: Prisma.AccountUserWhereUniqueInput;
  /**
   * In case the AccountUser found by the `where` argument doesn't exist, create a new AccountUser with this data.
   */
  create: Prisma.XOR<
    Prisma.AccountUserCreateInput,
    Prisma.AccountUserUncheckedCreateInput
  >;
  /**
   * In case the AccountUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AccountUserUpdateInput,
    Prisma.AccountUserUncheckedUpdateInput
  >;
};

/**
 * AccountUser delete
 */
export type AccountUserDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
  /**
   * Filter which AccountUser to delete.
   */
  where: Prisma.AccountUserWhereUniqueInput;
};

/**
 * AccountUser deleteMany
 */
export type AccountUserDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccountUsers to delete
   */
  where?: Prisma.AccountUserWhereInput;
  /**
   * Limit how many AccountUsers to delete.
   */
  limit?: number;
};

/**
 * AccountUser.transactions
 */
export type AccountUser$transactionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null;
  where?: Prisma.TransactionWhereInput;
  orderBy?:
    | Prisma.TransactionOrderByWithRelationInput
    | Prisma.TransactionOrderByWithRelationInput[];
  cursor?: Prisma.TransactionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.TransactionScalarFieldEnum
    | Prisma.TransactionScalarFieldEnum[];
};

/**
 * AccountUser.investments
 */
export type AccountUser$investmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null;
  where?: Prisma.InvestmentWhereInput;
  orderBy?:
    | Prisma.InvestmentOrderByWithRelationInput
    | Prisma.InvestmentOrderByWithRelationInput[];
  cursor?: Prisma.InvestmentWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.InvestmentScalarFieldEnum
    | Prisma.InvestmentScalarFieldEnum[];
};

/**
 * AccountUser without action
 */
export type AccountUserDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccountUser
   */
  select?: Prisma.AccountUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountUser
   */
  omit?: Prisma.AccountUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountUserInclude<ExtArgs> | null;
};
